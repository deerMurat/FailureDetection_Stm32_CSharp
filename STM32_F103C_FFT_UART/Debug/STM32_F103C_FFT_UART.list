
STM32_F103C_FFT_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000761c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007730  08007730  00017730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b98  08007b98  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007b98  08007b98  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b98  08007b98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b98  08007b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000074  08007c14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08007c14  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0a5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002234  00000000  00000000  0002e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00030378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00031118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f7  00000000  00000000  00031db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ece0  00000000  00000000  0004a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090131  00000000  00000000  00059487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e95b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004748  00000000  00000000  000e960c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007714 	.word	0x08007714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007714 	.word	0x08007714

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f000 fe8a 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f80e 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 f91e 	bl	8001184 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f48:	f000 f866 	bl	8001018 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000f4c:	f000 f8a2 	bl	8001094 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000f50:	f000 f8ee 	bl	8001130 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4); //Tımer başlat
 8000f54:	4801      	ldr	r0, [pc, #4]	; (8000f5c <main+0x24>)
 8000f56:	f002 fb39 	bl	80035cc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <main+0x22>
 8000f5c:	200001a4 	.word	0x200001a4

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6a:	2228      	movs	r2, #40	; 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fb58 	bl	8004624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fde8 	bl	8002b8c <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fc2:	f000 fca3 	bl	800190c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 f852 	bl	800308c <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fee:	f000 fc8d 	bl	800190c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 f9de 	bl	80033c0 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800100a:	f000 fc7f 	bl	800190c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_ADC1_Init+0x74>)
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <MX_ADC1_Init+0x78>)
 800102c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_ADC1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_ADC1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_ADC1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_ADC1_Init+0x74>)
 8001042:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_ADC1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_ADC1_Init+0x74>)
 8001050:	2201      	movs	r2, #1
 8001052:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_ADC1_Init+0x74>)
 8001056:	f000 fe5f 	bl	8001d18 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001060:	f000 fc54 	bl	800190c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001068:	2301      	movs	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_ADC1_Init+0x74>)
 8001076:	f001 f8b7 	bl	80021e8 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001080:	f000 fc44 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200003b4 	.word	0x200003b4
 8001090:	40012400 	.word	0x40012400

08001094 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
	// fft_Freq = 18000000 / prescaler
// int period = 18000000 / 200;

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_TIM4_Init+0x94>)
 80010b2:	4a1e      	ldr	r2, [pc, #120]	; (800112c <MX_TIM4_Init+0x98>)
 80010b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28800-1;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_TIM4_Init+0x94>)
 80010b8:	f247 027f 	movw	r2, #28799	; 0x707f
 80010bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_TIM4_Init+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5-1;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_TIM4_Init+0x94>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_TIM4_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM4_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_TIM4_Init+0x94>)
 80010d8:	f002 fa28 	bl	800352c <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 fc13 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_TIM4_Init+0x94>)
 80010f4:	f002 fbc4 	bl	8003880 <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80010fe:	f000 fc05 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM4_Init+0x94>)
 8001110:	f002 fd96 	bl	8003c40 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800111a:	f000 fbf7 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001a4 	.word	0x200001a4
 800112c:	40000800 	.word	0x40000800

08001130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001168:	f002 fdda 	bl	8003d20 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 fbcb 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200003e4 	.word	0x200003e4
 8001180:	40013800 	.word	0x40013800

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <MX_GPIO_Init+0xb4>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <MX_GPIO_Init+0xb4>)
 800119e:	f043 0320 	orr.w	r3, r3, #32
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <MX_GPIO_Init+0xb4>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_GPIO_Init+0xb4>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <MX_GPIO_Init+0xb4>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_GPIO_Init+0xb4>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_GPIO_Init+0xb4>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <MX_GPIO_Init+0xb4>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_GPIO_Init+0xb4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298N_IN4_Pin|L298N_IN3_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2130      	movs	r1, #48	; 0x30
 80011e4:	4815      	ldr	r0, [pc, #84]	; (800123c <MX_GPIO_Init+0xb8>)
 80011e6:	f001 fca1 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_A4_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_A4_BUTTON_Pin;
 80011ea:	2310      	movs	r3, #16
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_A4_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011fe:	f001 fb11 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : L298N_IN4_Pin L298N_IN3_Pin */
  GPIO_InitStruct.Pin = L298N_IN4_Pin|L298N_IN3_Pin;
 8001202:	2330      	movs	r3, #48	; 0x30
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_GPIO_Init+0xb8>)
 800121a:	f001 fb03 	bl	8002824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	200a      	movs	r0, #10
 8001224:	f001 fa51 	bl	80026ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001228:	200a      	movs	r0, #10
 800122a:	f001 fa6a 	bl	8002702 <HAL_NVIC_EnableIRQ>

}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40010c00 	.word	0x40010c00
 8001240:	10110000 	.word	0x10110000
 8001244:	40010800 	.word	0x40010800

08001248 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1); // ADC Başlat
 8001250:	4838      	ldr	r0, [pc, #224]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001252:	f000 fe39 	bl	8001ec8 <HAL_ADC_Start>
	while (!HAL_ADC_GetState(&hadc1)); // ADC okuyana kadar bekle
 8001256:	bf00      	nop
 8001258:	4836      	ldr	r0, [pc, #216]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800125a:	f001 f8bd 	bl	80023d8 <HAL_ADC_GetState>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x10>
	ADC_Analog =  HAL_ADC_GetValue(&hadc1) ; // ADC değeri al
 8001264:	4833      	ldr	r0, [pc, #204]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001266:	f000 fedd 	bl	8002024 <HAL_ADC_GetValue>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001270:	801a      	strh	r2, [r3, #0]

	if (Ornek_Tamam == 0)
 8001272:	4b32      	ldr	r3, [pc, #200]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		REX[Ornek_Sayisi++] = ADC_Analog;
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800127c:	8819      	ldrh	r1, [r3, #0]
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	b2d0      	uxtb	r0, r2
 8001286:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001288:	7010      	strb	r0, [r2, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800128e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (Ornek_Sayisi == N)
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b40      	cmp	r3, #64	; 0x40
 8001298:	d105      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			Ornek_Tamam = 1;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
			Ornek_Sayisi = 0;
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (Ornek_Tamam==1)
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d136      	bne.n	800131c <HAL_TIM_PeriodElapsedCallback+0xd4>
	{
		FFT_Analiz();
 80012ae:	f000 f853 	bl	8001358 <FFT_Analiz>

		for (int i = 0; i <= N; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e02b      	b.n	8001310 <HAL_TIM_PeriodElapsedCallback+0xc8>
		{
		  // kompleks sayı büyüklük hesapla = sqrt(reel^2+imajiner^2)
			BANT[i] = sqrt(REX[i]*REX[i] + IMX[i]*IMX[i]);
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	4920      	ldr	r1, [pc, #128]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012c8:	fb02 f203 	mul.w	r2, r2, r3
 80012cc:	491e      	ldr	r1, [pc, #120]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d4:	481c      	ldr	r0, [pc, #112]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f942 	bl	800056c <__aeabi_i2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f004 fbd0 	bl	8005a94 <sqrt>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc50 	bl	8000ba0 <__aeabi_d2iz>
 8001300:	4602      	mov	r2, r0
 8001302:	4912      	ldr	r1, [pc, #72]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i <= N; i++)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b40      	cmp	r3, #64	; 0x40
 8001314:	ddd0      	ble.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0x70>
		}

		Ornek_Tamam = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	}

	UART_Data_Yolla();
 800131c:	f000 fa08 	bl	8001730 <UART_Data_Yolla>

	//Timer temizle
	__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC4);
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f06f 0210 	mvn.w	r2, #16
 8001328:	611a      	str	r2, [r3, #16]
	//while(HAL_UART_GetState(&huart1)!=HAL_UART_STATE_READY);
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200003b4 	.word	0x200003b4
 8001338:	20000094 	.word	0x20000094
 800133c:	20000097 	.word	0x20000097
 8001340:	20000096 	.word	0x20000096
 8001344:	200002b4 	.word	0x200002b4
 8001348:	200000a4 	.word	0x200000a4
 800134c:	2000042c 	.word	0x2000042c
 8001350:	200001a4 	.word	0x200001a4
 8001354:	00000000 	.word	0x00000000

08001358 <FFT_Analiz>:

void FFT_Analiz()
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b08f      	sub	sp, #60	; 0x3c
 800135c:	af00      	add	r7, sp, #0
	double PI= 3.141;
 800135e:	a378      	add	r3, pc, #480	; (adr r3, 8001540 <FFT_Analiz+0x1e8>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t NM1 = N - 1;
 8001368:	233f      	movs	r3, #63	; 0x3f
 800136a:	77fb      	strb	r3, [r7, #31]
	uint8_t ND2 = N / 2;
 800136c:	2320      	movs	r3, #32
 800136e:	77bb      	strb	r3, [r7, #30]
	uint8_t M = log10(N)/log10(2);
 8001370:	2306      	movs	r3, #6
 8001372:	777b      	strb	r3, [r7, #29]
	uint8_t j = ND2;
 8001374:	7fbb      	ldrb	r3, [r7, #30]
 8001376:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t i, k, l;
	uint8_t LE, LE2,JM1, IP;
	float UR, UI, SR, SI,TR,TI;

	//imajiner kismi 0 yap
	for (i = 0; i <= NM1; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001380:	e00a      	b.n	8001398 <FFT_Analiz+0x40>
	{
		IMX[i] = 0;
 8001382:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001386:	4a70      	ldr	r2, [pc, #448]	; (8001548 <FFT_Analiz+0x1f0>)
 8001388:	2100      	movs	r1, #0
 800138a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i <= NM1; i++)
 800138e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001392:	3301      	adds	r3, #1
 8001394:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001398:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d9ef      	bls.n	8001382 <FFT_Analiz+0x2a>
	}

	// Bit reversal sorting
	for (i = 1; i <= N-2; i++)
 80013a2:	2301      	movs	r3, #1
 80013a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80013a8:	e064      	b.n	8001474 <FFT_Analiz+0x11c>
	{
		if (i >= j) goto a;
 80013aa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80013ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d23a      	bcs.n	800142c <FFT_Analiz+0xd4>
		TR = REX[j];
 80013b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013ba:	4a64      	ldr	r2, [pc, #400]	; (800154c <FFT_Analiz+0x1f4>)
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd3f 	bl	8000e44 <__aeabi_i2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	60bb      	str	r3, [r7, #8]
		TI = IMX[j];
 80013ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013ce:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <FFT_Analiz+0x1f0>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd35 	bl	8000e44 <__aeabi_i2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	603b      	str	r3, [r7, #0]
		REX[j] = REX[i];
 80013de:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80013e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013e6:	4959      	ldr	r1, [pc, #356]	; (800154c <FFT_Analiz+0x1f4>)
 80013e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013ec:	4957      	ldr	r1, [pc, #348]	; (800154c <FFT_Analiz+0x1f4>)
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		IMX[j] = IMX[i];
 80013f2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80013f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013fa:	4953      	ldr	r1, [pc, #332]	; (8001548 <FFT_Analiz+0x1f0>)
 80013fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001400:	4951      	ldr	r1, [pc, #324]	; (8001548 <FFT_Analiz+0x1f0>)
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		REX[i] = TR;
 8001406:	f897 4036 	ldrb.w	r4, [r7, #54]	; 0x36
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7ff fd6e 	bl	8000eec <__aeabi_f2iz>
 8001410:	4603      	mov	r3, r0
 8001412:	4a4e      	ldr	r2, [pc, #312]	; (800154c <FFT_Analiz+0x1f4>)
 8001414:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		IMX[i] = TI;
 8001418:	f897 4036 	ldrb.w	r4, [r7, #54]	; 0x36
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7ff fd65 	bl	8000eec <__aeabi_f2iz>
 8001422:	4603      	mov	r3, r0
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <FFT_Analiz+0x1f0>)
 8001426:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800142a:	e000      	b.n	800142e <FFT_Analiz+0xd6>
		if (i >= j) goto a;
 800142c:	bf00      	nop
		a:
		k = ND2;
 800142e:	7fbb      	ldrb	r3, [r7, #30]
 8001430:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		b:
		if (k > j) goto c;
 8001434:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800143c:	429a      	cmp	r2, r3
 800143e:	d80c      	bhi.n	800145a <FFT_Analiz+0x102>
		j -= k;
 8001440:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001444:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		k /= 2;
 800144e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		goto b;
 8001458:	e7ec      	b.n	8001434 <FFT_Analiz+0xdc>
		if (k > j) goto c;
 800145a:	bf00      	nop
		c:
		j += k;
 800145c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001460:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001464:	4413      	add	r3, r2
 8001466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (i = 1; i <= N-2; i++)
 800146a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800146e:	3301      	adds	r3, #1
 8001470:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001474:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001478:	2b3e      	cmp	r3, #62	; 0x3e
 800147a:	d996      	bls.n	80013aa <FFT_Analiz+0x52>
	}

	//Loop for Log2N stages
	for (l = 1; l <= M; l++)
 800147c:	2301      	movs	r3, #1
 800147e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001482:	e146      	b.n	8001712 <FFT_Analiz+0x3ba>
	{
		LE = pow(2, l);
 8001484:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f85f 	bl	800054c <__aeabi_ui2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	f04f 0000 	mov.w	r0, #0
 8001496:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800149a:	f004 fa4f 	bl	800593c <pow>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fba3 	bl	8000bf0 <__aeabi_d2uiz>
 80014aa:	4603      	mov	r3, r0
 80014ac:	773b      	strb	r3, [r7, #28]
		LE2 = LE / 2;
 80014ae:	7f3b      	ldrb	r3, [r7, #28]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	76fb      	strb	r3, [r7, #27]
		UR = 1;
 80014b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
		UI = 0;
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
		//Calculate sine & cosine values
		SR = cos(PI/LE2);
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f852 	bl	800056c <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014d0:	f7ff f9e0 	bl	8000894 <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f004 f9a6 	bl	800582c <cos>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fba2 	bl	8000c30 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	617b      	str	r3, [r7, #20]
		SI = -sin(PI/LE2);
 80014f0:	7efb      	ldrb	r3, [r7, #27]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f83a 	bl	800056c <__aeabi_i2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001500:	f7ff f9c8 	bl	8000894 <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f004 f9d0 	bl	80058b0 <sin>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb8a 	bl	8000c30 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001522:	613b      	str	r3, [r7, #16]
		//Loop for Leach sub-DFT
		for (j = 1; j <= LE2; j++)
 8001524:	2301      	movs	r3, #1
 8001526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800152a:	e0e7      	b.n	80016fc <FFT_Analiz+0x3a4>
		{
			JM1 = j - 1;
 800152c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001530:	3b01      	subs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
			//Loop for each Butterfly
			for (i = JM1; i <= NM1; i += LE)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800153a:	e0b0      	b.n	800169e <FFT_Analiz+0x346>
 800153c:	f3af 8000 	nop.w
 8001540:	9ba5e354 	.word	0x9ba5e354
 8001544:	400920c4 	.word	0x400920c4
 8001548:	200000a4 	.word	0x200000a4
 800154c:	200002b4 	.word	0x200002b4
			{
				IP = i + LE2;
 8001550:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001554:	7efb      	ldrb	r3, [r7, #27]
 8001556:	4413      	add	r3, r2
 8001558:	71fb      	strb	r3, [r7, #7]
				TR = REX[IP]*UR - IMX[IP]*UI;
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4a72      	ldr	r2, [pc, #456]	; (8001728 <FFT_Analiz+0x3d0>)
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fc6e 	bl	8000e44 <__aeabi_i2f>
 8001568:	4603      	mov	r3, r0
 800156a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fdf7 	bl	8000160 <__aeabi_fmul>
 8001572:	4603      	mov	r3, r0
 8001574:	461c      	mov	r4, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a6c      	ldr	r2, [pc, #432]	; (800172c <FFT_Analiz+0x3d4>)
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc60 	bl	8000e44 <__aeabi_i2f>
 8001584:	4603      	mov	r3, r0
 8001586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fde9 	bl	8000160 <__aeabi_fmul>
 800158e:	4603      	mov	r3, r0
 8001590:	4619      	mov	r1, r3
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff fba0 	bl	8000cd8 <__aeabi_fsub>
 8001598:	4603      	mov	r3, r0
 800159a:	60bb      	str	r3, [r7, #8]
				TI = REX[IP]*UI + IMX[IP]*UR;
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4a62      	ldr	r2, [pc, #392]	; (8001728 <FFT_Analiz+0x3d0>)
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fc4d 	bl	8000e44 <__aeabi_i2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fdd6 	bl	8000160 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461c      	mov	r4, r3
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a5c      	ldr	r2, [pc, #368]	; (800172c <FFT_Analiz+0x3d4>)
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc3f 	bl	8000e44 <__aeabi_i2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe fdc8 	bl	8000160 <__aeabi_fmul>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4619      	mov	r1, r3
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff fb81 	bl	8000cdc <__addsf3>
 80015da:	4603      	mov	r3, r0
 80015dc:	603b      	str	r3, [r7, #0]
				REX[IP] = REX[i] - TR;
 80015de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80015e2:	4a51      	ldr	r2, [pc, #324]	; (8001728 <FFT_Analiz+0x3d0>)
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc2b 	bl	8000e44 <__aeabi_i2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fb70 	bl	8000cd8 <__aeabi_fsub>
 80015f8:	4603      	mov	r3, r0
 80015fa:	79fc      	ldrb	r4, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc75 	bl	8000eec <__aeabi_f2iz>
 8001602:	4603      	mov	r3, r0
 8001604:	4a48      	ldr	r2, [pc, #288]	; (8001728 <FFT_Analiz+0x3d0>)
 8001606:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				IMX[IP] = IMX[i] - TI;
 800160a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800160e:	4a47      	ldr	r2, [pc, #284]	; (800172c <FFT_Analiz+0x3d4>)
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc15 	bl	8000e44 <__aeabi_i2f>
 800161a:	4603      	mov	r3, r0
 800161c:	6839      	ldr	r1, [r7, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb5a 	bl	8000cd8 <__aeabi_fsub>
 8001624:	4603      	mov	r3, r0
 8001626:	79fc      	ldrb	r4, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc5f 	bl	8000eec <__aeabi_f2iz>
 800162e:	4603      	mov	r3, r0
 8001630:	4a3e      	ldr	r2, [pc, #248]	; (800172c <FFT_Analiz+0x3d4>)
 8001632:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				REX[i] = REX[i] + TR;
 8001636:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800163a:	4a3b      	ldr	r2, [pc, #236]	; (8001728 <FFT_Analiz+0x3d0>)
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fbff 	bl	8000e44 <__aeabi_i2f>
 8001646:	4603      	mov	r3, r0
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fb46 	bl	8000cdc <__addsf3>
 8001650:	4603      	mov	r3, r0
 8001652:	f897 4036 	ldrb.w	r4, [r7, #54]	; 0x36
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fc48 	bl	8000eec <__aeabi_f2iz>
 800165c:	4603      	mov	r3, r0
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <FFT_Analiz+0x3d0>)
 8001660:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				IMX[i] = IMX[i] + TI;
 8001664:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001668:	4a30      	ldr	r2, [pc, #192]	; (800172c <FFT_Analiz+0x3d4>)
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fbe8 	bl	8000e44 <__aeabi_i2f>
 8001674:	4603      	mov	r3, r0
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb2f 	bl	8000cdc <__addsf3>
 800167e:	4603      	mov	r3, r0
 8001680:	f897 4036 	ldrb.w	r4, [r7, #54]	; 0x36
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fc31 	bl	8000eec <__aeabi_f2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <FFT_Analiz+0x3d4>)
 800168e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for (i = JM1; i <= NM1; i += LE)
 8001692:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001696:	7f3b      	ldrb	r3, [r7, #28]
 8001698:	4413      	add	r3, r2
 800169a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800169e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f67f af53 	bls.w	8001550 <FFT_Analiz+0x1f8>
			}
			TR = UR;
 80016aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ac:	60bb      	str	r3, [r7, #8]
			UR = TR*SR - UI*SI;
 80016ae:	6979      	ldr	r1, [r7, #20]
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f7fe fd55 	bl	8000160 <__aeabi_fmul>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461c      	mov	r4, r3
 80016ba:	6939      	ldr	r1, [r7, #16]
 80016bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016be:	f7fe fd4f 	bl	8000160 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff fb06 	bl	8000cd8 <__aeabi_fsub>
 80016cc:	4603      	mov	r3, r0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
			UI = TR*SI + UI*SR;
 80016d0:	6939      	ldr	r1, [r7, #16]
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f7fe fd44 	bl	8000160 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	461c      	mov	r4, r3
 80016dc:	6979      	ldr	r1, [r7, #20]
 80016de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016e0:	f7fe fd3e 	bl	8000160 <__aeabi_fmul>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff faf7 	bl	8000cdc <__addsf3>
 80016ee:	4603      	mov	r3, r0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (j = 1; j <= LE2; j++)
 80016f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016f6:	3301      	adds	r3, #1
 80016f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001700:	7efb      	ldrb	r3, [r7, #27]
 8001702:	429a      	cmp	r2, r3
 8001704:	f67f af12 	bls.w	800152c <FFT_Analiz+0x1d4>
	for (l = 1; l <= M; l++)
 8001708:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800170c:	3301      	adds	r3, #1
 800170e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001712:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001716:	7f7b      	ldrb	r3, [r7, #29]
 8001718:	429a      	cmp	r2, r3
 800171a:	f67f aeb3 	bls.w	8001484 <FFT_Analiz+0x12c>
		}
	}
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	373c      	adds	r7, #60	; 0x3c
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	200002b4 	.word	0x200002b4
 800172c:	200000a4 	.word	0x200000a4

08001730 <UART_Data_Yolla>:

void UART_Data_Yolla()
{
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b0bb      	sub	sp, #236	; 0xec
 8001734:	af20      	add	r7, sp, #128	; 0x80
	while(HAL_UART_GetState(&huart1)==HAL_UART_STATE_READY)
 8001736:	e0a8      	b.n	800188a <UART_Data_Yolla+0x15a>
	{
	  sprintf(Bant_Deger,"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,"
 8001738:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <UART_Data_Yolla+0x174>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	667b      	str	r3, [r7, #100]	; 0x64
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	6639      	str	r1, [r7, #96]	; 0x60
 8001744:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001746:	68d8      	ldr	r0, [r3, #12]
 8001748:	65f8      	str	r0, [r7, #92]	; 0x5c
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <UART_Data_Yolla+0x174>)
 800174c:	691c      	ldr	r4, [r3, #16]
 800174e:	65bc      	str	r4, [r7, #88]	; 0x58
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001752:	695d      	ldr	r5, [r3, #20]
 8001754:	657d      	str	r5, [r7, #84]	; 0x54
 8001756:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001758:	699e      	ldr	r6, [r3, #24]
 800175a:	653e      	str	r6, [r7, #80]	; 0x50
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <UART_Data_Yolla+0x174>)
 800175e:	69da      	ldr	r2, [r3, #28]
 8001760:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001762:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001764:	6a19      	ldr	r1, [r3, #32]
 8001766:	64b9      	str	r1, [r7, #72]	; 0x48
 8001768:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <UART_Data_Yolla+0x174>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	647b      	str	r3, [r7, #68]	; 0x44
 800176e:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001770:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001772:	6438      	str	r0, [r7, #64]	; 0x40
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001776:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001778:	63fc      	str	r4, [r7, #60]	; 0x3c
 800177a:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <UART_Data_Yolla+0x174>)
 800177c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800177e:	63bd      	str	r5, [r7, #56]	; 0x38
 8001780:	4b48      	ldr	r3, [pc, #288]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001782:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8001784:	637e      	str	r6, [r7, #52]	; 0x34
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800178a:	633a      	str	r2, [r7, #48]	; 0x30
 800178c:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <UART_Data_Yolla+0x174>)
 800178e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001790:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <UART_Data_Yolla+0x174>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <UART_Data_Yolla+0x174>)
 800179a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800179c:	6278      	str	r0, [r7, #36]	; 0x24
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017a0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80017a2:	623c      	str	r4, [r7, #32]
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017a6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80017a8:	61fd      	str	r5, [r7, #28]
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017ac:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80017ae:	61be      	str	r6, [r7, #24]
 80017b0:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017b4:	617a      	str	r2, [r7, #20]
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017b8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80017ba:	6139      	str	r1, [r7, #16]
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017c4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80017c6:	60b8      	str	r0, [r7, #8]
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017ca:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80017cc:	607c      	str	r4, [r7, #4]
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017d0:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80017d2:	603d      	str	r5, [r7, #0]
 80017d4:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017d6:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017da:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017de:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017e2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017e6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <UART_Data_Yolla+0x174>)
 80017ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <UART_Data_Yolla+0x178>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	931e      	str	r3, [sp, #120]	; 0x78
 80017f4:	921d      	str	r2, [sp, #116]	; 0x74
 80017f6:	911c      	str	r1, [sp, #112]	; 0x70
 80017f8:	901b      	str	r0, [sp, #108]	; 0x6c
 80017fa:	941a      	str	r4, [sp, #104]	; 0x68
 80017fc:	9519      	str	r5, [sp, #100]	; 0x64
 80017fe:	9618      	str	r6, [sp, #96]	; 0x60
 8001800:	683d      	ldr	r5, [r7, #0]
 8001802:	9517      	str	r5, [sp, #92]	; 0x5c
 8001804:	687c      	ldr	r4, [r7, #4]
 8001806:	9416      	str	r4, [sp, #88]	; 0x58
 8001808:	68b8      	ldr	r0, [r7, #8]
 800180a:	9015      	str	r0, [sp, #84]	; 0x54
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	9314      	str	r3, [sp, #80]	; 0x50
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	9113      	str	r1, [sp, #76]	; 0x4c
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	9212      	str	r2, [sp, #72]	; 0x48
 8001818:	69be      	ldr	r6, [r7, #24]
 800181a:	9611      	str	r6, [sp, #68]	; 0x44
 800181c:	69fd      	ldr	r5, [r7, #28]
 800181e:	9510      	str	r5, [sp, #64]	; 0x40
 8001820:	6a3c      	ldr	r4, [r7, #32]
 8001822:	940f      	str	r4, [sp, #60]	; 0x3c
 8001824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001826:	900e      	str	r0, [sp, #56]	; 0x38
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	930d      	str	r3, [sp, #52]	; 0x34
 800182c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800182e:	910c      	str	r1, [sp, #48]	; 0x30
 8001830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001832:	920b      	str	r2, [sp, #44]	; 0x2c
 8001834:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8001836:	960a      	str	r6, [sp, #40]	; 0x28
 8001838:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800183a:	9509      	str	r5, [sp, #36]	; 0x24
 800183c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800183e:	9408      	str	r4, [sp, #32]
 8001840:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001842:	9007      	str	r0, [sp, #28]
 8001844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001846:	9306      	str	r3, [sp, #24]
 8001848:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800184a:	9105      	str	r1, [sp, #20]
 800184c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800184e:	9204      	str	r2, [sp, #16]
 8001850:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8001852:	9603      	str	r6, [sp, #12]
 8001854:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8001856:	9502      	str	r5, [sp, #8]
 8001858:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800185a:	9401      	str	r4, [sp, #4]
 800185c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800185e:	9000      	str	r0, [sp, #0]
 8001860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001862:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001864:	4911      	ldr	r1, [pc, #68]	; (80018ac <UART_Data_Yolla+0x17c>)
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <UART_Data_Yolla+0x180>)
 8001868:	f002 fee4 	bl	8004634 <siprintf>
			  BANT[1],BANT[2],BANT[3],BANT[4],BANT[5],BANT[6],BANT[7],BANT[8],BANT[9],
			  BANT[10],BANT[11],BANT[12],BANT[13],BANT[14],BANT[15],BANT[16],BANT[17],
			  BANT[18],BANT[19],BANT[20],BANT[21],BANT[22],BANT[23],BANT[24],BANT[25],
			  BANT[26],BANT[27],BANT[28],BANT[29],BANT[30],BANT[31],BANT[32],
			  ADC_Analog);
	  if(HAL_UART_Transmit_IT(&huart1,(uint8_t *)Bant_Deger,strlen(Bant_Deger))!=HAL_OK)
 800186c:	4810      	ldr	r0, [pc, #64]	; (80018b0 <UART_Data_Yolla+0x180>)
 800186e:	f7fe fc6f 	bl	8000150 <strlen>
 8001872:	4603      	mov	r3, r0
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	490d      	ldr	r1, [pc, #52]	; (80018b0 <UART_Data_Yolla+0x180>)
 800187a:	480e      	ldr	r0, [pc, #56]	; (80018b4 <UART_Data_Yolla+0x184>)
 800187c:	f002 fb3c 	bl	8003ef8 <HAL_UART_Transmit_IT>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <UART_Data_Yolla+0x15a>
		  {
			  Error_Handler();
 8001886:	f000 f841 	bl	800190c <Error_Handler>
	while(HAL_UART_GetState(&huart1)==HAL_UART_STATE_READY)
 800188a:	480a      	ldr	r0, [pc, #40]	; (80018b4 <UART_Data_Yolla+0x184>)
 800188c:	f002 fc93 	bl	80041b6 <HAL_UART_GetState>
 8001890:	4603      	mov	r3, r0
 8001892:	2b20      	cmp	r3, #32
 8001894:	f43f af50 	beq.w	8001738 <UART_Data_Yolla+0x8>
		  }
	  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	376c      	adds	r7, #108	; 0x6c
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000042c 	.word	0x2000042c
 80018a8:	20000094 	.word	0x20000094
 80018ac:	08007730 	.word	0x08007730
 80018b0:	200001ec 	.word	0x200001ec
 80018b4:	200003e4 	.word	0x200003e4

080018b8 <HAL_GPIO_EXTI_Callback>:



 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]

		while((HAL_UART_GetState(&huart1)==HAL_UART_STATE_READY));
 80018c2:	bf00      	nop
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x40>)
 80018c6:	f002 fc76 	bl	80041b6 <HAL_UART_GetState>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d0f9      	beq.n	80018c4 <HAL_GPIO_EXTI_Callback+0xc>
		HAL_UART_Receive(&huart1,(uint8_t *)rxBuffer,8,100);
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	2208      	movs	r2, #8
 80018d4:	4909      	ldr	r1, [pc, #36]	; (80018fc <HAL_GPIO_EXTI_Callback+0x44>)
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x40>)
 80018d8:	f002 fa6f 	bl	8003dba <HAL_UART_Receive>

		sscanf(rxBuffer, "%d", &prescaler);
 80018dc:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_GPIO_EXTI_Callback+0x48>)
 80018de:	4909      	ldr	r1, [pc, #36]	; (8001904 <HAL_GPIO_EXTI_Callback+0x4c>)
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <HAL_GPIO_EXTI_Callback+0x44>)
 80018e2:	f002 fec7 	bl	8004674 <siscanf>

		__HAL_TIM_SET_PRESCALER(&htim4, prescaler);
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_GPIO_EXTI_Callback+0x48>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_GPIO_EXTI_Callback+0x50>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
		//memset(rxBuffer, '\0' , sizeof rxBuffer);
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200003e4 	.word	0x200003e4
 80018fc:	20000424 	.word	0x20000424
 8001900:	20000090 	.word	0x20000090
 8001904:	08007794 	.word	0x08007794
 8001908:	200001a4 	.word	0x200001a4

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	e7fe      	b.n	8001914 <Error_Handler+0x8>
	...

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_MspInit+0x5c>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <HAL_MspInit+0x5c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6193      	str	r3, [r2, #24]
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_MspInit+0x5c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_MspInit+0x5c>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HAL_MspInit+0x5c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_MspInit+0x5c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_MspInit+0x60>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_MspInit+0x60>)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000

0800197c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_ADC_MspInit+0x7c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d129      	bne.n	80019f0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_ADC_MspInit+0x80>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_ADC_MspInit+0x80>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_ADC_MspInit+0x80>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_ADC_MspInit+0x80>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a10      	ldr	r2, [pc, #64]	; (80019fc <HAL_ADC_MspInit+0x80>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_ADC_MspInit+0x80>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d0:	2303      	movs	r3, #3
 80019d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_ADC_MspInit+0x84>)
 80019dc:	f000 ff22 	bl	8002824 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2012      	movs	r0, #18
 80019e6:	f000 fe70 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019ea:	2012      	movs	r0, #18
 80019ec:	f000 fe89 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40012400 	.word	0x40012400
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800

08001a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_TIM_Base_MspInit+0x44>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d113      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_TIM_Base_MspInit+0x48>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_TIM_Base_MspInit+0x48>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_TIM_Base_MspInit+0x48>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	201e      	movs	r0, #30
 8001a34:	f000 fe49 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a38:	201e      	movs	r0, #30
 8001a3a:	f000 fe62 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d139      	bne.n	8001ae4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480f      	ldr	r0, [pc, #60]	; (8001af4 <HAL_UART_MspInit+0xa4>)
 8001ab6:	f000 feb5 	bl	8002824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <HAL_UART_MspInit+0xa4>)
 8001ad0:	f000 fea8 	bl	8002824 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2025      	movs	r0, #37	; 0x25
 8001ada:	f000 fdf6 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ade:	2025      	movs	r0, #37	; 0x25
 8001ae0:	f000 fe0f 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010800 	.word	0x40010800

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <NMI_Handler+0x4>

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 f8cf 	bl	8001ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b4a:	2010      	movs	r0, #16
 8001b4c:	f001 f806 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <ADC1_2_IRQHandler+0x10>)
 8001b5a:	f000 fa6f 	bl	800203c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200003b4 	.word	0x200003b4

08001b68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM4_IRQHandler+0x10>)
 8001b6e:	f001 fd7f 	bl	8003670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200001a4 	.word	0x200001a4

08001b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART1_IRQHandler+0x10>)
 8001b82:	f002 f9fd 	bl	8003f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200003e4 	.word	0x200003e4

08001b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <_sbrk+0x5c>)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <_sbrk+0x60>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <_sbrk+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d207      	bcs.n	8001bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc0:	f002 fd06 	bl	80045d0 <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	e009      	b.n	8001be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <_sbrk+0x64>)
 8001be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20005000 	.word	0x20005000
 8001bf0:	00000400 	.word	0x00000400
 8001bf4:	20000098 	.word	0x20000098
 8001bf8:	20000540 	.word	0x20000540

08001bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c0a:	e003      	b.n	8001c14 <LoopCopyDataInit>

08001c0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c12:	3104      	adds	r1, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c1c:	d3f6      	bcc.n	8001c0c <CopyDataInit>
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c20:	e002      	b.n	8001c28 <LoopFillZerobss>

08001c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c24:	f842 3b04 	str.w	r3, [r2], #4

08001c28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c2c:	d3f9      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c2e:	f7ff ffe5 	bl	8001bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c32:	f002 fcd3 	bl	80045dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c36:	f7ff f97f 	bl	8000f38 <main>
  bx lr
 8001c3a:	4770      	bx	lr
  ldr r3, =_sidata
 8001c3c:	08007ba0 	.word	0x08007ba0
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c44:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001c48:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001c4c:	20000540 	.word	0x20000540

08001c50 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <CAN1_RX1_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_Init+0x28>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_Init+0x28>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 fd25 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f808 	bl	8001c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f7ff fe52 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000

08001c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x54>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_InitTick+0x58>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fd3d 	bl	800271e <HAL_SYSTICK_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00e      	b.n	8001ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d80a      	bhi.n	8001cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f000 fd05 	bl	80026ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <HAL_InitTick+0x5c>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_IncTick+0x1c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_IncTick+0x20>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <HAL_IncTick+0x20>)
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	2000052c 	.word	0x2000052c

08001d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <HAL_GetTick+0x10>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	2000052c 	.word	0x2000052c

08001d18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0be      	b.n	8001eb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fe10 	bl	800197c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fb99 	bl	8002494 <ADC_ConversionStop_Disable>
 8001d62:	4603      	mov	r3, r0
 8001d64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 8099 	bne.w	8001ea6 <HAL_ADC_Init+0x18e>
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8095 	bne.w	8001ea6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d84:	f023 0302 	bic.w	r3, r3, #2
 8001d88:	f043 0202 	orr.w	r2, r3, #2
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7b1b      	ldrb	r3, [r3, #12]
 8001d9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001da0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db0:	d003      	beq.n	8001dba <HAL_ADC_Init+0xa2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_ADC_Init+0xa8>
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	e000      	b.n	8001dc2 <HAL_ADC_Init+0xaa>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7d1b      	ldrb	r3, [r3, #20]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d119      	bne.n	8001e04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	035a      	lsls	r2, r3, #13
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e00b      	b.n	8001e04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_ADC_Init+0x1a8>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e34:	d003      	beq.n	8001e3e <HAL_ADC_Init+0x126>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d104      	bne.n	8001e48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	051b      	lsls	r3, r3, #20
 8001e46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_ADC_Init+0x1ac>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10b      	bne.n	8001e84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e82:	e018      	b.n	8001eb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f023 0312 	bic.w	r3, r3, #18
 8001e8c:	f043 0210 	orr.w	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ea4:	e007      	b.n	8001eb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	f043 0210 	orr.w	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ec4:	ff1f0efe 	.word	0xff1f0efe

08001ec8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_Start+0x1a>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e098      	b.n	8002014 <HAL_ADC_Start+0x14c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fa80 	bl	80023f0 <ADC_Enable>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 8087 	bne.w	800200a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a41      	ldr	r2, [pc, #260]	; (800201c <HAL_ADC_Start+0x154>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d105      	bne.n	8001f26 <HAL_ADC_Start+0x5e>
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_ADC_Start+0x158>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d026      	beq.n	8001f8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f50:	e01d      	b.n	8001f8e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <HAL_ADC_Start+0x158>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Start+0xaa>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	; (800201c <HAL_ADC_Start+0x154>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10d      	bne.n	8001f8e <HAL_ADC_Start+0xc6>
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_ADC_Start+0x158>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f023 0206 	bic.w	r2, r3, #6
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa6:	e002      	b.n	8001fae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f06f 0202 	mvn.w	r2, #2
 8001fbe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fce:	d113      	bne.n	8001ff8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_ADC_Start+0x154>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_ADC_Start+0x158>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	e00c      	b.n	8002012 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e003      	b.n	8002012 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40012800 	.word	0x40012800
 8002020:	40012400 	.word	0x40012400

08002024 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d140      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d139      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002082:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002086:	d11d      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208c:	2b00      	cmp	r3, #0
 800208e:	d119      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0220 	bic.w	r2, r2, #32
 800209e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f87c 	bl	80021c2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0212 	mvn.w	r2, #18
 80020d2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d14f      	bne.n	8002182 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d148      	bne.n	8002182 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002112:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002116:	d012      	beq.n	800213e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002122:	2b00      	cmp	r3, #0
 8002124:	d125      	bne.n	8002172 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002130:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002134:	d11d      	bne.n	8002172 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d119      	bne.n	8002172 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800214c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d105      	bne.n	8002172 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f9c8 	bl	8002508 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 020c 	mvn.w	r2, #12
 8002180:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d114      	bne.n	80021ba <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10d      	bne.n	80021ba <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f812 	bl	80021d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0201 	mvn.w	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x20>
 8002204:	2302      	movs	r3, #2
 8002206:	e0dc      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1da>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d81c      	bhi.n	8002252 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b05      	subs	r3, #5
 800222a:	221f      	movs	r2, #31
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b05      	subs	r3, #5
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	635a      	str	r2, [r3, #52]	; 0x34
 8002250:	e03c      	b.n	80022cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d81c      	bhi.n	8002294 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b23      	subs	r3, #35	; 0x23
 800226c:	221f      	movs	r2, #31
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	4019      	ands	r1, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	3b23      	subs	r3, #35	; 0x23
 8002286:	fa00 f203 	lsl.w	r2, r0, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
 8002292:	e01b      	b.n	80022cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b41      	subs	r3, #65	; 0x41
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4019      	ands	r1, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b41      	subs	r3, #65	; 0x41
 80022c0:	fa00 f203 	lsl.w	r2, r0, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	d91c      	bls.n	800230e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	4019      	ands	r1, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6898      	ldr	r0, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	3b1e      	subs	r3, #30
 8002300:	fa00 f203 	lsl.w	r2, r0, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	e019      	b.n	8002342 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	4019      	ands	r1, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6898      	ldr	r0, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	fa00 f203 	lsl.w	r2, r0, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d003      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800234e:	2b11      	cmp	r3, #17
 8002350:	d132      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d125      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d126      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002378:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d11a      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9a      	lsrs	r2, r3, #18
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002398:	e002      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3b01      	subs	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <HAL_ADC_ConfigChannel+0x1b2>
 80023a6:	e007      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40012400 	.word	0x40012400
 80023d0:	20000000 	.word	0x20000000
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
	...

080023f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d039      	beq.n	8002482 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <ADC_Enable+0x9c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <ADC_Enable+0xa0>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800242c:	e002      	b.n	8002434 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800243a:	f7ff fc63 	bl	8001d04 <HAL_GetTick>
 800243e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002440:	e018      	b.n	8002474 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002442:	f7ff fc5f 	bl	8001d04 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d911      	bls.n	8002474 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	f043 0210 	orr.w	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e007      	b.n	8002484 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d1df      	bne.n	8002442 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83

08002494 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d127      	bne.n	80024fe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024be:	f7ff fc21 	bl	8001d04 <HAL_GetTick>
 80024c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024c4:	e014      	b.n	80024f0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024c6:	f7ff fc1d 	bl	8001d04 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d90d      	bls.n	80024f0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f043 0210 	orr.w	r2, r3, #16
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e007      	b.n	8002500 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d0e3      	beq.n	80024c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <__NVIC_GetPriorityGrouping+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0307 	and.w	r3, r3, #7
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0b      	blt.n	80025aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4906      	ldr	r1, [pc, #24]	; (80025b4 <__NVIC_EnableIRQ+0x34>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2001      	movs	r0, #1
 80025a2:	fa00 f202 	lsl.w	r2, r0, r2
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff90 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff2d 	bl	800251c <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff42 	bl	8002564 <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff90 	bl	800260c <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5f 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff35 	bl	8002580 <__NVIC_EnableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffa2 	bl	8002670 <SysTick_Config>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274a:	2b02      	cmp	r3, #2
 800274c:	d005      	beq.n	800275a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2204      	movs	r2, #4
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e051      	b.n	80027fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 020e 	bic.w	r2, r2, #14
 8002768:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_DMA_Abort_IT+0xd0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d029      	beq.n	80027d8 <HAL_DMA_Abort_IT+0xa0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <HAL_DMA_Abort_IT+0xd4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d022      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x9c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_DMA_Abort_IT+0xd8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d01a      	beq.n	80027ce <HAL_DMA_Abort_IT+0x96>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <HAL_DMA_Abort_IT+0xdc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d012      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x90>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <HAL_DMA_Abort_IT+0xe0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00a      	beq.n	80027c2 <HAL_DMA_Abort_IT+0x8a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_DMA_Abort_IT+0xe4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d102      	bne.n	80027bc <HAL_DMA_Abort_IT+0x84>
 80027b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027ba:	e00e      	b.n	80027da <HAL_DMA_Abort_IT+0xa2>
 80027bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c0:	e00b      	b.n	80027da <HAL_DMA_Abort_IT+0xa2>
 80027c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c6:	e008      	b.n	80027da <HAL_DMA_Abort_IT+0xa2>
 80027c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027cc:	e005      	b.n	80027da <HAL_DMA_Abort_IT+0xa2>
 80027ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d2:	e002      	b.n	80027da <HAL_DMA_Abort_IT+0xa2>
 80027d4:	2310      	movs	r3, #16
 80027d6:	e000      	b.n	80027da <HAL_DMA_Abort_IT+0xa2>
 80027d8:	2301      	movs	r3, #1
 80027da:	4a11      	ldr	r2, [pc, #68]	; (8002820 <HAL_DMA_Abort_IT+0xe8>)
 80027dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
    } 
  }
  return status;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40020008 	.word	0x40020008
 800280c:	4002001c 	.word	0x4002001c
 8002810:	40020030 	.word	0x40020030
 8002814:	40020044 	.word	0x40020044
 8002818:	40020058 	.word	0x40020058
 800281c:	4002006c 	.word	0x4002006c
 8002820:	40020000 	.word	0x40020000

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b08b      	sub	sp, #44	; 0x2c
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002836:	e169      	b.n	8002b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002838:	2201      	movs	r2, #1
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 8158 	bne.w	8002b06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a9a      	ldr	r2, [pc, #616]	; (8002ac4 <HAL_GPIO_Init+0x2a0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d05e      	beq.n	800291e <HAL_GPIO_Init+0xfa>
 8002860:	4a98      	ldr	r2, [pc, #608]	; (8002ac4 <HAL_GPIO_Init+0x2a0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d875      	bhi.n	8002952 <HAL_GPIO_Init+0x12e>
 8002866:	4a98      	ldr	r2, [pc, #608]	; (8002ac8 <HAL_GPIO_Init+0x2a4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d058      	beq.n	800291e <HAL_GPIO_Init+0xfa>
 800286c:	4a96      	ldr	r2, [pc, #600]	; (8002ac8 <HAL_GPIO_Init+0x2a4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d86f      	bhi.n	8002952 <HAL_GPIO_Init+0x12e>
 8002872:	4a96      	ldr	r2, [pc, #600]	; (8002acc <HAL_GPIO_Init+0x2a8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d052      	beq.n	800291e <HAL_GPIO_Init+0xfa>
 8002878:	4a94      	ldr	r2, [pc, #592]	; (8002acc <HAL_GPIO_Init+0x2a8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d869      	bhi.n	8002952 <HAL_GPIO_Init+0x12e>
 800287e:	4a94      	ldr	r2, [pc, #592]	; (8002ad0 <HAL_GPIO_Init+0x2ac>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04c      	beq.n	800291e <HAL_GPIO_Init+0xfa>
 8002884:	4a92      	ldr	r2, [pc, #584]	; (8002ad0 <HAL_GPIO_Init+0x2ac>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d863      	bhi.n	8002952 <HAL_GPIO_Init+0x12e>
 800288a:	4a92      	ldr	r2, [pc, #584]	; (8002ad4 <HAL_GPIO_Init+0x2b0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d046      	beq.n	800291e <HAL_GPIO_Init+0xfa>
 8002890:	4a90      	ldr	r2, [pc, #576]	; (8002ad4 <HAL_GPIO_Init+0x2b0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d85d      	bhi.n	8002952 <HAL_GPIO_Init+0x12e>
 8002896:	2b12      	cmp	r3, #18
 8002898:	d82a      	bhi.n	80028f0 <HAL_GPIO_Init+0xcc>
 800289a:	2b12      	cmp	r3, #18
 800289c:	d859      	bhi.n	8002952 <HAL_GPIO_Init+0x12e>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <HAL_GPIO_Init+0x80>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	0800291f 	.word	0x0800291f
 80028a8:	080028f9 	.word	0x080028f9
 80028ac:	0800290b 	.word	0x0800290b
 80028b0:	0800294d 	.word	0x0800294d
 80028b4:	08002953 	.word	0x08002953
 80028b8:	08002953 	.word	0x08002953
 80028bc:	08002953 	.word	0x08002953
 80028c0:	08002953 	.word	0x08002953
 80028c4:	08002953 	.word	0x08002953
 80028c8:	08002953 	.word	0x08002953
 80028cc:	08002953 	.word	0x08002953
 80028d0:	08002953 	.word	0x08002953
 80028d4:	08002953 	.word	0x08002953
 80028d8:	08002953 	.word	0x08002953
 80028dc:	08002953 	.word	0x08002953
 80028e0:	08002953 	.word	0x08002953
 80028e4:	08002953 	.word	0x08002953
 80028e8:	08002901 	.word	0x08002901
 80028ec:	08002915 	.word	0x08002915
 80028f0:	4a79      	ldr	r2, [pc, #484]	; (8002ad8 <HAL_GPIO_Init+0x2b4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028f6:	e02c      	b.n	8002952 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e029      	b.n	8002954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	3304      	adds	r3, #4
 8002906:	623b      	str	r3, [r7, #32]
          break;
 8002908:	e024      	b.n	8002954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	3308      	adds	r3, #8
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e01f      	b.n	8002954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	330c      	adds	r3, #12
 800291a:	623b      	str	r3, [r7, #32]
          break;
 800291c:	e01a      	b.n	8002954 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002926:	2304      	movs	r3, #4
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e013      	b.n	8002954 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002934:	2308      	movs	r3, #8
 8002936:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	611a      	str	r2, [r3, #16]
          break;
 800293e:	e009      	b.n	8002954 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002940:	2308      	movs	r3, #8
 8002942:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	615a      	str	r2, [r3, #20]
          break;
 800294a:	e003      	b.n	8002954 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
          break;
 8002950:	e000      	b.n	8002954 <HAL_GPIO_Init+0x130>
          break;
 8002952:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2bff      	cmp	r3, #255	; 0xff
 8002958:	d801      	bhi.n	800295e <HAL_GPIO_Init+0x13a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	e001      	b.n	8002962 <HAL_GPIO_Init+0x13e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2bff      	cmp	r3, #255	; 0xff
 8002968:	d802      	bhi.n	8002970 <HAL_GPIO_Init+0x14c>
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x152>
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	3b08      	subs	r3, #8
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	210f      	movs	r1, #15
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	6a39      	ldr	r1, [r7, #32]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	431a      	orrs	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80b1 	beq.w	8002b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029a4:	4b4d      	ldr	r3, [pc, #308]	; (8002adc <HAL_GPIO_Init+0x2b8>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <HAL_GPIO_Init+0x2b8>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6193      	str	r3, [r2, #24]
 80029b0:	4b4a      	ldr	r3, [pc, #296]	; (8002adc <HAL_GPIO_Init+0x2b8>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029bc:	4a48      	ldr	r2, [pc, #288]	; (8002ae0 <HAL_GPIO_Init+0x2bc>)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a40      	ldr	r2, [pc, #256]	; (8002ae4 <HAL_GPIO_Init+0x2c0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_GPIO_Init+0x1ec>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3f      	ldr	r2, [pc, #252]	; (8002ae8 <HAL_GPIO_Init+0x2c4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00d      	beq.n	8002a0c <HAL_GPIO_Init+0x1e8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3e      	ldr	r2, [pc, #248]	; (8002aec <HAL_GPIO_Init+0x2c8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <HAL_GPIO_Init+0x1e4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3d      	ldr	r2, [pc, #244]	; (8002af0 <HAL_GPIO_Init+0x2cc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_GPIO_Init+0x1e0>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e006      	b.n	8002a12 <HAL_GPIO_Init+0x1ee>
 8002a04:	2304      	movs	r3, #4
 8002a06:	e004      	b.n	8002a12 <HAL_GPIO_Init+0x1ee>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0x1ee>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_GPIO_Init+0x1ee>
 8002a10:	2300      	movs	r3, #0
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	f002 0203 	and.w	r2, r2, #3
 8002a18:	0092      	lsls	r2, r2, #2
 8002a1a:	4093      	lsls	r3, r2
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a22:	492f      	ldr	r1, [pc, #188]	; (8002ae0 <HAL_GPIO_Init+0x2bc>)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	492c      	ldr	r1, [pc, #176]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4928      	ldr	r1, [pc, #160]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a64:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	4922      	ldr	r1, [pc, #136]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	491e      	ldr	r1, [pc, #120]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	4918      	ldr	r1, [pc, #96]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	4914      	ldr	r1, [pc, #80]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d021      	beq.n	8002af8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
 8002ac0:	e021      	b.n	8002b06 <HAL_GPIO_Init+0x2e2>
 8002ac2:	bf00      	nop
 8002ac4:	10320000 	.word	0x10320000
 8002ac8:	10310000 	.word	0x10310000
 8002acc:	10220000 	.word	0x10220000
 8002ad0:	10210000 	.word	0x10210000
 8002ad4:	10120000 	.word	0x10120000
 8002ad8:	10110000 	.word	0x10110000
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40010800 	.word	0x40010800
 8002ae8:	40010c00 	.word	0x40010c00
 8002aec:	40011000 	.word	0x40011000
 8002af0:	40011400 	.word	0x40011400
 8002af4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	4909      	ldr	r1, [pc, #36]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	3301      	adds	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f47f ae8e 	bne.w	8002838 <HAL_GPIO_Init+0x14>
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	372c      	adds	r7, #44	; 0x2c
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	611a      	str	r2, [r3, #16]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fe9c 	bl	80018b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e26c      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8087 	beq.w	8002cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b92      	ldr	r3, [pc, #584]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d112      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
 8002bc4:	4b8c      	ldr	r3, [pc, #560]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e246      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x76>
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a7f      	ldr	r2, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7a      	ldr	r2, [pc, #488]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0xbc>
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a71      	ldr	r2, [pc, #452]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c48:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6a      	ldr	r2, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f84c 	bl	8001d04 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f848 	bl	8001d04 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1fa      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe4>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff f838 	bl	8001d04 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff f834 	bl	8001d04 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1e6      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x10c>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc6:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
 8002cde:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1ba      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4939      	ldr	r1, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe ffed 	bl	8001d04 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe ffe9 	bl	8001d04 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e19b      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4927      	ldr	r1, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe ffcc 	bl	8001d04 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fe ffc8 	bl	8001d04 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e17a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d03a      	beq.n	8002e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d019      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe ffac 	bl	8001d04 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fe ffa8 	bl	8001d04 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e15a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f000 fad8 	bl	8003384 <RCC_Delay>
 8002dd4:	e01c      	b.n	8002e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe ff92 	bl	8001d04 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de2:	e00f      	b.n	8002e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe ff8e 	bl	8001d04 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e140      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	42420000 	.word	0x42420000
 8002e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b9e      	ldr	r3, [pc, #632]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e9      	bne.n	8002de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a6 	beq.w	8002f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b97      	ldr	r3, [pc, #604]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b94      	ldr	r3, [pc, #592]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a93      	ldr	r2, [pc, #588]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	61d3      	str	r3, [r2, #28]
 8002e3a:	4b91      	ldr	r3, [pc, #580]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8a      	ldr	r2, [pc, #552]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fe ff4f 	bl	8001d04 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fe ff4b 	bl	8001d04 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0fd      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x312>
 8002e90:	4b7b      	ldr	r3, [pc, #492]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a7a      	ldr	r2, [pc, #488]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	e02d      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x334>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a72      	ldr	r2, [pc, #456]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	e01c      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x356>
 8002ec8:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a6c      	ldr	r2, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a66      	ldr	r2, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d015      	beq.n	8002f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fe feff 	bl	8001d04 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fefb 	bl	8001d04 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0ab      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RCC_OscConfig+0x37e>
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fee9 	bl	8001d04 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fee5 	bl	8001d04 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e095      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8081 	beq.w	8003076 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d061      	beq.n	8003044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d146      	bne.n	8003016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe feb9 	bl	8001d04 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe feb5 	bl	8001d04 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e067      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d108      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	492d      	ldr	r1, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a19      	ldr	r1, [r3, #32]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	4927      	ldr	r1, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe fe89 	bl	8001d04 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe fe85 	bl	8001d04 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e037      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x46a>
 8003014:	e02f      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fe72 	bl	8001d04 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fe6e 	bl	8001d04 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e020      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x498>
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e013      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	429a      	cmp	r2, r3
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420060 	.word	0x42420060

0800308c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d0      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4965      	ldr	r1, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800310a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d040      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d115      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e073      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06b      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4936      	ldr	r1, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe fdc2 	bl	8001d04 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe fdbe 	bl	8001d04 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e053      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1cc>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1d0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fd20 	bl	8001c80 <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	080077b4 	.word	0x080077b4
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b490      	push	{r4, r7}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003268:	1d3c      	adds	r4, r7, #4
 800326a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800326c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003270:	f240 2301 	movw	r3, #513	; 0x201
 8003274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x46>
 800329e:	e02d      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	e02d      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d2:	4413      	add	r3, r2
 80032d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032de:	fb02 f203 	mul.w	r2, r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e004      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	623b      	str	r3, [r7, #32]
      break;
 80032fa:	e002      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fe:	623b      	str	r3, [r7, #32]
      break;
 8003300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003302:	6a3b      	ldr	r3, [r7, #32]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3728      	adds	r7, #40	; 0x28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc90      	pop	{r4, r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	08007798 	.word	0x08007798
 8003314:	40021000 	.word	0x40021000
 8003318:	007a1200 	.word	0x007a1200
 800331c:	003d0900 	.word	0x003d0900

08003320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b02      	ldr	r3, [pc, #8]	; (8003330 <HAL_RCC_GetHCLKFreq+0x10>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20000000 	.word	0x20000000

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003338:	f7ff fff2 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4903      	ldr	r1, [pc, #12]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	080077c4 	.word	0x080077c4

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003360:	f7ff ffde 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	080077c4 	.word	0x080077c4

08003384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <RCC_Delay+0x34>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <RCC_Delay+0x38>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a0:	bf00      	nop
  }
  while (Delay --);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <RCC_Delay+0x1c>
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000000 	.word	0x20000000
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d07d      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e0:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b49      	ldr	r3, [pc, #292]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d118      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003420:	f7fe fc70 	bl	8001d04 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fe fc6c 	bl	8001d04 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06d      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003446:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02e      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d027      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b2e      	ldr	r3, [pc, #184]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003474:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347a:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d014      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fe fc3b 	bl	8001d04 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fe fc37 	bl	8001d04 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e036      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4917      	ldr	r1, [pc, #92]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	490b      	ldr	r1, [pc, #44]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	42420440 	.word	0x42420440

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e041      	b.n	80035c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fa56 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fa70 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e03a      	b.n	800365a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIM_Base_Start_IT+0x98>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x58>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d009      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x58>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <HAL_TIM_Base_Start_IT+0x9c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x58>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <HAL_TIM_Base_Start_IT+0xa0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d111      	bne.n	8003648 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b06      	cmp	r3, #6
 8003634:	d010      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003646:	e007      	b.n	8003658 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0202 	mvn.w	r2, #2
 800369c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9b1 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f9a4 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f9b3 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0204 	mvn.w	r2, #4
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f987 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f97a 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f989 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b08      	cmp	r3, #8
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0208 	mvn.w	r2, #8
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2204      	movs	r2, #4
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f95d 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f950 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f95f 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b10      	cmp	r3, #16
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0210 	mvn.w	r2, #16
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2208      	movs	r2, #8
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f933 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f926 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f935 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0201 	mvn.w	r2, #1
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fd2a 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d107      	bne.n	8003820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa77 	bl	8003d0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8f9 	bl	8003a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b20      	cmp	r3, #32
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0220 	mvn.w	r2, #32
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa42 	bl	8003cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIM_ConfigClockSource+0x18>
 8003894:	2302      	movs	r3, #2
 8003896:	e0b3      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x180>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d03e      	beq.n	8003950 <HAL_TIM_ConfigClockSource+0xd0>
 80038d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d6:	f200 8087 	bhi.w	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	f000 8085 	beq.w	80039ec <HAL_TIM_ConfigClockSource+0x16c>
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d87f      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 80038e8:	2b70      	cmp	r3, #112	; 0x70
 80038ea:	d01a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0xa2>
 80038ec:	2b70      	cmp	r3, #112	; 0x70
 80038ee:	d87b      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 80038f0:	2b60      	cmp	r3, #96	; 0x60
 80038f2:	d050      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x116>
 80038f4:	2b60      	cmp	r3, #96	; 0x60
 80038f6:	d877      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 80038f8:	2b50      	cmp	r3, #80	; 0x50
 80038fa:	d03c      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0xf6>
 80038fc:	2b50      	cmp	r3, #80	; 0x50
 80038fe:	d873      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d058      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x136>
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d86f      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 8003908:	2b30      	cmp	r3, #48	; 0x30
 800390a:	d064      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x156>
 800390c:	2b30      	cmp	r3, #48	; 0x30
 800390e:	d86b      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 8003910:	2b20      	cmp	r3, #32
 8003912:	d060      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x156>
 8003914:	2b20      	cmp	r3, #32
 8003916:	d867      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05c      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x156>
 800391c:	2b10      	cmp	r3, #16
 800391e:	d05a      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003920:	e062      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f000 f966 	bl	8003c02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003944:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	609a      	str	r2, [r3, #8]
      break;
 800394e:	e04e      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f000 f94f 	bl	8003c02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003972:	609a      	str	r2, [r3, #8]
      break;
 8003974:	e03b      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	461a      	mov	r2, r3
 8003984:	f000 f8c6 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2150      	movs	r1, #80	; 0x50
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f91d 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 8003994:	e02b      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f000 f8e4 	bl	8003b70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2160      	movs	r1, #96	; 0x60
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f90d 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 80039b4:	e01b      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f000 f8a6 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2140      	movs	r1, #64	; 0x40
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f8fd 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 80039d4:	e00b      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f000 f8f4 	bl	8003bce <TIM_ITRx_SetConfig>
        break;
 80039e6:	e002      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a29      	ldr	r2, [pc, #164]	; (8003b08 <TIM_Base_SetConfig+0xb8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_Base_SetConfig+0x30>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d007      	beq.n	8003a80 <TIM_Base_SetConfig+0x30>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <TIM_Base_SetConfig+0xbc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_Base_SetConfig+0x30>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <TIM_Base_SetConfig+0xc0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d108      	bne.n	8003a92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <TIM_Base_SetConfig+0xb8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <TIM_Base_SetConfig+0x62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d007      	beq.n	8003ab2 <TIM_Base_SetConfig+0x62>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <TIM_Base_SetConfig+0xbc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_Base_SetConfig+0x62>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <TIM_Base_SetConfig+0xc0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d108      	bne.n	8003ac4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <TIM_Base_SetConfig+0xb8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d103      	bne.n	8003af8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	615a      	str	r2, [r3, #20]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800

08003b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0201 	bic.w	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f023 030a 	bic.w	r3, r3, #10
 8003b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f023 0210 	bic.w	r2, r3, #16
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	031b      	lsls	r3, r3, #12
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f043 0307 	orr.w	r3, r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b087      	sub	sp, #28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e046      	b.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca4:	d009      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800

08003cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e03f      	b.n	8003db2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fe82 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fba5 	bl	80044b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b08a      	sub	sp, #40	; 0x28
 8003dbe:	af02      	add	r7, sp, #8
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	f040 8089 	bne.w	8003eee <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_UART_Receive+0x2e>
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e081      	b.n	8003ef0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Receive+0x40>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e07a      	b.n	8003ef0 <HAL_UART_Receive+0x136>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2222      	movs	r2, #34	; 0x22
 8003e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e10:	f7fd ff78 	bl	8001d04 <HAL_GetTick>
 8003e14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	88fa      	ldrh	r2, [r7, #6]
 8003e1a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d108      	bne.n	8003e3e <HAL_UART_Receive+0x84>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	e003      	b.n	8003e46 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e4e:	e043      	b.n	8003ed8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	2120      	movs	r1, #32
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f9c8 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e042      	b.n	8003ef0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10c      	bne.n	8003e8a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3302      	adds	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	e01f      	b.n	8003eca <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d007      	beq.n	8003ea4 <HAL_UART_Receive+0xea>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_UART_Receive+0xf8>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e008      	b.n	8003ec4 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1b6      	bne.n	8003e50 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d130      	bne.n	8003f74 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_UART_Transmit_IT+0x26>
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e029      	b.n	8003f76 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Transmit_IT+0x38>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e022      	b.n	8003f76 <HAL_UART_Transmit_IT+0x7e>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2221      	movs	r2, #33	; 0x21
 8003f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f6e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x52>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f9f2 	bl	80043b4 <UART_Receive_IT>
      return;
 8003fd0:	e0d0      	b.n	8004174 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80b0 	beq.w	800413a <HAL_UART_IRQHandler+0x1ba>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x70>
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a5 	beq.w	800413a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_UART_IRQHandler+0x90>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_UART_IRQHandler+0xb0>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004028:	f043 0202 	orr.w	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_UART_IRQHandler+0xd0>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00f      	beq.n	800407a <HAL_UART_IRQHandler+0xfa>
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_UART_IRQHandler+0xee>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	f043 0208 	orr.w	r2, r3, #8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d077      	beq.n	8004172 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_UART_IRQHandler+0x11c>
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f98c 	bl	80043b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <HAL_UART_IRQHandler+0x144>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d031      	beq.n	8004128 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8dd 	bl	8004284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d023      	beq.n	8004120 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_UART_IRQHandler+0x1fc>)
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fb1b 	bl	8002738 <HAL_DMA_Abort_IT>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004112:	4610      	mov	r0, r2
 8004114:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004116:	e00e      	b.n	8004136 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f843 	bl	80041a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411e:	e00a      	b.n	8004136 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f83f 	bl	80041a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004126:	e006      	b.n	8004136 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f83b 	bl	80041a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004134:	e01d      	b.n	8004172 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004136:	bf00      	nop
    return;
 8004138:	e01b      	b.n	8004172 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_UART_IRQHandler+0x1d6>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8c9 	bl	80042e6 <UART_Transmit_IT>
    return;
 8004154:	e00e      	b.n	8004174 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_UART_IRQHandler+0x1f4>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f90a 	bl	8004384 <UART_EndTransmit_IT>
    return;
 8004170:	e000      	b.n	8004174 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004172:	bf00      	nop
  }
}
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	080042bf 	.word	0x080042bf

08004180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	4313      	orrs	r3, r2
 80041e4:	b2db      	uxtb	r3, r3
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004200:	e02c      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d028      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x30>
 8004210:	f7fd fd78 	bl	8001d04 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	429a      	cmp	r2, r3
 800421e:	d21d      	bcs.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800422e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e00f      	b.n	800427c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	429a      	cmp	r2, r3
 8004278:	d0c3      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800429a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff ff63 	bl	80041a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b21      	cmp	r3, #33	; 0x21
 80042f8:	d13e      	bne.n	8004378 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004302:	d114      	bne.n	800432e <UART_Transmit_IT+0x48>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d110      	bne.n	800432e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004320:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	1c9a      	adds	r2, r3, #2
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	e008      	b.n	8004340 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	1c59      	adds	r1, r3, #1
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6211      	str	r1, [r2, #32]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29b      	uxth	r3, r3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	4619      	mov	r1, r3
 800434e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10f      	bne.n	8004374 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004362:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004372:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff feeb 	bl	8004180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b22      	cmp	r3, #34	; 0x22
 80043c6:	d170      	bne.n	80044aa <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d117      	bne.n	8004402 <UART_Receive_IT+0x4e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d113      	bne.n	8004402 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004400:	e026      	b.n	8004450 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d007      	beq.n	8004426 <UART_Receive_IT+0x72>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <UART_Receive_IT+0x80>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e008      	b.n	8004446 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29b      	uxth	r3, r3
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4619      	mov	r1, r3
 800445e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004460:	2b00      	cmp	r3, #0
 8004462:	d120      	bne.n	80044a6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0220 	bic.w	r2, r2, #32
 8004472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fe78 	bl	8004192 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e002      	b.n	80044ac <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044ee:	f023 030c 	bic.w	r3, r3, #12
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <UART_SetConfig+0x114>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800451c:	f7fe ff1e 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	e002      	b.n	800452a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fe ff06 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8004528:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	441a      	add	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	4a22      	ldr	r2, [pc, #136]	; (80045cc <UART_SetConfig+0x118>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	0119      	lsls	r1, r3, #4
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009a      	lsls	r2, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004560:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <UART_SetConfig+0x118>)
 8004562:	fba3 0302 	umull	r0, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	2064      	movs	r0, #100	; 0x64
 800456a:	fb00 f303 	mul.w	r3, r0, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	3332      	adds	r3, #50	; 0x32
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <UART_SetConfig+0x118>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004580:	4419      	add	r1, r3
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009a      	lsls	r2, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	fbb2 f2f3 	udiv	r2, r2, r3
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <UART_SetConfig+0x118>)
 800459a:	fba3 0302 	umull	r0, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2064      	movs	r0, #100	; 0x64
 80045a2:	fb00 f303 	mul.w	r3, r0, r3
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	3332      	adds	r3, #50	; 0x32
 80045ac:	4a07      	ldr	r2, [pc, #28]	; (80045cc <UART_SetConfig+0x118>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	440a      	add	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40013800 	.word	0x40013800
 80045cc:	51eb851f 	.word	0x51eb851f

080045d0 <__errno>:
 80045d0:	4b01      	ldr	r3, [pc, #4]	; (80045d8 <__errno+0x8>)
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000000c 	.word	0x2000000c

080045dc <__libc_init_array>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	2600      	movs	r6, #0
 80045e0:	4d0c      	ldr	r5, [pc, #48]	; (8004614 <__libc_init_array+0x38>)
 80045e2:	4c0d      	ldr	r4, [pc, #52]	; (8004618 <__libc_init_array+0x3c>)
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	d109      	bne.n	8004600 <__libc_init_array+0x24>
 80045ec:	f003 f892 	bl	8007714 <_init>
 80045f0:	2600      	movs	r6, #0
 80045f2:	4d0a      	ldr	r5, [pc, #40]	; (800461c <__libc_init_array+0x40>)
 80045f4:	4c0a      	ldr	r4, [pc, #40]	; (8004620 <__libc_init_array+0x44>)
 80045f6:	1b64      	subs	r4, r4, r5
 80045f8:	10a4      	asrs	r4, r4, #2
 80045fa:	42a6      	cmp	r6, r4
 80045fc:	d105      	bne.n	800460a <__libc_init_array+0x2e>
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	f855 3b04 	ldr.w	r3, [r5], #4
 8004604:	4798      	blx	r3
 8004606:	3601      	adds	r6, #1
 8004608:	e7ee      	b.n	80045e8 <__libc_init_array+0xc>
 800460a:	f855 3b04 	ldr.w	r3, [r5], #4
 800460e:	4798      	blx	r3
 8004610:	3601      	adds	r6, #1
 8004612:	e7f2      	b.n	80045fa <__libc_init_array+0x1e>
 8004614:	08007b98 	.word	0x08007b98
 8004618:	08007b98 	.word	0x08007b98
 800461c:	08007b98 	.word	0x08007b98
 8004620:	08007b9c 	.word	0x08007b9c

08004624 <memset>:
 8004624:	4603      	mov	r3, r0
 8004626:	4402      	add	r2, r0
 8004628:	4293      	cmp	r3, r2
 800462a:	d100      	bne.n	800462e <memset+0xa>
 800462c:	4770      	bx	lr
 800462e:	f803 1b01 	strb.w	r1, [r3], #1
 8004632:	e7f9      	b.n	8004628 <memset+0x4>

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800463a:	b500      	push	{lr}
 800463c:	b09c      	sub	sp, #112	; 0x70
 800463e:	ab1d      	add	r3, sp, #116	; 0x74
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	9107      	str	r1, [sp, #28]
 8004646:	9104      	str	r1, [sp, #16]
 8004648:	4808      	ldr	r0, [pc, #32]	; (800466c <siprintf+0x38>)
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	a902      	add	r1, sp, #8
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	f000 f894 	bl	8004784 <_svfiprintf_r>
 800465c:	2200      	movs	r2, #0
 800465e:	9b02      	ldr	r3, [sp, #8]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	2000000c 	.word	0x2000000c
 8004670:	ffff0208 	.word	0xffff0208

08004674 <siscanf>:
 8004674:	b40e      	push	{r1, r2, r3}
 8004676:	f44f 7201 	mov.w	r2, #516	; 0x204
 800467a:	b530      	push	{r4, r5, lr}
 800467c:	b09c      	sub	sp, #112	; 0x70
 800467e:	ac1f      	add	r4, sp, #124	; 0x7c
 8004680:	f854 5b04 	ldr.w	r5, [r4], #4
 8004684:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004688:	9002      	str	r0, [sp, #8]
 800468a:	9006      	str	r0, [sp, #24]
 800468c:	f7fb fd60 	bl	8000150 <strlen>
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <siscanf+0x4c>)
 8004692:	9003      	str	r0, [sp, #12]
 8004694:	930b      	str	r3, [sp, #44]	; 0x2c
 8004696:	2300      	movs	r3, #0
 8004698:	930f      	str	r3, [sp, #60]	; 0x3c
 800469a:	9314      	str	r3, [sp, #80]	; 0x50
 800469c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046a0:	9007      	str	r0, [sp, #28]
 80046a2:	4808      	ldr	r0, [pc, #32]	; (80046c4 <siscanf+0x50>)
 80046a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046a8:	462a      	mov	r2, r5
 80046aa:	4623      	mov	r3, r4
 80046ac:	a902      	add	r1, sp, #8
 80046ae:	6800      	ldr	r0, [r0, #0]
 80046b0:	9401      	str	r4, [sp, #4]
 80046b2:	f000 f9c1 	bl	8004a38 <__ssvfiscanf_r>
 80046b6:	b01c      	add	sp, #112	; 0x70
 80046b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046bc:	b003      	add	sp, #12
 80046be:	4770      	bx	lr
 80046c0:	080046c9 	.word	0x080046c9
 80046c4:	2000000c 	.word	0x2000000c

080046c8 <__seofread>:
 80046c8:	2000      	movs	r0, #0
 80046ca:	4770      	bx	lr

080046cc <__ssputs_r>:
 80046cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d0:	688e      	ldr	r6, [r1, #8]
 80046d2:	4682      	mov	sl, r0
 80046d4:	429e      	cmp	r6, r3
 80046d6:	460c      	mov	r4, r1
 80046d8:	4690      	mov	r8, r2
 80046da:	461f      	mov	r7, r3
 80046dc:	d838      	bhi.n	8004750 <__ssputs_r+0x84>
 80046de:	898a      	ldrh	r2, [r1, #12]
 80046e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046e4:	d032      	beq.n	800474c <__ssputs_r+0x80>
 80046e6:	6825      	ldr	r5, [r4, #0]
 80046e8:	6909      	ldr	r1, [r1, #16]
 80046ea:	3301      	adds	r3, #1
 80046ec:	eba5 0901 	sub.w	r9, r5, r1
 80046f0:	6965      	ldr	r5, [r4, #20]
 80046f2:	444b      	add	r3, r9
 80046f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046fc:	106d      	asrs	r5, r5, #1
 80046fe:	429d      	cmp	r5, r3
 8004700:	bf38      	it	cc
 8004702:	461d      	movcc	r5, r3
 8004704:	0553      	lsls	r3, r2, #21
 8004706:	d531      	bpl.n	800476c <__ssputs_r+0xa0>
 8004708:	4629      	mov	r1, r5
 800470a:	f000 ffeb 	bl	80056e4 <_malloc_r>
 800470e:	4606      	mov	r6, r0
 8004710:	b950      	cbnz	r0, 8004728 <__ssputs_r+0x5c>
 8004712:	230c      	movs	r3, #12
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	f8ca 3000 	str.w	r3, [sl]
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004722:	81a3      	strh	r3, [r4, #12]
 8004724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004728:	464a      	mov	r2, r9
 800472a:	6921      	ldr	r1, [r4, #16]
 800472c:	f000 ff66 	bl	80055fc <memcpy>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	6126      	str	r6, [r4, #16]
 800473e:	444e      	add	r6, r9
 8004740:	6026      	str	r6, [r4, #0]
 8004742:	463e      	mov	r6, r7
 8004744:	6165      	str	r5, [r4, #20]
 8004746:	eba5 0509 	sub.w	r5, r5, r9
 800474a:	60a5      	str	r5, [r4, #8]
 800474c:	42be      	cmp	r6, r7
 800474e:	d900      	bls.n	8004752 <__ssputs_r+0x86>
 8004750:	463e      	mov	r6, r7
 8004752:	4632      	mov	r2, r6
 8004754:	4641      	mov	r1, r8
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	f000 ff5e 	bl	8005618 <memmove>
 800475c:	68a3      	ldr	r3, [r4, #8]
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	1b9b      	subs	r3, r3, r6
 8004762:	4432      	add	r2, r6
 8004764:	2000      	movs	r0, #0
 8004766:	60a3      	str	r3, [r4, #8]
 8004768:	6022      	str	r2, [r4, #0]
 800476a:	e7db      	b.n	8004724 <__ssputs_r+0x58>
 800476c:	462a      	mov	r2, r5
 800476e:	f001 f813 	bl	8005798 <_realloc_r>
 8004772:	4606      	mov	r6, r0
 8004774:	2800      	cmp	r0, #0
 8004776:	d1e1      	bne.n	800473c <__ssputs_r+0x70>
 8004778:	4650      	mov	r0, sl
 800477a:	6921      	ldr	r1, [r4, #16]
 800477c:	f000 ff66 	bl	800564c <_free_r>
 8004780:	e7c7      	b.n	8004712 <__ssputs_r+0x46>
	...

08004784 <_svfiprintf_r>:
 8004784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004788:	4698      	mov	r8, r3
 800478a:	898b      	ldrh	r3, [r1, #12]
 800478c:	4607      	mov	r7, r0
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	460d      	mov	r5, r1
 8004792:	4614      	mov	r4, r2
 8004794:	b09d      	sub	sp, #116	; 0x74
 8004796:	d50e      	bpl.n	80047b6 <_svfiprintf_r+0x32>
 8004798:	690b      	ldr	r3, [r1, #16]
 800479a:	b963      	cbnz	r3, 80047b6 <_svfiprintf_r+0x32>
 800479c:	2140      	movs	r1, #64	; 0x40
 800479e:	f000 ffa1 	bl	80056e4 <_malloc_r>
 80047a2:	6028      	str	r0, [r5, #0]
 80047a4:	6128      	str	r0, [r5, #16]
 80047a6:	b920      	cbnz	r0, 80047b2 <_svfiprintf_r+0x2e>
 80047a8:	230c      	movs	r3, #12
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	e0d1      	b.n	8004956 <_svfiprintf_r+0x1d2>
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	616b      	str	r3, [r5, #20]
 80047b6:	2300      	movs	r3, #0
 80047b8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ba:	2320      	movs	r3, #32
 80047bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047c0:	2330      	movs	r3, #48	; 0x30
 80047c2:	f04f 0901 	mov.w	r9, #1
 80047c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004970 <_svfiprintf_r+0x1ec>
 80047ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d2:	4623      	mov	r3, r4
 80047d4:	469a      	mov	sl, r3
 80047d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047da:	b10a      	cbz	r2, 80047e0 <_svfiprintf_r+0x5c>
 80047dc:	2a25      	cmp	r2, #37	; 0x25
 80047de:	d1f9      	bne.n	80047d4 <_svfiprintf_r+0x50>
 80047e0:	ebba 0b04 	subs.w	fp, sl, r4
 80047e4:	d00b      	beq.n	80047fe <_svfiprintf_r+0x7a>
 80047e6:	465b      	mov	r3, fp
 80047e8:	4622      	mov	r2, r4
 80047ea:	4629      	mov	r1, r5
 80047ec:	4638      	mov	r0, r7
 80047ee:	f7ff ff6d 	bl	80046cc <__ssputs_r>
 80047f2:	3001      	adds	r0, #1
 80047f4:	f000 80aa 	beq.w	800494c <_svfiprintf_r+0x1c8>
 80047f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047fa:	445a      	add	r2, fp
 80047fc:	9209      	str	r2, [sp, #36]	; 0x24
 80047fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80a2 	beq.w	800494c <_svfiprintf_r+0x1c8>
 8004808:	2300      	movs	r3, #0
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004812:	f10a 0a01 	add.w	sl, sl, #1
 8004816:	9304      	str	r3, [sp, #16]
 8004818:	9307      	str	r3, [sp, #28]
 800481a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800481e:	931a      	str	r3, [sp, #104]	; 0x68
 8004820:	4654      	mov	r4, sl
 8004822:	2205      	movs	r2, #5
 8004824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004828:	4851      	ldr	r0, [pc, #324]	; (8004970 <_svfiprintf_r+0x1ec>)
 800482a:	f000 fed9 	bl	80055e0 <memchr>
 800482e:	9a04      	ldr	r2, [sp, #16]
 8004830:	b9d8      	cbnz	r0, 800486a <_svfiprintf_r+0xe6>
 8004832:	06d0      	lsls	r0, r2, #27
 8004834:	bf44      	itt	mi
 8004836:	2320      	movmi	r3, #32
 8004838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800483c:	0711      	lsls	r1, r2, #28
 800483e:	bf44      	itt	mi
 8004840:	232b      	movmi	r3, #43	; 0x2b
 8004842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004846:	f89a 3000 	ldrb.w	r3, [sl]
 800484a:	2b2a      	cmp	r3, #42	; 0x2a
 800484c:	d015      	beq.n	800487a <_svfiprintf_r+0xf6>
 800484e:	4654      	mov	r4, sl
 8004850:	2000      	movs	r0, #0
 8004852:	f04f 0c0a 	mov.w	ip, #10
 8004856:	9a07      	ldr	r2, [sp, #28]
 8004858:	4621      	mov	r1, r4
 800485a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800485e:	3b30      	subs	r3, #48	; 0x30
 8004860:	2b09      	cmp	r3, #9
 8004862:	d94e      	bls.n	8004902 <_svfiprintf_r+0x17e>
 8004864:	b1b0      	cbz	r0, 8004894 <_svfiprintf_r+0x110>
 8004866:	9207      	str	r2, [sp, #28]
 8004868:	e014      	b.n	8004894 <_svfiprintf_r+0x110>
 800486a:	eba0 0308 	sub.w	r3, r0, r8
 800486e:	fa09 f303 	lsl.w	r3, r9, r3
 8004872:	4313      	orrs	r3, r2
 8004874:	46a2      	mov	sl, r4
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	e7d2      	b.n	8004820 <_svfiprintf_r+0x9c>
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	1d19      	adds	r1, r3, #4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	9103      	str	r1, [sp, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	bfbb      	ittet	lt
 8004886:	425b      	neglt	r3, r3
 8004888:	f042 0202 	orrlt.w	r2, r2, #2
 800488c:	9307      	strge	r3, [sp, #28]
 800488e:	9307      	strlt	r3, [sp, #28]
 8004890:	bfb8      	it	lt
 8004892:	9204      	strlt	r2, [sp, #16]
 8004894:	7823      	ldrb	r3, [r4, #0]
 8004896:	2b2e      	cmp	r3, #46	; 0x2e
 8004898:	d10c      	bne.n	80048b4 <_svfiprintf_r+0x130>
 800489a:	7863      	ldrb	r3, [r4, #1]
 800489c:	2b2a      	cmp	r3, #42	; 0x2a
 800489e:	d135      	bne.n	800490c <_svfiprintf_r+0x188>
 80048a0:	9b03      	ldr	r3, [sp, #12]
 80048a2:	3402      	adds	r4, #2
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	9203      	str	r2, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80048b2:	9305      	str	r3, [sp, #20]
 80048b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004980 <_svfiprintf_r+0x1fc>
 80048b8:	2203      	movs	r2, #3
 80048ba:	4650      	mov	r0, sl
 80048bc:	7821      	ldrb	r1, [r4, #0]
 80048be:	f000 fe8f 	bl	80055e0 <memchr>
 80048c2:	b140      	cbz	r0, 80048d6 <_svfiprintf_r+0x152>
 80048c4:	2340      	movs	r3, #64	; 0x40
 80048c6:	eba0 000a 	sub.w	r0, r0, sl
 80048ca:	fa03 f000 	lsl.w	r0, r3, r0
 80048ce:	9b04      	ldr	r3, [sp, #16]
 80048d0:	3401      	adds	r4, #1
 80048d2:	4303      	orrs	r3, r0
 80048d4:	9304      	str	r3, [sp, #16]
 80048d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048da:	2206      	movs	r2, #6
 80048dc:	4825      	ldr	r0, [pc, #148]	; (8004974 <_svfiprintf_r+0x1f0>)
 80048de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048e2:	f000 fe7d 	bl	80055e0 <memchr>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d038      	beq.n	800495c <_svfiprintf_r+0x1d8>
 80048ea:	4b23      	ldr	r3, [pc, #140]	; (8004978 <_svfiprintf_r+0x1f4>)
 80048ec:	bb1b      	cbnz	r3, 8004936 <_svfiprintf_r+0x1b2>
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	3307      	adds	r3, #7
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	3308      	adds	r3, #8
 80048f8:	9303      	str	r3, [sp, #12]
 80048fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fc:	4433      	add	r3, r6
 80048fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004900:	e767      	b.n	80047d2 <_svfiprintf_r+0x4e>
 8004902:	460c      	mov	r4, r1
 8004904:	2001      	movs	r0, #1
 8004906:	fb0c 3202 	mla	r2, ip, r2, r3
 800490a:	e7a5      	b.n	8004858 <_svfiprintf_r+0xd4>
 800490c:	2300      	movs	r3, #0
 800490e:	f04f 0c0a 	mov.w	ip, #10
 8004912:	4619      	mov	r1, r3
 8004914:	3401      	adds	r4, #1
 8004916:	9305      	str	r3, [sp, #20]
 8004918:	4620      	mov	r0, r4
 800491a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800491e:	3a30      	subs	r2, #48	; 0x30
 8004920:	2a09      	cmp	r2, #9
 8004922:	d903      	bls.n	800492c <_svfiprintf_r+0x1a8>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0c5      	beq.n	80048b4 <_svfiprintf_r+0x130>
 8004928:	9105      	str	r1, [sp, #20]
 800492a:	e7c3      	b.n	80048b4 <_svfiprintf_r+0x130>
 800492c:	4604      	mov	r4, r0
 800492e:	2301      	movs	r3, #1
 8004930:	fb0c 2101 	mla	r1, ip, r1, r2
 8004934:	e7f0      	b.n	8004918 <_svfiprintf_r+0x194>
 8004936:	ab03      	add	r3, sp, #12
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	462a      	mov	r2, r5
 800493c:	4638      	mov	r0, r7
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <_svfiprintf_r+0x1f8>)
 8004940:	a904      	add	r1, sp, #16
 8004942:	f3af 8000 	nop.w
 8004946:	1c42      	adds	r2, r0, #1
 8004948:	4606      	mov	r6, r0
 800494a:	d1d6      	bne.n	80048fa <_svfiprintf_r+0x176>
 800494c:	89ab      	ldrh	r3, [r5, #12]
 800494e:	065b      	lsls	r3, r3, #25
 8004950:	f53f af2c 	bmi.w	80047ac <_svfiprintf_r+0x28>
 8004954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004956:	b01d      	add	sp, #116	; 0x74
 8004958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495c:	ab03      	add	r3, sp, #12
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	462a      	mov	r2, r5
 8004962:	4638      	mov	r0, r7
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <_svfiprintf_r+0x1f8>)
 8004966:	a904      	add	r1, sp, #16
 8004968:	f000 fa50 	bl	8004e0c <_printf_i>
 800496c:	e7eb      	b.n	8004946 <_svfiprintf_r+0x1c2>
 800496e:	bf00      	nop
 8004970:	080077cc 	.word	0x080077cc
 8004974:	080077d6 	.word	0x080077d6
 8004978:	00000000 	.word	0x00000000
 800497c:	080046cd 	.word	0x080046cd
 8004980:	080077d2 	.word	0x080077d2

08004984 <_sungetc_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	1c4b      	adds	r3, r1, #1
 8004988:	4614      	mov	r4, r2
 800498a:	d103      	bne.n	8004994 <_sungetc_r+0x10>
 800498c:	f04f 35ff 	mov.w	r5, #4294967295
 8004990:	4628      	mov	r0, r5
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	8993      	ldrh	r3, [r2, #12]
 8004996:	b2cd      	uxtb	r5, r1
 8004998:	f023 0320 	bic.w	r3, r3, #32
 800499c:	8193      	strh	r3, [r2, #12]
 800499e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049a0:	6852      	ldr	r2, [r2, #4]
 80049a2:	b18b      	cbz	r3, 80049c8 <_sungetc_r+0x44>
 80049a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049a6:	4293      	cmp	r3, r2
 80049a8:	dd08      	ble.n	80049bc <_sungetc_r+0x38>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	3301      	adds	r3, #1
 80049b8:	6063      	str	r3, [r4, #4]
 80049ba:	e7e9      	b.n	8004990 <_sungetc_r+0xc>
 80049bc:	4621      	mov	r1, r4
 80049be:	f000 fdd5 	bl	800556c <__submore>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0f1      	beq.n	80049aa <_sungetc_r+0x26>
 80049c6:	e7e1      	b.n	800498c <_sungetc_r+0x8>
 80049c8:	6921      	ldr	r1, [r4, #16]
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	b151      	cbz	r1, 80049e4 <_sungetc_r+0x60>
 80049ce:	4299      	cmp	r1, r3
 80049d0:	d208      	bcs.n	80049e4 <_sungetc_r+0x60>
 80049d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80049d6:	42a9      	cmp	r1, r5
 80049d8:	d104      	bne.n	80049e4 <_sungetc_r+0x60>
 80049da:	3b01      	subs	r3, #1
 80049dc:	3201      	adds	r2, #1
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	6062      	str	r2, [r4, #4]
 80049e2:	e7d5      	b.n	8004990 <_sungetc_r+0xc>
 80049e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80049e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ec:	6363      	str	r3, [r4, #52]	; 0x34
 80049ee:	2303      	movs	r3, #3
 80049f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80049f2:	4623      	mov	r3, r4
 80049f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7dc      	b.n	80049b8 <_sungetc_r+0x34>

080049fe <__ssrefill_r>:
 80049fe:	b510      	push	{r4, lr}
 8004a00:	460c      	mov	r4, r1
 8004a02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004a04:	b169      	cbz	r1, 8004a22 <__ssrefill_r+0x24>
 8004a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a0a:	4299      	cmp	r1, r3
 8004a0c:	d001      	beq.n	8004a12 <__ssrefill_r+0x14>
 8004a0e:	f000 fe1d 	bl	800564c <_free_r>
 8004a12:	2000      	movs	r0, #0
 8004a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a16:	6360      	str	r0, [r4, #52]	; 0x34
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	b113      	cbz	r3, 8004a22 <__ssrefill_r+0x24>
 8004a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a1e:	6023      	str	r3, [r4, #0]
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f043 0320 	orr.w	r3, r3, #32
 8004a34:	81a3      	strh	r3, [r4, #12]
 8004a36:	e7f3      	b.n	8004a20 <__ssrefill_r+0x22>

08004a38 <__ssvfiscanf_r>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4606      	mov	r6, r0
 8004a42:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004a46:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004a4a:	49b3      	ldr	r1, [pc, #716]	; (8004d18 <__ssvfiscanf_r+0x2e0>)
 8004a4c:	f10d 0804 	add.w	r8, sp, #4
 8004a50:	91a0      	str	r1, [sp, #640]	; 0x280
 8004a52:	49b2      	ldr	r1, [pc, #712]	; (8004d1c <__ssvfiscanf_r+0x2e4>)
 8004a54:	4fb2      	ldr	r7, [pc, #712]	; (8004d20 <__ssvfiscanf_r+0x2e8>)
 8004a56:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8004d24 <__ssvfiscanf_r+0x2ec>
 8004a5a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004a5e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	f892 a000 	ldrb.w	sl, [r2]
 8004a66:	f1ba 0f00 	cmp.w	sl, #0
 8004a6a:	f000 8153 	beq.w	8004d14 <__ssvfiscanf_r+0x2dc>
 8004a6e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8004a72:	1c55      	adds	r5, r2, #1
 8004a74:	f013 0308 	ands.w	r3, r3, #8
 8004a78:	d019      	beq.n	8004aae <__ssvfiscanf_r+0x76>
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	dd0f      	ble.n	8004aa0 <__ssvfiscanf_r+0x68>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	5cba      	ldrb	r2, [r7, r2]
 8004a86:	0712      	lsls	r2, r2, #28
 8004a88:	d401      	bmi.n	8004a8e <__ssvfiscanf_r+0x56>
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	e7e9      	b.n	8004a62 <__ssvfiscanf_r+0x2a>
 8004a8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004a90:	3301      	adds	r3, #1
 8004a92:	3201      	adds	r2, #1
 8004a94:	9245      	str	r2, [sp, #276]	; 0x114
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	6062      	str	r2, [r4, #4]
 8004a9e:	e7ec      	b.n	8004a7a <__ssvfiscanf_r+0x42>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004aa6:	4798      	blx	r3
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d0e9      	beq.n	8004a80 <__ssvfiscanf_r+0x48>
 8004aac:	e7ed      	b.n	8004a8a <__ssvfiscanf_r+0x52>
 8004aae:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8004ab2:	f040 8086 	bne.w	8004bc2 <__ssvfiscanf_r+0x18a>
 8004ab6:	9341      	str	r3, [sp, #260]	; 0x104
 8004ab8:	9343      	str	r3, [sp, #268]	; 0x10c
 8004aba:	7853      	ldrb	r3, [r2, #1]
 8004abc:	2b2a      	cmp	r3, #42	; 0x2a
 8004abe:	bf04      	itt	eq
 8004ac0:	2310      	moveq	r3, #16
 8004ac2:	1c95      	addeq	r5, r2, #2
 8004ac4:	f04f 020a 	mov.w	r2, #10
 8004ac8:	bf08      	it	eq
 8004aca:	9341      	streq	r3, [sp, #260]	; 0x104
 8004acc:	46ab      	mov	fp, r5
 8004ace:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004ad2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d91d      	bls.n	8004b16 <__ssvfiscanf_r+0xde>
 8004ada:	2203      	movs	r2, #3
 8004adc:	4891      	ldr	r0, [pc, #580]	; (8004d24 <__ssvfiscanf_r+0x2ec>)
 8004ade:	f000 fd7f 	bl	80055e0 <memchr>
 8004ae2:	b140      	cbz	r0, 8004af6 <__ssvfiscanf_r+0xbe>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	465d      	mov	r5, fp
 8004ae8:	eba0 0009 	sub.w	r0, r0, r9
 8004aec:	fa03 f000 	lsl.w	r0, r3, r0
 8004af0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004af2:	4318      	orrs	r0, r3
 8004af4:	9041      	str	r0, [sp, #260]	; 0x104
 8004af6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004afa:	2b78      	cmp	r3, #120	; 0x78
 8004afc:	d806      	bhi.n	8004b0c <__ssvfiscanf_r+0xd4>
 8004afe:	2b57      	cmp	r3, #87	; 0x57
 8004b00:	d810      	bhi.n	8004b24 <__ssvfiscanf_r+0xec>
 8004b02:	2b25      	cmp	r3, #37	; 0x25
 8004b04:	d05d      	beq.n	8004bc2 <__ssvfiscanf_r+0x18a>
 8004b06:	d857      	bhi.n	8004bb8 <__ssvfiscanf_r+0x180>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d075      	beq.n	8004bf8 <__ssvfiscanf_r+0x1c0>
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004b10:	230a      	movs	r3, #10
 8004b12:	9342      	str	r3, [sp, #264]	; 0x108
 8004b14:	e082      	b.n	8004c1c <__ssvfiscanf_r+0x1e4>
 8004b16:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004b18:	465d      	mov	r5, fp
 8004b1a:	fb02 1303 	mla	r3, r2, r3, r1
 8004b1e:	3b30      	subs	r3, #48	; 0x30
 8004b20:	9343      	str	r3, [sp, #268]	; 0x10c
 8004b22:	e7d3      	b.n	8004acc <__ssvfiscanf_r+0x94>
 8004b24:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004b28:	2a20      	cmp	r2, #32
 8004b2a:	d8ef      	bhi.n	8004b0c <__ssvfiscanf_r+0xd4>
 8004b2c:	a101      	add	r1, pc, #4	; (adr r1, 8004b34 <__ssvfiscanf_r+0xfc>)
 8004b2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004c07 	.word	0x08004c07
 8004b38:	08004b0d 	.word	0x08004b0d
 8004b3c:	08004b0d 	.word	0x08004b0d
 8004b40:	08004c65 	.word	0x08004c65
 8004b44:	08004b0d 	.word	0x08004b0d
 8004b48:	08004b0d 	.word	0x08004b0d
 8004b4c:	08004b0d 	.word	0x08004b0d
 8004b50:	08004b0d 	.word	0x08004b0d
 8004b54:	08004b0d 	.word	0x08004b0d
 8004b58:	08004b0d 	.word	0x08004b0d
 8004b5c:	08004b0d 	.word	0x08004b0d
 8004b60:	08004c7b 	.word	0x08004c7b
 8004b64:	08004c51 	.word	0x08004c51
 8004b68:	08004bbf 	.word	0x08004bbf
 8004b6c:	08004bbf 	.word	0x08004bbf
 8004b70:	08004bbf 	.word	0x08004bbf
 8004b74:	08004b0d 	.word	0x08004b0d
 8004b78:	08004c55 	.word	0x08004c55
 8004b7c:	08004b0d 	.word	0x08004b0d
 8004b80:	08004b0d 	.word	0x08004b0d
 8004b84:	08004b0d 	.word	0x08004b0d
 8004b88:	08004b0d 	.word	0x08004b0d
 8004b8c:	08004c8b 	.word	0x08004c8b
 8004b90:	08004c5d 	.word	0x08004c5d
 8004b94:	08004bff 	.word	0x08004bff
 8004b98:	08004b0d 	.word	0x08004b0d
 8004b9c:	08004b0d 	.word	0x08004b0d
 8004ba0:	08004c87 	.word	0x08004c87
 8004ba4:	08004b0d 	.word	0x08004b0d
 8004ba8:	08004c51 	.word	0x08004c51
 8004bac:	08004b0d 	.word	0x08004b0d
 8004bb0:	08004b0d 	.word	0x08004b0d
 8004bb4:	08004c07 	.word	0x08004c07
 8004bb8:	3b45      	subs	r3, #69	; 0x45
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d8a6      	bhi.n	8004b0c <__ssvfiscanf_r+0xd4>
 8004bbe:	2305      	movs	r3, #5
 8004bc0:	e02b      	b.n	8004c1a <__ssvfiscanf_r+0x1e2>
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dd0d      	ble.n	8004be4 <__ssvfiscanf_r+0x1ac>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	4552      	cmp	r2, sl
 8004bce:	f040 80a1 	bne.w	8004d14 <__ssvfiscanf_r+0x2dc>
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	6862      	ldr	r2, [r4, #4]
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	3301      	adds	r3, #1
 8004bde:	6062      	str	r2, [r4, #4]
 8004be0:	9345      	str	r3, [sp, #276]	; 0x114
 8004be2:	e752      	b.n	8004a8a <__ssvfiscanf_r+0x52>
 8004be4:	4621      	mov	r1, r4
 8004be6:	4630      	mov	r0, r6
 8004be8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004bea:	4798      	blx	r3
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0eb      	beq.n	8004bc8 <__ssvfiscanf_r+0x190>
 8004bf0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	f040 8084 	bne.w	8004d00 <__ssvfiscanf_r+0x2c8>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e086      	b.n	8004d0c <__ssvfiscanf_r+0x2d4>
 8004bfe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004c00:	f042 0220 	orr.w	r2, r2, #32
 8004c04:	9241      	str	r2, [sp, #260]	; 0x104
 8004c06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0c:	9241      	str	r2, [sp, #260]	; 0x104
 8004c0e:	2210      	movs	r2, #16
 8004c10:	2b6f      	cmp	r3, #111	; 0x6f
 8004c12:	bf34      	ite	cc
 8004c14:	2303      	movcc	r3, #3
 8004c16:	2304      	movcs	r3, #4
 8004c18:	9242      	str	r2, [sp, #264]	; 0x108
 8004c1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dd41      	ble.n	8004ca6 <__ssvfiscanf_r+0x26e>
 8004c22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c24:	0659      	lsls	r1, r3, #25
 8004c26:	d404      	bmi.n	8004c32 <__ssvfiscanf_r+0x1fa>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	781a      	ldrb	r2, [r3, #0]
 8004c2c:	5cba      	ldrb	r2, [r7, r2]
 8004c2e:	0712      	lsls	r2, r2, #28
 8004c30:	d440      	bmi.n	8004cb4 <__ssvfiscanf_r+0x27c>
 8004c32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	dc4f      	bgt.n	8004cd8 <__ssvfiscanf_r+0x2a0>
 8004c38:	466b      	mov	r3, sp
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	a941      	add	r1, sp, #260	; 0x104
 8004c40:	f000 fa0a 	bl	8005058 <_scanf_chars>
 8004c44:	2801      	cmp	r0, #1
 8004c46:	d065      	beq.n	8004d14 <__ssvfiscanf_r+0x2dc>
 8004c48:	2802      	cmp	r0, #2
 8004c4a:	f47f af1e 	bne.w	8004a8a <__ssvfiscanf_r+0x52>
 8004c4e:	e7cf      	b.n	8004bf0 <__ssvfiscanf_r+0x1b8>
 8004c50:	220a      	movs	r2, #10
 8004c52:	e7dd      	b.n	8004c10 <__ssvfiscanf_r+0x1d8>
 8004c54:	2300      	movs	r3, #0
 8004c56:	9342      	str	r3, [sp, #264]	; 0x108
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e7de      	b.n	8004c1a <__ssvfiscanf_r+0x1e2>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	9342      	str	r3, [sp, #264]	; 0x108
 8004c60:	2304      	movs	r3, #4
 8004c62:	e7da      	b.n	8004c1a <__ssvfiscanf_r+0x1e2>
 8004c64:	4629      	mov	r1, r5
 8004c66:	4640      	mov	r0, r8
 8004c68:	f000 fb40 	bl	80052ec <__sccl>
 8004c6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c6e:	4605      	mov	r5, r0
 8004c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c74:	9341      	str	r3, [sp, #260]	; 0x104
 8004c76:	2301      	movs	r3, #1
 8004c78:	e7cf      	b.n	8004c1a <__ssvfiscanf_r+0x1e2>
 8004c7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c80:	9341      	str	r3, [sp, #260]	; 0x104
 8004c82:	2300      	movs	r3, #0
 8004c84:	e7c9      	b.n	8004c1a <__ssvfiscanf_r+0x1e2>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e7c7      	b.n	8004c1a <__ssvfiscanf_r+0x1e2>
 8004c8a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004c8c:	06c3      	lsls	r3, r0, #27
 8004c8e:	f53f aefc 	bmi.w	8004a8a <__ssvfiscanf_r+0x52>
 8004c92:	9b00      	ldr	r3, [sp, #0]
 8004c94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004c96:	1d19      	adds	r1, r3, #4
 8004c98:	9100      	str	r1, [sp, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	07c0      	lsls	r0, r0, #31
 8004c9e:	bf4c      	ite	mi
 8004ca0:	801a      	strhmi	r2, [r3, #0]
 8004ca2:	601a      	strpl	r2, [r3, #0]
 8004ca4:	e6f1      	b.n	8004a8a <__ssvfiscanf_r+0x52>
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4630      	mov	r0, r6
 8004caa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cac:	4798      	blx	r3
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d0b7      	beq.n	8004c22 <__ssvfiscanf_r+0x1ea>
 8004cb2:	e79d      	b.n	8004bf0 <__ssvfiscanf_r+0x1b8>
 8004cb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004cb6:	3201      	adds	r2, #1
 8004cb8:	9245      	str	r2, [sp, #276]	; 0x114
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	2a00      	cmp	r2, #0
 8004cc0:	6062      	str	r2, [r4, #4]
 8004cc2:	dd02      	ble.n	8004cca <__ssvfiscanf_r+0x292>
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	e7ae      	b.n	8004c28 <__ssvfiscanf_r+0x1f0>
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4630      	mov	r0, r6
 8004cce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cd0:	4798      	blx	r3
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0a8      	beq.n	8004c28 <__ssvfiscanf_r+0x1f0>
 8004cd6:	e78b      	b.n	8004bf0 <__ssvfiscanf_r+0x1b8>
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	dc06      	bgt.n	8004cea <__ssvfiscanf_r+0x2b2>
 8004cdc:	466b      	mov	r3, sp
 8004cde:	4622      	mov	r2, r4
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	a941      	add	r1, sp, #260	; 0x104
 8004ce4:	f000 fa10 	bl	8005108 <_scanf_i>
 8004ce8:	e7ac      	b.n	8004c44 <__ssvfiscanf_r+0x20c>
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <__ssvfiscanf_r+0x2f0>)
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f43f aecc 	beq.w	8004a8a <__ssvfiscanf_r+0x52>
 8004cf2:	466b      	mov	r3, sp
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	a941      	add	r1, sp, #260	; 0x104
 8004cfa:	f3af 8000 	nop.w
 8004cfe:	e7a1      	b.n	8004c44 <__ssvfiscanf_r+0x20c>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d06:	bf18      	it	ne
 8004d08:	f04f 30ff 	movne.w	r0, #4294967295
 8004d0c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004d16:	e7f9      	b.n	8004d0c <__ssvfiscanf_r+0x2d4>
 8004d18:	08004985 	.word	0x08004985
 8004d1c:	080049ff 	.word	0x080049ff
 8004d20:	0800781b 	.word	0x0800781b
 8004d24:	080077d2 	.word	0x080077d2
 8004d28:	00000000 	.word	0x00000000

08004d2c <_printf_common>:
 8004d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	4616      	mov	r6, r2
 8004d32:	4699      	mov	r9, r3
 8004d34:	688a      	ldr	r2, [r1, #8]
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	4607      	mov	r7, r0
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	bfb8      	it	lt
 8004d3e:	4613      	movlt	r3, r2
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d46:	460c      	mov	r4, r1
 8004d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d4c:	b10a      	cbz	r2, 8004d52 <_printf_common+0x26>
 8004d4e:	3301      	adds	r3, #1
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	0699      	lsls	r1, r3, #26
 8004d56:	bf42      	ittt	mi
 8004d58:	6833      	ldrmi	r3, [r6, #0]
 8004d5a:	3302      	addmi	r3, #2
 8004d5c:	6033      	strmi	r3, [r6, #0]
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	f015 0506 	ands.w	r5, r5, #6
 8004d64:	d106      	bne.n	8004d74 <_printf_common+0x48>
 8004d66:	f104 0a19 	add.w	sl, r4, #25
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	6832      	ldr	r2, [r6, #0]
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dc28      	bgt.n	8004dc6 <_printf_common+0x9a>
 8004d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d78:	1e13      	subs	r3, r2, #0
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	bf18      	it	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	0692      	lsls	r2, r2, #26
 8004d82:	d42d      	bmi.n	8004de0 <_printf_common+0xb4>
 8004d84:	4649      	mov	r1, r9
 8004d86:	4638      	mov	r0, r7
 8004d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d020      	beq.n	8004dd4 <_printf_common+0xa8>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	68e5      	ldr	r5, [r4, #12]
 8004d96:	f003 0306 	and.w	r3, r3, #6
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	bf18      	it	ne
 8004d9e:	2500      	movne	r5, #0
 8004da0:	6832      	ldr	r2, [r6, #0]
 8004da2:	f04f 0600 	mov.w	r6, #0
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	bf08      	it	eq
 8004daa:	1aad      	subeq	r5, r5, r2
 8004dac:	6922      	ldr	r2, [r4, #16]
 8004dae:	bf08      	it	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	4293      	cmp	r3, r2
 8004db6:	bfc4      	itt	gt
 8004db8:	1a9b      	subgt	r3, r3, r2
 8004dba:	18ed      	addgt	r5, r5, r3
 8004dbc:	341a      	adds	r4, #26
 8004dbe:	42b5      	cmp	r5, r6
 8004dc0:	d11a      	bne.n	8004df8 <_printf_common+0xcc>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e008      	b.n	8004dd8 <_printf_common+0xac>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4652      	mov	r2, sl
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4638      	mov	r0, r7
 8004dce:	47c0      	blx	r8
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d103      	bne.n	8004ddc <_printf_common+0xb0>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ddc:	3501      	adds	r5, #1
 8004dde:	e7c4      	b.n	8004d6a <_printf_common+0x3e>
 8004de0:	2030      	movs	r0, #48	; 0x30
 8004de2:	18e1      	adds	r1, r4, r3
 8004de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dee:	4422      	add	r2, r4
 8004df0:	3302      	adds	r3, #2
 8004df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df6:	e7c5      	b.n	8004d84 <_printf_common+0x58>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	4638      	mov	r0, r7
 8004e00:	47c0      	blx	r8
 8004e02:	3001      	adds	r0, #1
 8004e04:	d0e6      	beq.n	8004dd4 <_printf_common+0xa8>
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7d9      	b.n	8004dbe <_printf_common+0x92>
	...

08004e0c <_printf_i>:
 8004e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	460c      	mov	r4, r1
 8004e12:	7e27      	ldrb	r7, [r4, #24]
 8004e14:	4691      	mov	r9, r2
 8004e16:	2f78      	cmp	r7, #120	; 0x78
 8004e18:	4680      	mov	r8, r0
 8004e1a:	469a      	mov	sl, r3
 8004e1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e22:	d807      	bhi.n	8004e34 <_printf_i+0x28>
 8004e24:	2f62      	cmp	r7, #98	; 0x62
 8004e26:	d80a      	bhi.n	8004e3e <_printf_i+0x32>
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	f000 80d9 	beq.w	8004fe0 <_printf_i+0x1d4>
 8004e2e:	2f58      	cmp	r7, #88	; 0x58
 8004e30:	f000 80a4 	beq.w	8004f7c <_printf_i+0x170>
 8004e34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e3c:	e03a      	b.n	8004eb4 <_printf_i+0xa8>
 8004e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e42:	2b15      	cmp	r3, #21
 8004e44:	d8f6      	bhi.n	8004e34 <_printf_i+0x28>
 8004e46:	a001      	add	r0, pc, #4	; (adr r0, 8004e4c <_printf_i+0x40>)
 8004e48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e4c:	08004ea5 	.word	0x08004ea5
 8004e50:	08004eb9 	.word	0x08004eb9
 8004e54:	08004e35 	.word	0x08004e35
 8004e58:	08004e35 	.word	0x08004e35
 8004e5c:	08004e35 	.word	0x08004e35
 8004e60:	08004e35 	.word	0x08004e35
 8004e64:	08004eb9 	.word	0x08004eb9
 8004e68:	08004e35 	.word	0x08004e35
 8004e6c:	08004e35 	.word	0x08004e35
 8004e70:	08004e35 	.word	0x08004e35
 8004e74:	08004e35 	.word	0x08004e35
 8004e78:	08004fc7 	.word	0x08004fc7
 8004e7c:	08004ee9 	.word	0x08004ee9
 8004e80:	08004fa9 	.word	0x08004fa9
 8004e84:	08004e35 	.word	0x08004e35
 8004e88:	08004e35 	.word	0x08004e35
 8004e8c:	08004fe9 	.word	0x08004fe9
 8004e90:	08004e35 	.word	0x08004e35
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004e35 	.word	0x08004e35
 8004e9c:	08004e35 	.word	0x08004e35
 8004ea0:	08004fb1 	.word	0x08004fb1
 8004ea4:	680b      	ldr	r3, [r1, #0]
 8004ea6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	600a      	str	r2, [r1, #0]
 8004eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0a4      	b.n	8005002 <_printf_i+0x1f6>
 8004eb8:	6825      	ldr	r5, [r4, #0]
 8004eba:	6808      	ldr	r0, [r1, #0]
 8004ebc:	062e      	lsls	r6, r5, #24
 8004ebe:	f100 0304 	add.w	r3, r0, #4
 8004ec2:	d50a      	bpl.n	8004eda <_printf_i+0xce>
 8004ec4:	6805      	ldr	r5, [r0, #0]
 8004ec6:	600b      	str	r3, [r1, #0]
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	da03      	bge.n	8004ed4 <_printf_i+0xc8>
 8004ecc:	232d      	movs	r3, #45	; 0x2d
 8004ece:	426d      	negs	r5, r5
 8004ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed4:	230a      	movs	r3, #10
 8004ed6:	485e      	ldr	r0, [pc, #376]	; (8005050 <_printf_i+0x244>)
 8004ed8:	e019      	b.n	8004f0e <_printf_i+0x102>
 8004eda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ede:	6805      	ldr	r5, [r0, #0]
 8004ee0:	600b      	str	r3, [r1, #0]
 8004ee2:	bf18      	it	ne
 8004ee4:	b22d      	sxthne	r5, r5
 8004ee6:	e7ef      	b.n	8004ec8 <_printf_i+0xbc>
 8004ee8:	680b      	ldr	r3, [r1, #0]
 8004eea:	6825      	ldr	r5, [r4, #0]
 8004eec:	1d18      	adds	r0, r3, #4
 8004eee:	6008      	str	r0, [r1, #0]
 8004ef0:	0628      	lsls	r0, r5, #24
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0xec>
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_printf_i+0xf2>
 8004ef8:	0669      	lsls	r1, r5, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0xe8>
 8004efc:	881d      	ldrh	r5, [r3, #0]
 8004efe:	2f6f      	cmp	r7, #111	; 0x6f
 8004f00:	bf0c      	ite	eq
 8004f02:	2308      	moveq	r3, #8
 8004f04:	230a      	movne	r3, #10
 8004f06:	4852      	ldr	r0, [pc, #328]	; (8005050 <_printf_i+0x244>)
 8004f08:	2100      	movs	r1, #0
 8004f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f0e:	6866      	ldr	r6, [r4, #4]
 8004f10:	2e00      	cmp	r6, #0
 8004f12:	bfa8      	it	ge
 8004f14:	6821      	ldrge	r1, [r4, #0]
 8004f16:	60a6      	str	r6, [r4, #8]
 8004f18:	bfa4      	itt	ge
 8004f1a:	f021 0104 	bicge.w	r1, r1, #4
 8004f1e:	6021      	strge	r1, [r4, #0]
 8004f20:	b90d      	cbnz	r5, 8004f26 <_printf_i+0x11a>
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d04d      	beq.n	8004fc2 <_printf_i+0x1b6>
 8004f26:	4616      	mov	r6, r2
 8004f28:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f2c:	fb03 5711 	mls	r7, r3, r1, r5
 8004f30:	5dc7      	ldrb	r7, [r0, r7]
 8004f32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f36:	462f      	mov	r7, r5
 8004f38:	42bb      	cmp	r3, r7
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	d9f4      	bls.n	8004f28 <_printf_i+0x11c>
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d10b      	bne.n	8004f5a <_printf_i+0x14e>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	07df      	lsls	r7, r3, #31
 8004f46:	d508      	bpl.n	8004f5a <_printf_i+0x14e>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	6861      	ldr	r1, [r4, #4]
 8004f4c:	4299      	cmp	r1, r3
 8004f4e:	bfde      	ittt	le
 8004f50:	2330      	movle	r3, #48	; 0x30
 8004f52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f5a:	1b92      	subs	r2, r2, r6
 8004f5c:	6122      	str	r2, [r4, #16]
 8004f5e:	464b      	mov	r3, r9
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f8cd a000 	str.w	sl, [sp]
 8004f68:	aa03      	add	r2, sp, #12
 8004f6a:	f7ff fedf 	bl	8004d2c <_printf_common>
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d14c      	bne.n	800500c <_printf_i+0x200>
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	b004      	add	sp, #16
 8004f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7c:	4834      	ldr	r0, [pc, #208]	; (8005050 <_printf_i+0x244>)
 8004f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f82:	680e      	ldr	r6, [r1, #0]
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f8a:	061f      	lsls	r7, r3, #24
 8004f8c:	600e      	str	r6, [r1, #0]
 8004f8e:	d514      	bpl.n	8004fba <_printf_i+0x1ae>
 8004f90:	07d9      	lsls	r1, r3, #31
 8004f92:	bf44      	itt	mi
 8004f94:	f043 0320 	orrmi.w	r3, r3, #32
 8004f98:	6023      	strmi	r3, [r4, #0]
 8004f9a:	b91d      	cbnz	r5, 8004fa4 <_printf_i+0x198>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	f023 0320 	bic.w	r3, r3, #32
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	e7af      	b.n	8004f08 <_printf_i+0xfc>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	2378      	movs	r3, #120	; 0x78
 8004fb2:	4828      	ldr	r0, [pc, #160]	; (8005054 <_printf_i+0x248>)
 8004fb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fb8:	e7e3      	b.n	8004f82 <_printf_i+0x176>
 8004fba:	065e      	lsls	r6, r3, #25
 8004fbc:	bf48      	it	mi
 8004fbe:	b2ad      	uxthmi	r5, r5
 8004fc0:	e7e6      	b.n	8004f90 <_printf_i+0x184>
 8004fc2:	4616      	mov	r6, r2
 8004fc4:	e7bb      	b.n	8004f3e <_printf_i+0x132>
 8004fc6:	680b      	ldr	r3, [r1, #0]
 8004fc8:	6826      	ldr	r6, [r4, #0]
 8004fca:	1d1d      	adds	r5, r3, #4
 8004fcc:	6960      	ldr	r0, [r4, #20]
 8004fce:	600d      	str	r5, [r1, #0]
 8004fd0:	0635      	lsls	r5, r6, #24
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	d501      	bpl.n	8004fda <_printf_i+0x1ce>
 8004fd6:	6018      	str	r0, [r3, #0]
 8004fd8:	e002      	b.n	8004fe0 <_printf_i+0x1d4>
 8004fda:	0671      	lsls	r1, r6, #25
 8004fdc:	d5fb      	bpl.n	8004fd6 <_printf_i+0x1ca>
 8004fde:	8018      	strh	r0, [r3, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4616      	mov	r6, r2
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	e7ba      	b.n	8004f5e <_printf_i+0x152>
 8004fe8:	680b      	ldr	r3, [r1, #0]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	600a      	str	r2, [r1, #0]
 8004fee:	681e      	ldr	r6, [r3, #0]
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	f000 faf3 	bl	80055e0 <memchr>
 8004ffa:	b108      	cbz	r0, 8005000 <_printf_i+0x1f4>
 8004ffc:	1b80      	subs	r0, r0, r6
 8004ffe:	6060      	str	r0, [r4, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500a:	e7a8      	b.n	8004f5e <_printf_i+0x152>
 800500c:	4632      	mov	r2, r6
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	47d0      	blx	sl
 8005016:	3001      	adds	r0, #1
 8005018:	d0ab      	beq.n	8004f72 <_printf_i+0x166>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	079b      	lsls	r3, r3, #30
 800501e:	d413      	bmi.n	8005048 <_printf_i+0x23c>
 8005020:	68e0      	ldr	r0, [r4, #12]
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	4298      	cmp	r0, r3
 8005026:	bfb8      	it	lt
 8005028:	4618      	movlt	r0, r3
 800502a:	e7a4      	b.n	8004f76 <_printf_i+0x16a>
 800502c:	2301      	movs	r3, #1
 800502e:	4632      	mov	r2, r6
 8005030:	4649      	mov	r1, r9
 8005032:	4640      	mov	r0, r8
 8005034:	47d0      	blx	sl
 8005036:	3001      	adds	r0, #1
 8005038:	d09b      	beq.n	8004f72 <_printf_i+0x166>
 800503a:	3501      	adds	r5, #1
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	9903      	ldr	r1, [sp, #12]
 8005040:	1a5b      	subs	r3, r3, r1
 8005042:	42ab      	cmp	r3, r5
 8005044:	dcf2      	bgt.n	800502c <_printf_i+0x220>
 8005046:	e7eb      	b.n	8005020 <_printf_i+0x214>
 8005048:	2500      	movs	r5, #0
 800504a:	f104 0619 	add.w	r6, r4, #25
 800504e:	e7f5      	b.n	800503c <_printf_i+0x230>
 8005050:	080077dd 	.word	0x080077dd
 8005054:	080077ee 	.word	0x080077ee

08005058 <_scanf_chars>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	4615      	mov	r5, r2
 800505e:	688a      	ldr	r2, [r1, #8]
 8005060:	4680      	mov	r8, r0
 8005062:	460c      	mov	r4, r1
 8005064:	b932      	cbnz	r2, 8005074 <_scanf_chars+0x1c>
 8005066:	698a      	ldr	r2, [r1, #24]
 8005068:	2a00      	cmp	r2, #0
 800506a:	bf0c      	ite	eq
 800506c:	2201      	moveq	r2, #1
 800506e:	f04f 32ff 	movne.w	r2, #4294967295
 8005072:	608a      	str	r2, [r1, #8]
 8005074:	2700      	movs	r7, #0
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005104 <_scanf_chars+0xac>
 800507c:	06d1      	lsls	r1, r2, #27
 800507e:	bf5f      	itttt	pl
 8005080:	681a      	ldrpl	r2, [r3, #0]
 8005082:	1d11      	addpl	r1, r2, #4
 8005084:	6019      	strpl	r1, [r3, #0]
 8005086:	6816      	ldrpl	r6, [r2, #0]
 8005088:	69a0      	ldr	r0, [r4, #24]
 800508a:	b188      	cbz	r0, 80050b0 <_scanf_chars+0x58>
 800508c:	2801      	cmp	r0, #1
 800508e:	d107      	bne.n	80050a0 <_scanf_chars+0x48>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	781a      	ldrb	r2, [r3, #0]
 8005094:	6963      	ldr	r3, [r4, #20]
 8005096:	5c9b      	ldrb	r3, [r3, r2]
 8005098:	b953      	cbnz	r3, 80050b0 <_scanf_chars+0x58>
 800509a:	bb27      	cbnz	r7, 80050e6 <_scanf_chars+0x8e>
 800509c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050a0:	2802      	cmp	r0, #2
 80050a2:	d120      	bne.n	80050e6 <_scanf_chars+0x8e>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	d41a      	bmi.n	80050e6 <_scanf_chars+0x8e>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	3701      	adds	r7, #1
 80050b4:	06da      	lsls	r2, r3, #27
 80050b6:	bf5e      	ittt	pl
 80050b8:	682b      	ldrpl	r3, [r5, #0]
 80050ba:	781b      	ldrbpl	r3, [r3, #0]
 80050bc:	f806 3b01 	strbpl.w	r3, [r6], #1
 80050c0:	682a      	ldr	r2, [r5, #0]
 80050c2:	686b      	ldr	r3, [r5, #4]
 80050c4:	3201      	adds	r2, #1
 80050c6:	602a      	str	r2, [r5, #0]
 80050c8:	68a2      	ldr	r2, [r4, #8]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	3a01      	subs	r2, #1
 80050ce:	606b      	str	r3, [r5, #4]
 80050d0:	60a2      	str	r2, [r4, #8]
 80050d2:	b142      	cbz	r2, 80050e6 <_scanf_chars+0x8e>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	dcd7      	bgt.n	8005088 <_scanf_chars+0x30>
 80050d8:	4629      	mov	r1, r5
 80050da:	4640      	mov	r0, r8
 80050dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050e0:	4798      	blx	r3
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d0d0      	beq.n	8005088 <_scanf_chars+0x30>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	f013 0310 	ands.w	r3, r3, #16
 80050ec:	d105      	bne.n	80050fa <_scanf_chars+0xa2>
 80050ee:	68e2      	ldr	r2, [r4, #12]
 80050f0:	3201      	adds	r2, #1
 80050f2:	60e2      	str	r2, [r4, #12]
 80050f4:	69a2      	ldr	r2, [r4, #24]
 80050f6:	b102      	cbz	r2, 80050fa <_scanf_chars+0xa2>
 80050f8:	7033      	strb	r3, [r6, #0]
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	2000      	movs	r0, #0
 80050fe:	441f      	add	r7, r3
 8005100:	6127      	str	r7, [r4, #16]
 8005102:	e7cb      	b.n	800509c <_scanf_chars+0x44>
 8005104:	0800781b 	.word	0x0800781b

08005108 <_scanf_i>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	460c      	mov	r4, r1
 800510e:	4698      	mov	r8, r3
 8005110:	4b72      	ldr	r3, [pc, #456]	; (80052dc <_scanf_i+0x1d4>)
 8005112:	b087      	sub	sp, #28
 8005114:	4682      	mov	sl, r0
 8005116:	4616      	mov	r6, r2
 8005118:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800511c:	ab03      	add	r3, sp, #12
 800511e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005122:	4b6f      	ldr	r3, [pc, #444]	; (80052e0 <_scanf_i+0x1d8>)
 8005124:	69a1      	ldr	r1, [r4, #24]
 8005126:	4a6f      	ldr	r2, [pc, #444]	; (80052e4 <_scanf_i+0x1dc>)
 8005128:	4627      	mov	r7, r4
 800512a:	2903      	cmp	r1, #3
 800512c:	bf18      	it	ne
 800512e:	461a      	movne	r2, r3
 8005130:	68a3      	ldr	r3, [r4, #8]
 8005132:	9201      	str	r2, [sp, #4]
 8005134:	1e5a      	subs	r2, r3, #1
 8005136:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800513a:	bf81      	itttt	hi
 800513c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005140:	eb03 0905 	addhi.w	r9, r3, r5
 8005144:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005148:	60a3      	strhi	r3, [r4, #8]
 800514a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800514e:	bf98      	it	ls
 8005150:	f04f 0900 	movls.w	r9, #0
 8005154:	463d      	mov	r5, r7
 8005156:	f04f 0b00 	mov.w	fp, #0
 800515a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	6831      	ldr	r1, [r6, #0]
 8005162:	ab03      	add	r3, sp, #12
 8005164:	2202      	movs	r2, #2
 8005166:	7809      	ldrb	r1, [r1, #0]
 8005168:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800516c:	f000 fa38 	bl	80055e0 <memchr>
 8005170:	b328      	cbz	r0, 80051be <_scanf_i+0xb6>
 8005172:	f1bb 0f01 	cmp.w	fp, #1
 8005176:	d159      	bne.n	800522c <_scanf_i+0x124>
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	b92a      	cbnz	r2, 8005188 <_scanf_i+0x80>
 800517c:	2308      	movs	r3, #8
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005186:	6022      	str	r2, [r4, #0]
 8005188:	6822      	ldr	r2, [r4, #0]
 800518a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	68a2      	ldr	r2, [r4, #8]
 8005192:	1e51      	subs	r1, r2, #1
 8005194:	60a1      	str	r1, [r4, #8]
 8005196:	b192      	cbz	r2, 80051be <_scanf_i+0xb6>
 8005198:	6832      	ldr	r2, [r6, #0]
 800519a:	1c51      	adds	r1, r2, #1
 800519c:	6031      	str	r1, [r6, #0]
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	f805 2b01 	strb.w	r2, [r5], #1
 80051a4:	6872      	ldr	r2, [r6, #4]
 80051a6:	3a01      	subs	r2, #1
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	6072      	str	r2, [r6, #4]
 80051ac:	dc07      	bgt.n	80051be <_scanf_i+0xb6>
 80051ae:	4631      	mov	r1, r6
 80051b0:	4650      	mov	r0, sl
 80051b2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80051b6:	4790      	blx	r2
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f040 8085 	bne.w	80052c8 <_scanf_i+0x1c0>
 80051be:	f10b 0b01 	add.w	fp, fp, #1
 80051c2:	f1bb 0f03 	cmp.w	fp, #3
 80051c6:	d1cb      	bne.n	8005160 <_scanf_i+0x58>
 80051c8:	6863      	ldr	r3, [r4, #4]
 80051ca:	b90b      	cbnz	r3, 80051d0 <_scanf_i+0xc8>
 80051cc:	230a      	movs	r3, #10
 80051ce:	6063      	str	r3, [r4, #4]
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	4945      	ldr	r1, [pc, #276]	; (80052e8 <_scanf_i+0x1e0>)
 80051d4:	6960      	ldr	r0, [r4, #20]
 80051d6:	1ac9      	subs	r1, r1, r3
 80051d8:	f000 f888 	bl	80052ec <__sccl>
 80051dc:	f04f 0b00 	mov.w	fp, #0
 80051e0:	68a3      	ldr	r3, [r4, #8]
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d03d      	beq.n	8005264 <_scanf_i+0x15c>
 80051e8:	6831      	ldr	r1, [r6, #0]
 80051ea:	6960      	ldr	r0, [r4, #20]
 80051ec:	f891 c000 	ldrb.w	ip, [r1]
 80051f0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d035      	beq.n	8005264 <_scanf_i+0x15c>
 80051f8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80051fc:	d124      	bne.n	8005248 <_scanf_i+0x140>
 80051fe:	0510      	lsls	r0, r2, #20
 8005200:	d522      	bpl.n	8005248 <_scanf_i+0x140>
 8005202:	f10b 0b01 	add.w	fp, fp, #1
 8005206:	f1b9 0f00 	cmp.w	r9, #0
 800520a:	d003      	beq.n	8005214 <_scanf_i+0x10c>
 800520c:	3301      	adds	r3, #1
 800520e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005212:	60a3      	str	r3, [r4, #8]
 8005214:	6873      	ldr	r3, [r6, #4]
 8005216:	3b01      	subs	r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	6073      	str	r3, [r6, #4]
 800521c:	dd1b      	ble.n	8005256 <_scanf_i+0x14e>
 800521e:	6833      	ldr	r3, [r6, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	6033      	str	r3, [r6, #0]
 8005224:	68a3      	ldr	r3, [r4, #8]
 8005226:	3b01      	subs	r3, #1
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	e7d9      	b.n	80051e0 <_scanf_i+0xd8>
 800522c:	f1bb 0f02 	cmp.w	fp, #2
 8005230:	d1ae      	bne.n	8005190 <_scanf_i+0x88>
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005238:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800523c:	d1bf      	bne.n	80051be <_scanf_i+0xb6>
 800523e:	2310      	movs	r3, #16
 8005240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	e7a2      	b.n	800518e <_scanf_i+0x86>
 8005248:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800524c:	6022      	str	r2, [r4, #0]
 800524e:	780b      	ldrb	r3, [r1, #0]
 8005250:	f805 3b01 	strb.w	r3, [r5], #1
 8005254:	e7de      	b.n	8005214 <_scanf_i+0x10c>
 8005256:	4631      	mov	r1, r6
 8005258:	4650      	mov	r0, sl
 800525a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800525e:	4798      	blx	r3
 8005260:	2800      	cmp	r0, #0
 8005262:	d0df      	beq.n	8005224 <_scanf_i+0x11c>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	05d9      	lsls	r1, r3, #23
 8005268:	d50d      	bpl.n	8005286 <_scanf_i+0x17e>
 800526a:	42bd      	cmp	r5, r7
 800526c:	d909      	bls.n	8005282 <_scanf_i+0x17a>
 800526e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005272:	4632      	mov	r2, r6
 8005274:	4650      	mov	r0, sl
 8005276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800527a:	f105 39ff 	add.w	r9, r5, #4294967295
 800527e:	4798      	blx	r3
 8005280:	464d      	mov	r5, r9
 8005282:	42bd      	cmp	r5, r7
 8005284:	d028      	beq.n	80052d8 <_scanf_i+0x1d0>
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	f012 0210 	ands.w	r2, r2, #16
 800528c:	d113      	bne.n	80052b6 <_scanf_i+0x1ae>
 800528e:	702a      	strb	r2, [r5, #0]
 8005290:	4639      	mov	r1, r7
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	4650      	mov	r0, sl
 8005296:	9e01      	ldr	r6, [sp, #4]
 8005298:	47b0      	blx	r6
 800529a:	f8d8 3000 	ldr.w	r3, [r8]
 800529e:	6821      	ldr	r1, [r4, #0]
 80052a0:	1d1a      	adds	r2, r3, #4
 80052a2:	f8c8 2000 	str.w	r2, [r8]
 80052a6:	f011 0f20 	tst.w	r1, #32
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	d00f      	beq.n	80052ce <_scanf_i+0x1c6>
 80052ae:	6018      	str	r0, [r3, #0]
 80052b0:	68e3      	ldr	r3, [r4, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60e3      	str	r3, [r4, #12]
 80052b6:	2000      	movs	r0, #0
 80052b8:	1bed      	subs	r5, r5, r7
 80052ba:	44ab      	add	fp, r5
 80052bc:	6925      	ldr	r5, [r4, #16]
 80052be:	445d      	add	r5, fp
 80052c0:	6125      	str	r5, [r4, #16]
 80052c2:	b007      	add	sp, #28
 80052c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c8:	f04f 0b00 	mov.w	fp, #0
 80052cc:	e7ca      	b.n	8005264 <_scanf_i+0x15c>
 80052ce:	07ca      	lsls	r2, r1, #31
 80052d0:	bf4c      	ite	mi
 80052d2:	8018      	strhmi	r0, [r3, #0]
 80052d4:	6018      	strpl	r0, [r3, #0]
 80052d6:	e7eb      	b.n	80052b0 <_scanf_i+0x1a8>
 80052d8:	2001      	movs	r0, #1
 80052da:	e7f2      	b.n	80052c2 <_scanf_i+0x1ba>
 80052dc:	080077a8 	.word	0x080077a8
 80052e0:	08005569 	.word	0x08005569
 80052e4:	0800546d 	.word	0x0800546d
 80052e8:	08007818 	.word	0x08007818

080052ec <__sccl>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	780b      	ldrb	r3, [r1, #0]
 80052f0:	4604      	mov	r4, r0
 80052f2:	2b5e      	cmp	r3, #94	; 0x5e
 80052f4:	bf13      	iteet	ne
 80052f6:	2200      	movne	r2, #0
 80052f8:	2201      	moveq	r2, #1
 80052fa:	784b      	ldrbeq	r3, [r1, #1]
 80052fc:	1c48      	addne	r0, r1, #1
 80052fe:	bf08      	it	eq
 8005300:	1c88      	addeq	r0, r1, #2
 8005302:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005306:	1e61      	subs	r1, r4, #1
 8005308:	f801 2f01 	strb.w	r2, [r1, #1]!
 800530c:	42a9      	cmp	r1, r5
 800530e:	d1fb      	bne.n	8005308 <__sccl+0x1c>
 8005310:	b90b      	cbnz	r3, 8005316 <__sccl+0x2a>
 8005312:	3801      	subs	r0, #1
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	f082 0101 	eor.w	r1, r2, #1
 800531a:	54e1      	strb	r1, [r4, r3]
 800531c:	1c42      	adds	r2, r0, #1
 800531e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005322:	4610      	mov	r0, r2
 8005324:	2d2d      	cmp	r5, #45	; 0x2d
 8005326:	f102 36ff 	add.w	r6, r2, #4294967295
 800532a:	d006      	beq.n	800533a <__sccl+0x4e>
 800532c:	2d5d      	cmp	r5, #93	; 0x5d
 800532e:	d0f1      	beq.n	8005314 <__sccl+0x28>
 8005330:	b90d      	cbnz	r5, 8005336 <__sccl+0x4a>
 8005332:	4630      	mov	r0, r6
 8005334:	e7ee      	b.n	8005314 <__sccl+0x28>
 8005336:	462b      	mov	r3, r5
 8005338:	e7ef      	b.n	800531a <__sccl+0x2e>
 800533a:	7816      	ldrb	r6, [r2, #0]
 800533c:	2e5d      	cmp	r6, #93	; 0x5d
 800533e:	d0fa      	beq.n	8005336 <__sccl+0x4a>
 8005340:	42b3      	cmp	r3, r6
 8005342:	dcf8      	bgt.n	8005336 <__sccl+0x4a>
 8005344:	4618      	mov	r0, r3
 8005346:	3001      	adds	r0, #1
 8005348:	4286      	cmp	r6, r0
 800534a:	5421      	strb	r1, [r4, r0]
 800534c:	dcfb      	bgt.n	8005346 <__sccl+0x5a>
 800534e:	43d8      	mvns	r0, r3
 8005350:	4430      	add	r0, r6
 8005352:	42b3      	cmp	r3, r6
 8005354:	bfa8      	it	ge
 8005356:	2000      	movge	r0, #0
 8005358:	1c5d      	adds	r5, r3, #1
 800535a:	182b      	adds	r3, r5, r0
 800535c:	3202      	adds	r2, #2
 800535e:	e7de      	b.n	800531e <__sccl+0x32>

08005360 <_strtol_l.isra.0>:
 8005360:	2b01      	cmp	r3, #1
 8005362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005366:	4686      	mov	lr, r0
 8005368:	d001      	beq.n	800536e <_strtol_l.isra.0+0xe>
 800536a:	2b24      	cmp	r3, #36	; 0x24
 800536c:	d906      	bls.n	800537c <_strtol_l.isra.0+0x1c>
 800536e:	f7ff f92f 	bl	80045d0 <__errno>
 8005372:	2316      	movs	r3, #22
 8005374:	6003      	str	r3, [r0, #0]
 8005376:	2000      	movs	r0, #0
 8005378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537c:	468c      	mov	ip, r1
 800537e:	4e3a      	ldr	r6, [pc, #232]	; (8005468 <_strtol_l.isra.0+0x108>)
 8005380:	4660      	mov	r0, ip
 8005382:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005386:	5da5      	ldrb	r5, [r4, r6]
 8005388:	f015 0508 	ands.w	r5, r5, #8
 800538c:	d1f8      	bne.n	8005380 <_strtol_l.isra.0+0x20>
 800538e:	2c2d      	cmp	r4, #45	; 0x2d
 8005390:	d133      	bne.n	80053fa <_strtol_l.isra.0+0x9a>
 8005392:	f04f 0801 	mov.w	r8, #1
 8005396:	f89c 4000 	ldrb.w	r4, [ip]
 800539a:	f100 0c02 	add.w	ip, r0, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d05d      	beq.n	800545e <_strtol_l.isra.0+0xfe>
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d10c      	bne.n	80053c0 <_strtol_l.isra.0+0x60>
 80053a6:	2c30      	cmp	r4, #48	; 0x30
 80053a8:	d10a      	bne.n	80053c0 <_strtol_l.isra.0+0x60>
 80053aa:	f89c 0000 	ldrb.w	r0, [ip]
 80053ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80053b2:	2858      	cmp	r0, #88	; 0x58
 80053b4:	d14e      	bne.n	8005454 <_strtol_l.isra.0+0xf4>
 80053b6:	2310      	movs	r3, #16
 80053b8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80053bc:	f10c 0c02 	add.w	ip, ip, #2
 80053c0:	2500      	movs	r5, #0
 80053c2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80053c6:	3f01      	subs	r7, #1
 80053c8:	fbb7 f9f3 	udiv	r9, r7, r3
 80053cc:	4628      	mov	r0, r5
 80053ce:	fb03 7a19 	mls	sl, r3, r9, r7
 80053d2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80053d6:	2e09      	cmp	r6, #9
 80053d8:	d818      	bhi.n	800540c <_strtol_l.isra.0+0xac>
 80053da:	4634      	mov	r4, r6
 80053dc:	42a3      	cmp	r3, r4
 80053de:	dd24      	ble.n	800542a <_strtol_l.isra.0+0xca>
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	db1f      	blt.n	8005424 <_strtol_l.isra.0+0xc4>
 80053e4:	4581      	cmp	r9, r0
 80053e6:	d31d      	bcc.n	8005424 <_strtol_l.isra.0+0xc4>
 80053e8:	d101      	bne.n	80053ee <_strtol_l.isra.0+0x8e>
 80053ea:	45a2      	cmp	sl, r4
 80053ec:	db1a      	blt.n	8005424 <_strtol_l.isra.0+0xc4>
 80053ee:	2501      	movs	r5, #1
 80053f0:	fb00 4003 	mla	r0, r0, r3, r4
 80053f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80053f8:	e7eb      	b.n	80053d2 <_strtol_l.isra.0+0x72>
 80053fa:	2c2b      	cmp	r4, #43	; 0x2b
 80053fc:	bf08      	it	eq
 80053fe:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005402:	46a8      	mov	r8, r5
 8005404:	bf08      	it	eq
 8005406:	f100 0c02 	addeq.w	ip, r0, #2
 800540a:	e7c8      	b.n	800539e <_strtol_l.isra.0+0x3e>
 800540c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005410:	2e19      	cmp	r6, #25
 8005412:	d801      	bhi.n	8005418 <_strtol_l.isra.0+0xb8>
 8005414:	3c37      	subs	r4, #55	; 0x37
 8005416:	e7e1      	b.n	80053dc <_strtol_l.isra.0+0x7c>
 8005418:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800541c:	2e19      	cmp	r6, #25
 800541e:	d804      	bhi.n	800542a <_strtol_l.isra.0+0xca>
 8005420:	3c57      	subs	r4, #87	; 0x57
 8005422:	e7db      	b.n	80053dc <_strtol_l.isra.0+0x7c>
 8005424:	f04f 35ff 	mov.w	r5, #4294967295
 8005428:	e7e4      	b.n	80053f4 <_strtol_l.isra.0+0x94>
 800542a:	2d00      	cmp	r5, #0
 800542c:	da08      	bge.n	8005440 <_strtol_l.isra.0+0xe0>
 800542e:	2322      	movs	r3, #34	; 0x22
 8005430:	4638      	mov	r0, r7
 8005432:	f8ce 3000 	str.w	r3, [lr]
 8005436:	2a00      	cmp	r2, #0
 8005438:	d09e      	beq.n	8005378 <_strtol_l.isra.0+0x18>
 800543a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800543e:	e007      	b.n	8005450 <_strtol_l.isra.0+0xf0>
 8005440:	f1b8 0f00 	cmp.w	r8, #0
 8005444:	d000      	beq.n	8005448 <_strtol_l.isra.0+0xe8>
 8005446:	4240      	negs	r0, r0
 8005448:	2a00      	cmp	r2, #0
 800544a:	d095      	beq.n	8005378 <_strtol_l.isra.0+0x18>
 800544c:	2d00      	cmp	r5, #0
 800544e:	d1f4      	bne.n	800543a <_strtol_l.isra.0+0xda>
 8005450:	6011      	str	r1, [r2, #0]
 8005452:	e791      	b.n	8005378 <_strtol_l.isra.0+0x18>
 8005454:	2430      	movs	r4, #48	; 0x30
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1b2      	bne.n	80053c0 <_strtol_l.isra.0+0x60>
 800545a:	2308      	movs	r3, #8
 800545c:	e7b0      	b.n	80053c0 <_strtol_l.isra.0+0x60>
 800545e:	2c30      	cmp	r4, #48	; 0x30
 8005460:	d0a3      	beq.n	80053aa <_strtol_l.isra.0+0x4a>
 8005462:	230a      	movs	r3, #10
 8005464:	e7ac      	b.n	80053c0 <_strtol_l.isra.0+0x60>
 8005466:	bf00      	nop
 8005468:	0800781b 	.word	0x0800781b

0800546c <_strtol_r>:
 800546c:	f7ff bf78 	b.w	8005360 <_strtol_l.isra.0>

08005470 <_strtoul_l.isra.0>:
 8005470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005474:	468c      	mov	ip, r1
 8005476:	4686      	mov	lr, r0
 8005478:	4e3a      	ldr	r6, [pc, #232]	; (8005564 <_strtoul_l.isra.0+0xf4>)
 800547a:	4660      	mov	r0, ip
 800547c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005480:	5da5      	ldrb	r5, [r4, r6]
 8005482:	f015 0508 	ands.w	r5, r5, #8
 8005486:	d1f8      	bne.n	800547a <_strtoul_l.isra.0+0xa>
 8005488:	2c2d      	cmp	r4, #45	; 0x2d
 800548a:	d134      	bne.n	80054f6 <_strtoul_l.isra.0+0x86>
 800548c:	f04f 0801 	mov.w	r8, #1
 8005490:	f89c 4000 	ldrb.w	r4, [ip]
 8005494:	f100 0c02 	add.w	ip, r0, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05e      	beq.n	800555a <_strtoul_l.isra.0+0xea>
 800549c:	2b10      	cmp	r3, #16
 800549e:	d10c      	bne.n	80054ba <_strtoul_l.isra.0+0x4a>
 80054a0:	2c30      	cmp	r4, #48	; 0x30
 80054a2:	d10a      	bne.n	80054ba <_strtoul_l.isra.0+0x4a>
 80054a4:	f89c 0000 	ldrb.w	r0, [ip]
 80054a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80054ac:	2858      	cmp	r0, #88	; 0x58
 80054ae:	d14f      	bne.n	8005550 <_strtoul_l.isra.0+0xe0>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80054b6:	f10c 0c02 	add.w	ip, ip, #2
 80054ba:	f04f 37ff 	mov.w	r7, #4294967295
 80054be:	fbb7 f7f3 	udiv	r7, r7, r3
 80054c2:	2500      	movs	r5, #0
 80054c4:	fb03 f907 	mul.w	r9, r3, r7
 80054c8:	4628      	mov	r0, r5
 80054ca:	ea6f 0909 	mvn.w	r9, r9
 80054ce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80054d2:	2e09      	cmp	r6, #9
 80054d4:	d818      	bhi.n	8005508 <_strtoul_l.isra.0+0x98>
 80054d6:	4634      	mov	r4, r6
 80054d8:	42a3      	cmp	r3, r4
 80054da:	dd24      	ble.n	8005526 <_strtoul_l.isra.0+0xb6>
 80054dc:	2d00      	cmp	r5, #0
 80054de:	db1f      	blt.n	8005520 <_strtoul_l.isra.0+0xb0>
 80054e0:	4287      	cmp	r7, r0
 80054e2:	d31d      	bcc.n	8005520 <_strtoul_l.isra.0+0xb0>
 80054e4:	d101      	bne.n	80054ea <_strtoul_l.isra.0+0x7a>
 80054e6:	45a1      	cmp	r9, r4
 80054e8:	db1a      	blt.n	8005520 <_strtoul_l.isra.0+0xb0>
 80054ea:	2501      	movs	r5, #1
 80054ec:	fb00 4003 	mla	r0, r0, r3, r4
 80054f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80054f4:	e7eb      	b.n	80054ce <_strtoul_l.isra.0+0x5e>
 80054f6:	2c2b      	cmp	r4, #43	; 0x2b
 80054f8:	bf08      	it	eq
 80054fa:	f89c 4000 	ldrbeq.w	r4, [ip]
 80054fe:	46a8      	mov	r8, r5
 8005500:	bf08      	it	eq
 8005502:	f100 0c02 	addeq.w	ip, r0, #2
 8005506:	e7c7      	b.n	8005498 <_strtoul_l.isra.0+0x28>
 8005508:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800550c:	2e19      	cmp	r6, #25
 800550e:	d801      	bhi.n	8005514 <_strtoul_l.isra.0+0xa4>
 8005510:	3c37      	subs	r4, #55	; 0x37
 8005512:	e7e1      	b.n	80054d8 <_strtoul_l.isra.0+0x68>
 8005514:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005518:	2e19      	cmp	r6, #25
 800551a:	d804      	bhi.n	8005526 <_strtoul_l.isra.0+0xb6>
 800551c:	3c57      	subs	r4, #87	; 0x57
 800551e:	e7db      	b.n	80054d8 <_strtoul_l.isra.0+0x68>
 8005520:	f04f 35ff 	mov.w	r5, #4294967295
 8005524:	e7e4      	b.n	80054f0 <_strtoul_l.isra.0+0x80>
 8005526:	2d00      	cmp	r5, #0
 8005528:	da07      	bge.n	800553a <_strtoul_l.isra.0+0xca>
 800552a:	2322      	movs	r3, #34	; 0x22
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	f8ce 3000 	str.w	r3, [lr]
 8005534:	b942      	cbnz	r2, 8005548 <_strtoul_l.isra.0+0xd8>
 8005536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800553a:	f1b8 0f00 	cmp.w	r8, #0
 800553e:	d000      	beq.n	8005542 <_strtoul_l.isra.0+0xd2>
 8005540:	4240      	negs	r0, r0
 8005542:	2a00      	cmp	r2, #0
 8005544:	d0f7      	beq.n	8005536 <_strtoul_l.isra.0+0xc6>
 8005546:	b10d      	cbz	r5, 800554c <_strtoul_l.isra.0+0xdc>
 8005548:	f10c 31ff 	add.w	r1, ip, #4294967295
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	e7f2      	b.n	8005536 <_strtoul_l.isra.0+0xc6>
 8005550:	2430      	movs	r4, #48	; 0x30
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1b1      	bne.n	80054ba <_strtoul_l.isra.0+0x4a>
 8005556:	2308      	movs	r3, #8
 8005558:	e7af      	b.n	80054ba <_strtoul_l.isra.0+0x4a>
 800555a:	2c30      	cmp	r4, #48	; 0x30
 800555c:	d0a2      	beq.n	80054a4 <_strtoul_l.isra.0+0x34>
 800555e:	230a      	movs	r3, #10
 8005560:	e7ab      	b.n	80054ba <_strtoul_l.isra.0+0x4a>
 8005562:	bf00      	nop
 8005564:	0800781b 	.word	0x0800781b

08005568 <_strtoul_r>:
 8005568:	f7ff bf82 	b.w	8005470 <_strtoul_l.isra.0>

0800556c <__submore>:
 800556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005570:	460c      	mov	r4, r1
 8005572:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005578:	4299      	cmp	r1, r3
 800557a:	d11b      	bne.n	80055b4 <__submore+0x48>
 800557c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005580:	f000 f8b0 	bl	80056e4 <_malloc_r>
 8005584:	b918      	cbnz	r0, 800558e <__submore+0x22>
 8005586:	f04f 30ff 	mov.w	r0, #4294967295
 800558a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800558e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005592:	63a3      	str	r3, [r4, #56]	; 0x38
 8005594:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005598:	6360      	str	r0, [r4, #52]	; 0x34
 800559a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800559e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80055a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80055a6:	7043      	strb	r3, [r0, #1]
 80055a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80055ac:	7003      	strb	r3, [r0, #0]
 80055ae:	6020      	str	r0, [r4, #0]
 80055b0:	2000      	movs	r0, #0
 80055b2:	e7ea      	b.n	800558a <__submore+0x1e>
 80055b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80055b6:	0077      	lsls	r7, r6, #1
 80055b8:	463a      	mov	r2, r7
 80055ba:	f000 f8ed 	bl	8005798 <_realloc_r>
 80055be:	4605      	mov	r5, r0
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d0e0      	beq.n	8005586 <__submore+0x1a>
 80055c4:	eb00 0806 	add.w	r8, r0, r6
 80055c8:	4601      	mov	r1, r0
 80055ca:	4632      	mov	r2, r6
 80055cc:	4640      	mov	r0, r8
 80055ce:	f000 f815 	bl	80055fc <memcpy>
 80055d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80055d6:	f8c4 8000 	str.w	r8, [r4]
 80055da:	e7e9      	b.n	80055b0 <__submore+0x44>

080055dc <__retarget_lock_acquire_recursive>:
 80055dc:	4770      	bx	lr

080055de <__retarget_lock_release_recursive>:
 80055de:	4770      	bx	lr

080055e0 <memchr>:
 80055e0:	4603      	mov	r3, r0
 80055e2:	b510      	push	{r4, lr}
 80055e4:	b2c9      	uxtb	r1, r1
 80055e6:	4402      	add	r2, r0
 80055e8:	4293      	cmp	r3, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	d101      	bne.n	80055f2 <memchr+0x12>
 80055ee:	2000      	movs	r0, #0
 80055f0:	e003      	b.n	80055fa <memchr+0x1a>
 80055f2:	7804      	ldrb	r4, [r0, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	428c      	cmp	r4, r1
 80055f8:	d1f6      	bne.n	80055e8 <memchr+0x8>
 80055fa:	bd10      	pop	{r4, pc}

080055fc <memcpy>:
 80055fc:	440a      	add	r2, r1
 80055fe:	4291      	cmp	r1, r2
 8005600:	f100 33ff 	add.w	r3, r0, #4294967295
 8005604:	d100      	bne.n	8005608 <memcpy+0xc>
 8005606:	4770      	bx	lr
 8005608:	b510      	push	{r4, lr}
 800560a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800560e:	4291      	cmp	r1, r2
 8005610:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005614:	d1f9      	bne.n	800560a <memcpy+0xe>
 8005616:	bd10      	pop	{r4, pc}

08005618 <memmove>:
 8005618:	4288      	cmp	r0, r1
 800561a:	b510      	push	{r4, lr}
 800561c:	eb01 0402 	add.w	r4, r1, r2
 8005620:	d902      	bls.n	8005628 <memmove+0x10>
 8005622:	4284      	cmp	r4, r0
 8005624:	4623      	mov	r3, r4
 8005626:	d807      	bhi.n	8005638 <memmove+0x20>
 8005628:	1e43      	subs	r3, r0, #1
 800562a:	42a1      	cmp	r1, r4
 800562c:	d008      	beq.n	8005640 <memmove+0x28>
 800562e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005636:	e7f8      	b.n	800562a <memmove+0x12>
 8005638:	4601      	mov	r1, r0
 800563a:	4402      	add	r2, r0
 800563c:	428a      	cmp	r2, r1
 800563e:	d100      	bne.n	8005642 <memmove+0x2a>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800564a:	e7f7      	b.n	800563c <memmove+0x24>

0800564c <_free_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4605      	mov	r5, r0
 8005650:	2900      	cmp	r1, #0
 8005652:	d043      	beq.n	80056dc <_free_r+0x90>
 8005654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005658:	1f0c      	subs	r4, r1, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfb8      	it	lt
 800565e:	18e4      	addlt	r4, r4, r3
 8005660:	f000 f8d0 	bl	8005804 <__malloc_lock>
 8005664:	4a1e      	ldr	r2, [pc, #120]	; (80056e0 <_free_r+0x94>)
 8005666:	6813      	ldr	r3, [r2, #0]
 8005668:	4610      	mov	r0, r2
 800566a:	b933      	cbnz	r3, 800567a <_free_r+0x2e>
 800566c:	6063      	str	r3, [r4, #4]
 800566e:	6014      	str	r4, [r2, #0]
 8005670:	4628      	mov	r0, r5
 8005672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005676:	f000 b8cb 	b.w	8005810 <__malloc_unlock>
 800567a:	42a3      	cmp	r3, r4
 800567c:	d90a      	bls.n	8005694 <_free_r+0x48>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	1862      	adds	r2, r4, r1
 8005682:	4293      	cmp	r3, r2
 8005684:	bf01      	itttt	eq
 8005686:	681a      	ldreq	r2, [r3, #0]
 8005688:	685b      	ldreq	r3, [r3, #4]
 800568a:	1852      	addeq	r2, r2, r1
 800568c:	6022      	streq	r2, [r4, #0]
 800568e:	6063      	str	r3, [r4, #4]
 8005690:	6004      	str	r4, [r0, #0]
 8005692:	e7ed      	b.n	8005670 <_free_r+0x24>
 8005694:	461a      	mov	r2, r3
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	b10b      	cbz	r3, 800569e <_free_r+0x52>
 800569a:	42a3      	cmp	r3, r4
 800569c:	d9fa      	bls.n	8005694 <_free_r+0x48>
 800569e:	6811      	ldr	r1, [r2, #0]
 80056a0:	1850      	adds	r0, r2, r1
 80056a2:	42a0      	cmp	r0, r4
 80056a4:	d10b      	bne.n	80056be <_free_r+0x72>
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	4401      	add	r1, r0
 80056aa:	1850      	adds	r0, r2, r1
 80056ac:	4283      	cmp	r3, r0
 80056ae:	6011      	str	r1, [r2, #0]
 80056b0:	d1de      	bne.n	8005670 <_free_r+0x24>
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4401      	add	r1, r0
 80056b8:	6011      	str	r1, [r2, #0]
 80056ba:	6053      	str	r3, [r2, #4]
 80056bc:	e7d8      	b.n	8005670 <_free_r+0x24>
 80056be:	d902      	bls.n	80056c6 <_free_r+0x7a>
 80056c0:	230c      	movs	r3, #12
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	e7d4      	b.n	8005670 <_free_r+0x24>
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	1821      	adds	r1, r4, r0
 80056ca:	428b      	cmp	r3, r1
 80056cc:	bf01      	itttt	eq
 80056ce:	6819      	ldreq	r1, [r3, #0]
 80056d0:	685b      	ldreq	r3, [r3, #4]
 80056d2:	1809      	addeq	r1, r1, r0
 80056d4:	6021      	streq	r1, [r4, #0]
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	6054      	str	r4, [r2, #4]
 80056da:	e7c9      	b.n	8005670 <_free_r+0x24>
 80056dc:	bd38      	pop	{r3, r4, r5, pc}
 80056de:	bf00      	nop
 80056e0:	2000009c 	.word	0x2000009c

080056e4 <_malloc_r>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	1ccd      	adds	r5, r1, #3
 80056e8:	f025 0503 	bic.w	r5, r5, #3
 80056ec:	3508      	adds	r5, #8
 80056ee:	2d0c      	cmp	r5, #12
 80056f0:	bf38      	it	cc
 80056f2:	250c      	movcc	r5, #12
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	4606      	mov	r6, r0
 80056f8:	db01      	blt.n	80056fe <_malloc_r+0x1a>
 80056fa:	42a9      	cmp	r1, r5
 80056fc:	d903      	bls.n	8005706 <_malloc_r+0x22>
 80056fe:	230c      	movs	r3, #12
 8005700:	6033      	str	r3, [r6, #0]
 8005702:	2000      	movs	r0, #0
 8005704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005706:	f000 f87d 	bl	8005804 <__malloc_lock>
 800570a:	4921      	ldr	r1, [pc, #132]	; (8005790 <_malloc_r+0xac>)
 800570c:	680a      	ldr	r2, [r1, #0]
 800570e:	4614      	mov	r4, r2
 8005710:	b99c      	cbnz	r4, 800573a <_malloc_r+0x56>
 8005712:	4f20      	ldr	r7, [pc, #128]	; (8005794 <_malloc_r+0xb0>)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	b923      	cbnz	r3, 8005722 <_malloc_r+0x3e>
 8005718:	4621      	mov	r1, r4
 800571a:	4630      	mov	r0, r6
 800571c:	f000 f862 	bl	80057e4 <_sbrk_r>
 8005720:	6038      	str	r0, [r7, #0]
 8005722:	4629      	mov	r1, r5
 8005724:	4630      	mov	r0, r6
 8005726:	f000 f85d 	bl	80057e4 <_sbrk_r>
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	d123      	bne.n	8005776 <_malloc_r+0x92>
 800572e:	230c      	movs	r3, #12
 8005730:	4630      	mov	r0, r6
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	f000 f86c 	bl	8005810 <__malloc_unlock>
 8005738:	e7e3      	b.n	8005702 <_malloc_r+0x1e>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	1b5b      	subs	r3, r3, r5
 800573e:	d417      	bmi.n	8005770 <_malloc_r+0x8c>
 8005740:	2b0b      	cmp	r3, #11
 8005742:	d903      	bls.n	800574c <_malloc_r+0x68>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	441c      	add	r4, r3
 8005748:	6025      	str	r5, [r4, #0]
 800574a:	e004      	b.n	8005756 <_malloc_r+0x72>
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	42a2      	cmp	r2, r4
 8005750:	bf0c      	ite	eq
 8005752:	600b      	streq	r3, [r1, #0]
 8005754:	6053      	strne	r3, [r2, #4]
 8005756:	4630      	mov	r0, r6
 8005758:	f000 f85a 	bl	8005810 <__malloc_unlock>
 800575c:	f104 000b 	add.w	r0, r4, #11
 8005760:	1d23      	adds	r3, r4, #4
 8005762:	f020 0007 	bic.w	r0, r0, #7
 8005766:	1ac2      	subs	r2, r0, r3
 8005768:	d0cc      	beq.n	8005704 <_malloc_r+0x20>
 800576a:	1a1b      	subs	r3, r3, r0
 800576c:	50a3      	str	r3, [r4, r2]
 800576e:	e7c9      	b.n	8005704 <_malloc_r+0x20>
 8005770:	4622      	mov	r2, r4
 8005772:	6864      	ldr	r4, [r4, #4]
 8005774:	e7cc      	b.n	8005710 <_malloc_r+0x2c>
 8005776:	1cc4      	adds	r4, r0, #3
 8005778:	f024 0403 	bic.w	r4, r4, #3
 800577c:	42a0      	cmp	r0, r4
 800577e:	d0e3      	beq.n	8005748 <_malloc_r+0x64>
 8005780:	1a21      	subs	r1, r4, r0
 8005782:	4630      	mov	r0, r6
 8005784:	f000 f82e 	bl	80057e4 <_sbrk_r>
 8005788:	3001      	adds	r0, #1
 800578a:	d1dd      	bne.n	8005748 <_malloc_r+0x64>
 800578c:	e7cf      	b.n	800572e <_malloc_r+0x4a>
 800578e:	bf00      	nop
 8005790:	2000009c 	.word	0x2000009c
 8005794:	200000a0 	.word	0x200000a0

08005798 <_realloc_r>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	4607      	mov	r7, r0
 800579c:	4614      	mov	r4, r2
 800579e:	460e      	mov	r6, r1
 80057a0:	b921      	cbnz	r1, 80057ac <_realloc_r+0x14>
 80057a2:	4611      	mov	r1, r2
 80057a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057a8:	f7ff bf9c 	b.w	80056e4 <_malloc_r>
 80057ac:	b922      	cbnz	r2, 80057b8 <_realloc_r+0x20>
 80057ae:	f7ff ff4d 	bl	800564c <_free_r>
 80057b2:	4625      	mov	r5, r4
 80057b4:	4628      	mov	r0, r5
 80057b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b8:	f000 f830 	bl	800581c <_malloc_usable_size_r>
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d20f      	bcs.n	80057e0 <_realloc_r+0x48>
 80057c0:	4621      	mov	r1, r4
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ff8e 	bl	80056e4 <_malloc_r>
 80057c8:	4605      	mov	r5, r0
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d0f2      	beq.n	80057b4 <_realloc_r+0x1c>
 80057ce:	4631      	mov	r1, r6
 80057d0:	4622      	mov	r2, r4
 80057d2:	f7ff ff13 	bl	80055fc <memcpy>
 80057d6:	4631      	mov	r1, r6
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ff37 	bl	800564c <_free_r>
 80057de:	e7e9      	b.n	80057b4 <_realloc_r+0x1c>
 80057e0:	4635      	mov	r5, r6
 80057e2:	e7e7      	b.n	80057b4 <_realloc_r+0x1c>

080057e4 <_sbrk_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	2300      	movs	r3, #0
 80057e8:	4d05      	ldr	r5, [pc, #20]	; (8005800 <_sbrk_r+0x1c>)
 80057ea:	4604      	mov	r4, r0
 80057ec:	4608      	mov	r0, r1
 80057ee:	602b      	str	r3, [r5, #0]
 80057f0:	f7fc f9ce 	bl	8001b90 <_sbrk>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_sbrk_r+0x1a>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_sbrk_r+0x1a>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	20000530 	.word	0x20000530

08005804 <__malloc_lock>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__malloc_lock+0x8>)
 8005806:	f7ff bee9 	b.w	80055dc <__retarget_lock_acquire_recursive>
 800580a:	bf00      	nop
 800580c:	20000538 	.word	0x20000538

08005810 <__malloc_unlock>:
 8005810:	4801      	ldr	r0, [pc, #4]	; (8005818 <__malloc_unlock+0x8>)
 8005812:	f7ff bee4 	b.w	80055de <__retarget_lock_release_recursive>
 8005816:	bf00      	nop
 8005818:	20000538 	.word	0x20000538

0800581c <_malloc_usable_size_r>:
 800581c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005820:	1f18      	subs	r0, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	bfbc      	itt	lt
 8005826:	580b      	ldrlt	r3, [r1, r0]
 8005828:	18c0      	addlt	r0, r0, r3
 800582a:	4770      	bx	lr

0800582c <cos>:
 800582c:	b530      	push	{r4, r5, lr}
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <cos+0x7c>)
 8005830:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005834:	4293      	cmp	r3, r2
 8005836:	b087      	sub	sp, #28
 8005838:	dc04      	bgt.n	8005844 <cos+0x18>
 800583a:	2200      	movs	r2, #0
 800583c:	2300      	movs	r3, #0
 800583e:	f001 f90b 	bl	8006a58 <__kernel_cos>
 8005842:	e006      	b.n	8005852 <cos+0x26>
 8005844:	4a19      	ldr	r2, [pc, #100]	; (80058ac <cos+0x80>)
 8005846:	4293      	cmp	r3, r2
 8005848:	dd05      	ble.n	8005856 <cos+0x2a>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	f7fa fd3f 	bl	80002d0 <__aeabi_dsub>
 8005852:	b007      	add	sp, #28
 8005854:	bd30      	pop	{r4, r5, pc}
 8005856:	aa02      	add	r2, sp, #8
 8005858:	f000 fe62 	bl	8006520 <__ieee754_rem_pio2>
 800585c:	f000 0003 	and.w	r0, r0, #3
 8005860:	2801      	cmp	r0, #1
 8005862:	d007      	beq.n	8005874 <cos+0x48>
 8005864:	2802      	cmp	r0, #2
 8005866:	d00f      	beq.n	8005888 <cos+0x5c>
 8005868:	b9a8      	cbnz	r0, 8005896 <cos+0x6a>
 800586a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800586e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005872:	e7e4      	b.n	800583e <cos+0x12>
 8005874:	9000      	str	r0, [sp, #0]
 8005876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800587a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800587e:	f001 fcf3 	bl	8007268 <__kernel_sin>
 8005882:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005886:	e7e4      	b.n	8005852 <cos+0x26>
 8005888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800588c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005890:	f001 f8e2 	bl	8006a58 <__kernel_cos>
 8005894:	e7f5      	b.n	8005882 <cos+0x56>
 8005896:	2301      	movs	r3, #1
 8005898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a2:	f001 fce1 	bl	8007268 <__kernel_sin>
 80058a6:	e7d4      	b.n	8005852 <cos+0x26>
 80058a8:	3fe921fb 	.word	0x3fe921fb
 80058ac:	7fefffff 	.word	0x7fefffff

080058b0 <sin>:
 80058b0:	b530      	push	{r4, r5, lr}
 80058b2:	4a20      	ldr	r2, [pc, #128]	; (8005934 <sin+0x84>)
 80058b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80058b8:	4293      	cmp	r3, r2
 80058ba:	b087      	sub	sp, #28
 80058bc:	dc06      	bgt.n	80058cc <sin+0x1c>
 80058be:	2300      	movs	r3, #0
 80058c0:	2200      	movs	r2, #0
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	f001 fccf 	bl	8007268 <__kernel_sin>
 80058ca:	e006      	b.n	80058da <sin+0x2a>
 80058cc:	4a1a      	ldr	r2, [pc, #104]	; (8005938 <sin+0x88>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	dd05      	ble.n	80058de <sin+0x2e>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	f7fa fcfb 	bl	80002d0 <__aeabi_dsub>
 80058da:	b007      	add	sp, #28
 80058dc:	bd30      	pop	{r4, r5, pc}
 80058de:	aa02      	add	r2, sp, #8
 80058e0:	f000 fe1e 	bl	8006520 <__ieee754_rem_pio2>
 80058e4:	f000 0003 	and.w	r0, r0, #3
 80058e8:	2801      	cmp	r0, #1
 80058ea:	d009      	beq.n	8005900 <sin+0x50>
 80058ec:	2802      	cmp	r0, #2
 80058ee:	d00e      	beq.n	800590e <sin+0x5e>
 80058f0:	b9c0      	cbnz	r0, 8005924 <sin+0x74>
 80058f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058f6:	2301      	movs	r3, #1
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058fe:	e7e2      	b.n	80058c6 <sin+0x16>
 8005900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005908:	f001 f8a6 	bl	8006a58 <__kernel_cos>
 800590c:	e7e5      	b.n	80058da <sin+0x2a>
 800590e:	2301      	movs	r3, #1
 8005910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800591a:	f001 fca5 	bl	8007268 <__kernel_sin>
 800591e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005922:	e7da      	b.n	80058da <sin+0x2a>
 8005924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800592c:	f001 f894 	bl	8006a58 <__kernel_cos>
 8005930:	e7f5      	b.n	800591e <sin+0x6e>
 8005932:	bf00      	nop
 8005934:	3fe921fb 	.word	0x3fe921fb
 8005938:	7fefffff 	.word	0x7fefffff

0800593c <pow>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	461f      	mov	r7, r3
 8005942:	4680      	mov	r8, r0
 8005944:	4689      	mov	r9, r1
 8005946:	4616      	mov	r6, r2
 8005948:	f000 f8d2 	bl	8005af0 <__ieee754_pow>
 800594c:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <pow+0x148>)
 800594e:	4604      	mov	r4, r0
 8005950:	f993 3000 	ldrsb.w	r3, [r3]
 8005954:	460d      	mov	r5, r1
 8005956:	3301      	adds	r3, #1
 8005958:	d015      	beq.n	8005986 <pow+0x4a>
 800595a:	4632      	mov	r2, r6
 800595c:	463b      	mov	r3, r7
 800595e:	4630      	mov	r0, r6
 8005960:	4639      	mov	r1, r7
 8005962:	f7fb f907 	bl	8000b74 <__aeabi_dcmpun>
 8005966:	b970      	cbnz	r0, 8005986 <pow+0x4a>
 8005968:	4642      	mov	r2, r8
 800596a:	464b      	mov	r3, r9
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	f7fb f900 	bl	8000b74 <__aeabi_dcmpun>
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	b148      	cbz	r0, 800598e <pow+0x52>
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fb f8c7 	bl	8000b10 <__aeabi_dcmpeq>
 8005982:	2800      	cmp	r0, #0
 8005984:	d17b      	bne.n	8005a7e <pow+0x142>
 8005986:	4620      	mov	r0, r4
 8005988:	4629      	mov	r1, r5
 800598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fb f8bd 	bl	8000b10 <__aeabi_dcmpeq>
 8005996:	b1e0      	cbz	r0, 80059d2 <pow+0x96>
 8005998:	2200      	movs	r2, #0
 800599a:	2300      	movs	r3, #0
 800599c:	4630      	mov	r0, r6
 800599e:	4639      	mov	r1, r7
 80059a0:	f7fb f8b6 	bl	8000b10 <__aeabi_dcmpeq>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d16a      	bne.n	8005a7e <pow+0x142>
 80059a8:	4630      	mov	r0, r6
 80059aa:	4639      	mov	r1, r7
 80059ac:	f001 fd15 	bl	80073da <finite>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0e8      	beq.n	8005986 <pow+0x4a>
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fb f8b2 	bl	8000b24 <__aeabi_dcmplt>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d0e0      	beq.n	8005986 <pow+0x4a>
 80059c4:	f7fe fe04 	bl	80045d0 <__errno>
 80059c8:	2321      	movs	r3, #33	; 0x21
 80059ca:	2400      	movs	r4, #0
 80059cc:	6003      	str	r3, [r0, #0]
 80059ce:	4d2e      	ldr	r5, [pc, #184]	; (8005a88 <pow+0x14c>)
 80059d0:	e7d9      	b.n	8005986 <pow+0x4a>
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f001 fd00 	bl	80073da <finite>
 80059da:	bba8      	cbnz	r0, 8005a48 <pow+0x10c>
 80059dc:	4640      	mov	r0, r8
 80059de:	4649      	mov	r1, r9
 80059e0:	f001 fcfb 	bl	80073da <finite>
 80059e4:	b380      	cbz	r0, 8005a48 <pow+0x10c>
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	f001 fcf6 	bl	80073da <finite>
 80059ee:	b358      	cbz	r0, 8005a48 <pow+0x10c>
 80059f0:	4622      	mov	r2, r4
 80059f2:	462b      	mov	r3, r5
 80059f4:	4620      	mov	r0, r4
 80059f6:	4629      	mov	r1, r5
 80059f8:	f7fb f8bc 	bl	8000b74 <__aeabi_dcmpun>
 80059fc:	b160      	cbz	r0, 8005a18 <pow+0xdc>
 80059fe:	f7fe fde7 	bl	80045d0 <__errno>
 8005a02:	2321      	movs	r3, #33	; 0x21
 8005a04:	2200      	movs	r2, #0
 8005a06:	6003      	str	r3, [r0, #0]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	f7fa ff41 	bl	8000894 <__aeabi_ddiv>
 8005a12:	4604      	mov	r4, r0
 8005a14:	460d      	mov	r5, r1
 8005a16:	e7b6      	b.n	8005986 <pow+0x4a>
 8005a18:	f7fe fdda 	bl	80045d0 <__errno>
 8005a1c:	2322      	movs	r3, #34	; 0x22
 8005a1e:	2200      	movs	r2, #0
 8005a20:	6003      	str	r3, [r0, #0]
 8005a22:	4649      	mov	r1, r9
 8005a24:	2300      	movs	r3, #0
 8005a26:	4640      	mov	r0, r8
 8005a28:	f7fb f87c 	bl	8000b24 <__aeabi_dcmplt>
 8005a2c:	2400      	movs	r4, #0
 8005a2e:	b148      	cbz	r0, 8005a44 <pow+0x108>
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f001 fd5e 	bl	80074f4 <rint>
 8005a38:	4632      	mov	r2, r6
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	f7fb f868 	bl	8000b10 <__aeabi_dcmpeq>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d0c4      	beq.n	80059ce <pow+0x92>
 8005a44:	4d11      	ldr	r5, [pc, #68]	; (8005a8c <pow+0x150>)
 8005a46:	e79e      	b.n	8005986 <pow+0x4a>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fb f85e 	bl	8000b10 <__aeabi_dcmpeq>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d096      	beq.n	8005986 <pow+0x4a>
 8005a58:	4640      	mov	r0, r8
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	f001 fcbd 	bl	80073da <finite>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d090      	beq.n	8005986 <pow+0x4a>
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	f001 fcb7 	bl	80073da <finite>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d08a      	beq.n	8005986 <pow+0x4a>
 8005a70:	f7fe fdae 	bl	80045d0 <__errno>
 8005a74:	2322      	movs	r3, #34	; 0x22
 8005a76:	2400      	movs	r4, #0
 8005a78:	2500      	movs	r5, #0
 8005a7a:	6003      	str	r3, [r0, #0]
 8005a7c:	e783      	b.n	8005986 <pow+0x4a>
 8005a7e:	2400      	movs	r4, #0
 8005a80:	4d03      	ldr	r5, [pc, #12]	; (8005a90 <pow+0x154>)
 8005a82:	e780      	b.n	8005986 <pow+0x4a>
 8005a84:	20000070 	.word	0x20000070
 8005a88:	fff00000 	.word	0xfff00000
 8005a8c:	7ff00000 	.word	0x7ff00000
 8005a90:	3ff00000 	.word	0x3ff00000

08005a94 <sqrt>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	4606      	mov	r6, r0
 8005a98:	460f      	mov	r7, r1
 8005a9a:	f000 ff31 	bl	8006900 <__ieee754_sqrt>
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <sqrt+0x54>)
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8005aa6:	460d      	mov	r5, r1
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	d019      	beq.n	8005ae0 <sqrt+0x4c>
 8005aac:	4632      	mov	r2, r6
 8005aae:	463b      	mov	r3, r7
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	f7fb f85e 	bl	8000b74 <__aeabi_dcmpun>
 8005ab8:	b990      	cbnz	r0, 8005ae0 <sqrt+0x4c>
 8005aba:	2200      	movs	r2, #0
 8005abc:	2300      	movs	r3, #0
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	f7fb f82f 	bl	8000b24 <__aeabi_dcmplt>
 8005ac6:	b158      	cbz	r0, 8005ae0 <sqrt+0x4c>
 8005ac8:	f7fe fd82 	bl	80045d0 <__errno>
 8005acc:	2321      	movs	r3, #33	; 0x21
 8005ace:	2200      	movs	r2, #0
 8005ad0:	6003      	str	r3, [r0, #0]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f7fa fedc 	bl	8000894 <__aeabi_ddiv>
 8005adc:	4604      	mov	r4, r0
 8005ade:	460d      	mov	r5, r1
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000070 	.word	0x20000070
 8005aec:	00000000 	.word	0x00000000

08005af0 <__ieee754_pow>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	b093      	sub	sp, #76	; 0x4c
 8005af6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005afa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005afe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005b02:	ea55 0302 	orrs.w	r3, r5, r2
 8005b06:	4607      	mov	r7, r0
 8005b08:	4688      	mov	r8, r1
 8005b0a:	f000 84bf 	beq.w	800648c <__ieee754_pow+0x99c>
 8005b0e:	4b7e      	ldr	r3, [pc, #504]	; (8005d08 <__ieee754_pow+0x218>)
 8005b10:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005b14:	429c      	cmp	r4, r3
 8005b16:	4689      	mov	r9, r1
 8005b18:	4682      	mov	sl, r0
 8005b1a:	dc09      	bgt.n	8005b30 <__ieee754_pow+0x40>
 8005b1c:	d103      	bne.n	8005b26 <__ieee754_pow+0x36>
 8005b1e:	b978      	cbnz	r0, 8005b40 <__ieee754_pow+0x50>
 8005b20:	42a5      	cmp	r5, r4
 8005b22:	dd02      	ble.n	8005b2a <__ieee754_pow+0x3a>
 8005b24:	e00c      	b.n	8005b40 <__ieee754_pow+0x50>
 8005b26:	429d      	cmp	r5, r3
 8005b28:	dc02      	bgt.n	8005b30 <__ieee754_pow+0x40>
 8005b2a:	429d      	cmp	r5, r3
 8005b2c:	d10e      	bne.n	8005b4c <__ieee754_pow+0x5c>
 8005b2e:	b16a      	cbz	r2, 8005b4c <__ieee754_pow+0x5c>
 8005b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b38:	ea54 030a 	orrs.w	r3, r4, sl
 8005b3c:	f000 84a6 	beq.w	800648c <__ieee754_pow+0x99c>
 8005b40:	4872      	ldr	r0, [pc, #456]	; (8005d0c <__ieee754_pow+0x21c>)
 8005b42:	b013      	add	sp, #76	; 0x4c
 8005b44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b48:	f001 bcce 	b.w	80074e8 <nan>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	da39      	bge.n	8005bc6 <__ieee754_pow+0xd6>
 8005b52:	4b6f      	ldr	r3, [pc, #444]	; (8005d10 <__ieee754_pow+0x220>)
 8005b54:	429d      	cmp	r5, r3
 8005b56:	dc54      	bgt.n	8005c02 <__ieee754_pow+0x112>
 8005b58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005b5c:	429d      	cmp	r5, r3
 8005b5e:	f340 84a6 	ble.w	80064ae <__ieee754_pow+0x9be>
 8005b62:	152b      	asrs	r3, r5, #20
 8005b64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b68:	2b14      	cmp	r3, #20
 8005b6a:	dd0f      	ble.n	8005b8c <__ieee754_pow+0x9c>
 8005b6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005b70:	fa22 f103 	lsr.w	r1, r2, r3
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	f040 8498 	bne.w	80064ae <__ieee754_pow+0x9be>
 8005b7e:	f001 0101 	and.w	r1, r1, #1
 8005b82:	f1c1 0302 	rsb	r3, r1, #2
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	b182      	cbz	r2, 8005bac <__ieee754_pow+0xbc>
 8005b8a:	e05e      	b.n	8005c4a <__ieee754_pow+0x15a>
 8005b8c:	2a00      	cmp	r2, #0
 8005b8e:	d15a      	bne.n	8005c46 <__ieee754_pow+0x156>
 8005b90:	f1c3 0314 	rsb	r3, r3, #20
 8005b94:	fa45 f103 	asr.w	r1, r5, r3
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	42ab      	cmp	r3, r5
 8005b9e:	f040 8483 	bne.w	80064a8 <__ieee754_pow+0x9b8>
 8005ba2:	f001 0101 	and.w	r1, r1, #1
 8005ba6:	f1c1 0302 	rsb	r3, r1, #2
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	4b59      	ldr	r3, [pc, #356]	; (8005d14 <__ieee754_pow+0x224>)
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	d130      	bne.n	8005c14 <__ieee754_pow+0x124>
 8005bb2:	2e00      	cmp	r6, #0
 8005bb4:	f280 8474 	bge.w	80064a0 <__ieee754_pow+0x9b0>
 8005bb8:	463a      	mov	r2, r7
 8005bba:	4643      	mov	r3, r8
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4955      	ldr	r1, [pc, #340]	; (8005d14 <__ieee754_pow+0x224>)
 8005bc0:	f7fa fe68 	bl	8000894 <__aeabi_ddiv>
 8005bc4:	e02f      	b.n	8005c26 <__ieee754_pow+0x136>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	d13d      	bne.n	8005c4a <__ieee754_pow+0x15a>
 8005bce:	4b4e      	ldr	r3, [pc, #312]	; (8005d08 <__ieee754_pow+0x218>)
 8005bd0:	429d      	cmp	r5, r3
 8005bd2:	d1eb      	bne.n	8005bac <__ieee754_pow+0xbc>
 8005bd4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005bd8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005bdc:	ea53 030a 	orrs.w	r3, r3, sl
 8005be0:	f000 8454 	beq.w	800648c <__ieee754_pow+0x99c>
 8005be4:	4b4c      	ldr	r3, [pc, #304]	; (8005d18 <__ieee754_pow+0x228>)
 8005be6:	429c      	cmp	r4, r3
 8005be8:	dd0d      	ble.n	8005c06 <__ieee754_pow+0x116>
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	f280 8454 	bge.w	8006498 <__ieee754_pow+0x9a8>
 8005bf0:	f04f 0b00 	mov.w	fp, #0
 8005bf4:	f04f 0c00 	mov.w	ip, #0
 8005bf8:	4658      	mov	r0, fp
 8005bfa:	4661      	mov	r1, ip
 8005bfc:	b013      	add	sp, #76	; 0x4c
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c02:	2302      	movs	r3, #2
 8005c04:	e7e0      	b.n	8005bc8 <__ieee754_pow+0xd8>
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	daf2      	bge.n	8005bf0 <__ieee754_pow+0x100>
 8005c0a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005c0e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005c12:	e7f1      	b.n	8005bf8 <__ieee754_pow+0x108>
 8005c14:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005c18:	d108      	bne.n	8005c2c <__ieee754_pow+0x13c>
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	4643      	mov	r3, r8
 8005c1e:	4638      	mov	r0, r7
 8005c20:	4641      	mov	r1, r8
 8005c22:	f7fa fd0d 	bl	8000640 <__aeabi_dmul>
 8005c26:	4683      	mov	fp, r0
 8005c28:	468c      	mov	ip, r1
 8005c2a:	e7e5      	b.n	8005bf8 <__ieee754_pow+0x108>
 8005c2c:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <__ieee754_pow+0x22c>)
 8005c2e:	429e      	cmp	r6, r3
 8005c30:	d10b      	bne.n	8005c4a <__ieee754_pow+0x15a>
 8005c32:	f1b9 0f00 	cmp.w	r9, #0
 8005c36:	db08      	blt.n	8005c4a <__ieee754_pow+0x15a>
 8005c38:	4638      	mov	r0, r7
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	b013      	add	sp, #76	; 0x4c
 8005c3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c42:	f000 be5d 	b.w	8006900 <__ieee754_sqrt>
 8005c46:	2300      	movs	r3, #0
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	f001 fbc1 	bl	80073d4 <fabs>
 8005c52:	4683      	mov	fp, r0
 8005c54:	468c      	mov	ip, r1
 8005c56:	f1ba 0f00 	cmp.w	sl, #0
 8005c5a:	d129      	bne.n	8005cb0 <__ieee754_pow+0x1c0>
 8005c5c:	b124      	cbz	r4, 8005c68 <__ieee754_pow+0x178>
 8005c5e:	4b2d      	ldr	r3, [pc, #180]	; (8005d14 <__ieee754_pow+0x224>)
 8005c60:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d123      	bne.n	8005cb0 <__ieee754_pow+0x1c0>
 8005c68:	2e00      	cmp	r6, #0
 8005c6a:	da07      	bge.n	8005c7c <__ieee754_pow+0x18c>
 8005c6c:	465a      	mov	r2, fp
 8005c6e:	4663      	mov	r3, ip
 8005c70:	2000      	movs	r0, #0
 8005c72:	4928      	ldr	r1, [pc, #160]	; (8005d14 <__ieee754_pow+0x224>)
 8005c74:	f7fa fe0e 	bl	8000894 <__aeabi_ddiv>
 8005c78:	4683      	mov	fp, r0
 8005c7a:	468c      	mov	ip, r1
 8005c7c:	f1b9 0f00 	cmp.w	r9, #0
 8005c80:	daba      	bge.n	8005bf8 <__ieee754_pow+0x108>
 8005c82:	9b00      	ldr	r3, [sp, #0]
 8005c84:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005c88:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005c8c:	4323      	orrs	r3, r4
 8005c8e:	d108      	bne.n	8005ca2 <__ieee754_pow+0x1b2>
 8005c90:	465a      	mov	r2, fp
 8005c92:	4663      	mov	r3, ip
 8005c94:	4658      	mov	r0, fp
 8005c96:	4661      	mov	r1, ip
 8005c98:	f7fa fb1a 	bl	80002d0 <__aeabi_dsub>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	e78e      	b.n	8005bc0 <__ieee754_pow+0xd0>
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d1a7      	bne.n	8005bf8 <__ieee754_pow+0x108>
 8005ca8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005cac:	469c      	mov	ip, r3
 8005cae:	e7a3      	b.n	8005bf8 <__ieee754_pow+0x108>
 8005cb0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cba:	9b00      	ldr	r3, [sp, #0]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d104      	bne.n	8005cca <__ieee754_pow+0x1da>
 8005cc0:	463a      	mov	r2, r7
 8005cc2:	4643      	mov	r3, r8
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	e7e6      	b.n	8005c98 <__ieee754_pow+0x1a8>
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <__ieee754_pow+0x230>)
 8005ccc:	429d      	cmp	r5, r3
 8005cce:	f340 80f9 	ble.w	8005ec4 <__ieee754_pow+0x3d4>
 8005cd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005cd6:	429d      	cmp	r5, r3
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <__ieee754_pow+0x228>)
 8005cda:	dd09      	ble.n	8005cf0 <__ieee754_pow+0x200>
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	dc0c      	bgt.n	8005cfa <__ieee754_pow+0x20a>
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	da85      	bge.n	8005bf0 <__ieee754_pow+0x100>
 8005ce4:	a306      	add	r3, pc, #24	; (adr r3, 8005d00 <__ieee754_pow+0x210>)
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	e798      	b.n	8005c22 <__ieee754_pow+0x132>
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	dbf5      	blt.n	8005ce0 <__ieee754_pow+0x1f0>
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <__ieee754_pow+0x224>)
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	dd14      	ble.n	8005d24 <__ieee754_pow+0x234>
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	dcf2      	bgt.n	8005ce4 <__ieee754_pow+0x1f4>
 8005cfe:	e777      	b.n	8005bf0 <__ieee754_pow+0x100>
 8005d00:	8800759c 	.word	0x8800759c
 8005d04:	7e37e43c 	.word	0x7e37e43c
 8005d08:	7ff00000 	.word	0x7ff00000
 8005d0c:	080077d1 	.word	0x080077d1
 8005d10:	433fffff 	.word	0x433fffff
 8005d14:	3ff00000 	.word	0x3ff00000
 8005d18:	3fefffff 	.word	0x3fefffff
 8005d1c:	3fe00000 	.word	0x3fe00000
 8005d20:	41e00000 	.word	0x41e00000
 8005d24:	4661      	mov	r1, ip
 8005d26:	2200      	movs	r2, #0
 8005d28:	4658      	mov	r0, fp
 8005d2a:	4b61      	ldr	r3, [pc, #388]	; (8005eb0 <__ieee754_pow+0x3c0>)
 8005d2c:	f7fa fad0 	bl	80002d0 <__aeabi_dsub>
 8005d30:	a355      	add	r3, pc, #340	; (adr r3, 8005e88 <__ieee754_pow+0x398>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	4604      	mov	r4, r0
 8005d38:	460d      	mov	r5, r1
 8005d3a:	f7fa fc81 	bl	8000640 <__aeabi_dmul>
 8005d3e:	a354      	add	r3, pc, #336	; (adr r3, 8005e90 <__ieee754_pow+0x3a0>)
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	4606      	mov	r6, r0
 8005d46:	460f      	mov	r7, r1
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f7fa fc78 	bl	8000640 <__aeabi_dmul>
 8005d50:	2200      	movs	r2, #0
 8005d52:	4682      	mov	sl, r0
 8005d54:	468b      	mov	fp, r1
 8005d56:	4620      	mov	r0, r4
 8005d58:	4629      	mov	r1, r5
 8005d5a:	4b56      	ldr	r3, [pc, #344]	; (8005eb4 <__ieee754_pow+0x3c4>)
 8005d5c:	f7fa fc70 	bl	8000640 <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	a14c      	add	r1, pc, #304	; (adr r1, 8005e98 <__ieee754_pow+0x3a8>)
 8005d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d6a:	f7fa fab1 	bl	80002d0 <__aeabi_dsub>
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	f7fa fc65 	bl	8000640 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	494e      	ldr	r1, [pc, #312]	; (8005eb8 <__ieee754_pow+0x3c8>)
 8005d7e:	f7fa faa7 	bl	80002d0 <__aeabi_dsub>
 8005d82:	4622      	mov	r2, r4
 8005d84:	462b      	mov	r3, r5
 8005d86:	4680      	mov	r8, r0
 8005d88:	4689      	mov	r9, r1
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa fc57 	bl	8000640 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4640      	mov	r0, r8
 8005d98:	4649      	mov	r1, r9
 8005d9a:	f7fa fc51 	bl	8000640 <__aeabi_dmul>
 8005d9e:	a340      	add	r3, pc, #256	; (adr r3, 8005ea0 <__ieee754_pow+0x3b0>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa fc4c 	bl	8000640 <__aeabi_dmul>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4650      	mov	r0, sl
 8005dae:	4659      	mov	r1, fp
 8005db0:	f7fa fa8e 	bl	80002d0 <__aeabi_dsub>
 8005db4:	f04f 0a00 	mov.w	sl, #0
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fa86 	bl	80002d4 <__adddf3>
 8005dc8:	4632      	mov	r2, r6
 8005dca:	463b      	mov	r3, r7
 8005dcc:	4650      	mov	r0, sl
 8005dce:	468b      	mov	fp, r1
 8005dd0:	f7fa fa7e 	bl	80002d0 <__aeabi_dsub>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7fa fa78 	bl	80002d0 <__aeabi_dsub>
 8005de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005de8:	3b01      	subs	r3, #1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f04f 0600 	mov.w	r6, #0
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	bf0c      	ite	eq
 8005df6:	4b31      	ldreq	r3, [pc, #196]	; (8005ebc <__ieee754_pow+0x3cc>)
 8005df8:	4b2d      	ldrne	r3, [pc, #180]	; (8005eb0 <__ieee754_pow+0x3c0>)
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e02:	e9cd 2300 	strd	r2, r3, [sp]
 8005e06:	4632      	mov	r2, r6
 8005e08:	463b      	mov	r3, r7
 8005e0a:	f7fa fa61 	bl	80002d0 <__aeabi_dsub>
 8005e0e:	4652      	mov	r2, sl
 8005e10:	465b      	mov	r3, fp
 8005e12:	f7fa fc15 	bl	8000640 <__aeabi_dmul>
 8005e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	4689      	mov	r9, r1
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	f7fa fc0d 	bl	8000640 <__aeabi_dmul>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	f7fa fa51 	bl	80002d4 <__adddf3>
 8005e32:	4632      	mov	r2, r6
 8005e34:	463b      	mov	r3, r7
 8005e36:	4680      	mov	r8, r0
 8005e38:	4689      	mov	r9, r1
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	f7fa fbff 	bl	8000640 <__aeabi_dmul>
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
 8005e46:	460b      	mov	r3, r1
 8005e48:	4602      	mov	r2, r0
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005e52:	f7fa fa3f 	bl	80002d4 <__adddf3>
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <__ieee754_pow+0x3d0>)
 8005e58:	4682      	mov	sl, r0
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	460f      	mov	r7, r1
 8005e5e:	460e      	mov	r6, r1
 8005e60:	f340 82ed 	ble.w	800643e <__ieee754_pow+0x94e>
 8005e64:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005e68:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005e6c:	4303      	orrs	r3, r0
 8005e6e:	f000 81e7 	beq.w	8006240 <__ieee754_pow+0x750>
 8005e72:	a30d      	add	r3, pc, #52	; (adr r3, 8005ea8 <__ieee754_pow+0x3b8>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e7c:	f7fa fbe0 	bl	8000640 <__aeabi_dmul>
 8005e80:	a309      	add	r3, pc, #36	; (adr r3, 8005ea8 <__ieee754_pow+0x3b8>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	e6cc      	b.n	8005c22 <__ieee754_pow+0x132>
 8005e88:	60000000 	.word	0x60000000
 8005e8c:	3ff71547 	.word	0x3ff71547
 8005e90:	f85ddf44 	.word	0xf85ddf44
 8005e94:	3e54ae0b 	.word	0x3e54ae0b
 8005e98:	55555555 	.word	0x55555555
 8005e9c:	3fd55555 	.word	0x3fd55555
 8005ea0:	652b82fe 	.word	0x652b82fe
 8005ea4:	3ff71547 	.word	0x3ff71547
 8005ea8:	8800759c 	.word	0x8800759c
 8005eac:	7e37e43c 	.word	0x7e37e43c
 8005eb0:	3ff00000 	.word	0x3ff00000
 8005eb4:	3fd00000 	.word	0x3fd00000
 8005eb8:	3fe00000 	.word	0x3fe00000
 8005ebc:	bff00000 	.word	0xbff00000
 8005ec0:	408fffff 	.word	0x408fffff
 8005ec4:	4bd4      	ldr	r3, [pc, #848]	; (8006218 <__ieee754_pow+0x728>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	ea09 0303 	and.w	r3, r9, r3
 8005ecc:	b943      	cbnz	r3, 8005ee0 <__ieee754_pow+0x3f0>
 8005ece:	4658      	mov	r0, fp
 8005ed0:	4661      	mov	r1, ip
 8005ed2:	4bd2      	ldr	r3, [pc, #840]	; (800621c <__ieee754_pow+0x72c>)
 8005ed4:	f7fa fbb4 	bl	8000640 <__aeabi_dmul>
 8005ed8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005edc:	4683      	mov	fp, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	1523      	asrs	r3, r4, #20
 8005ee2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ee6:	4413      	add	r3, r2
 8005ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eea:	4bcd      	ldr	r3, [pc, #820]	; (8006220 <__ieee754_pow+0x730>)
 8005eec:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005ef0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005efa:	dd08      	ble.n	8005f0e <__ieee754_pow+0x41e>
 8005efc:	4bc9      	ldr	r3, [pc, #804]	; (8006224 <__ieee754_pow+0x734>)
 8005efe:	429c      	cmp	r4, r3
 8005f00:	f340 819c 	ble.w	800623c <__ieee754_pow+0x74c>
 8005f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f0e:	2600      	movs	r6, #0
 8005f10:	00f3      	lsls	r3, r6, #3
 8005f12:	930d      	str	r3, [sp, #52]	; 0x34
 8005f14:	4bc4      	ldr	r3, [pc, #784]	; (8006228 <__ieee754_pow+0x738>)
 8005f16:	4658      	mov	r0, fp
 8005f18:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f20:	4629      	mov	r1, r5
 8005f22:	461a      	mov	r2, r3
 8005f24:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005f28:	4623      	mov	r3, r4
 8005f2a:	f7fa f9d1 	bl	80002d0 <__aeabi_dsub>
 8005f2e:	46da      	mov	sl, fp
 8005f30:	462b      	mov	r3, r5
 8005f32:	4652      	mov	r2, sl
 8005f34:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005f38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f3c:	f7fa f9ca 	bl	80002d4 <__adddf3>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	2000      	movs	r0, #0
 8005f46:	49b9      	ldr	r1, [pc, #740]	; (800622c <__ieee754_pow+0x73c>)
 8005f48:	f7fa fca4 	bl	8000894 <__aeabi_ddiv>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f58:	f7fa fb72 	bl	8000640 <__aeabi_dmul>
 8005f5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f60:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005f64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	46ab      	mov	fp, r5
 8005f6e:	106d      	asrs	r5, r5, #1
 8005f70:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005f7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005f7e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	4614      	mov	r4, r2
 8005f88:	461d      	mov	r5, r3
 8005f8a:	f7fa fb59 	bl	8000640 <__aeabi_dmul>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f96:	f7fa f99b 	bl	80002d0 <__aeabi_dsub>
 8005f9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460f      	mov	r7, r1
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	f7fa f993 	bl	80002d0 <__aeabi_dsub>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4650      	mov	r0, sl
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	f7fa f98d 	bl	80002d0 <__aeabi_dsub>
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	464b      	mov	r3, r9
 8005fba:	f7fa fb41 	bl	8000640 <__aeabi_dmul>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa f983 	bl	80002d0 <__aeabi_dsub>
 8005fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fce:	f7fa fb37 	bl	8000640 <__aeabi_dmul>
 8005fd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f7fa fb2f 	bl	8000640 <__aeabi_dmul>
 8005fe2:	a37b      	add	r3, pc, #492	; (adr r3, 80061d0 <__ieee754_pow+0x6e0>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	4604      	mov	r4, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	f7fa fb28 	bl	8000640 <__aeabi_dmul>
 8005ff0:	a379      	add	r3, pc, #484	; (adr r3, 80061d8 <__ieee754_pow+0x6e8>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f7fa f96d 	bl	80002d4 <__adddf3>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	f7fa fb1f 	bl	8000640 <__aeabi_dmul>
 8006002:	a377      	add	r3, pc, #476	; (adr r3, 80061e0 <__ieee754_pow+0x6f0>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa f964 	bl	80002d4 <__adddf3>
 800600c:	4622      	mov	r2, r4
 800600e:	462b      	mov	r3, r5
 8006010:	f7fa fb16 	bl	8000640 <__aeabi_dmul>
 8006014:	a374      	add	r3, pc, #464	; (adr r3, 80061e8 <__ieee754_pow+0x6f8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa f95b 	bl	80002d4 <__adddf3>
 800601e:	4622      	mov	r2, r4
 8006020:	462b      	mov	r3, r5
 8006022:	f7fa fb0d 	bl	8000640 <__aeabi_dmul>
 8006026:	a372      	add	r3, pc, #456	; (adr r3, 80061f0 <__ieee754_pow+0x700>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa f952 	bl	80002d4 <__adddf3>
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	f7fa fb04 	bl	8000640 <__aeabi_dmul>
 8006038:	a36f      	add	r3, pc, #444	; (adr r3, 80061f8 <__ieee754_pow+0x708>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa f949 	bl	80002d4 <__adddf3>
 8006042:	4622      	mov	r2, r4
 8006044:	4606      	mov	r6, r0
 8006046:	460f      	mov	r7, r1
 8006048:	462b      	mov	r3, r5
 800604a:	4620      	mov	r0, r4
 800604c:	4629      	mov	r1, r5
 800604e:	f7fa faf7 	bl	8000640 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa faf1 	bl	8000640 <__aeabi_dmul>
 800605e:	4604      	mov	r4, r0
 8006060:	460d      	mov	r5, r1
 8006062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006066:	4642      	mov	r2, r8
 8006068:	464b      	mov	r3, r9
 800606a:	f7fa f933 	bl	80002d4 <__adddf3>
 800606e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006072:	f7fa fae5 	bl	8000640 <__aeabi_dmul>
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	f7fa f92b 	bl	80002d4 <__adddf3>
 800607e:	4642      	mov	r2, r8
 8006080:	4606      	mov	r6, r0
 8006082:	460f      	mov	r7, r1
 8006084:	464b      	mov	r3, r9
 8006086:	4640      	mov	r0, r8
 8006088:	4649      	mov	r1, r9
 800608a:	f7fa fad9 	bl	8000640 <__aeabi_dmul>
 800608e:	2200      	movs	r2, #0
 8006090:	4b67      	ldr	r3, [pc, #412]	; (8006230 <__ieee754_pow+0x740>)
 8006092:	4682      	mov	sl, r0
 8006094:	468b      	mov	fp, r1
 8006096:	f7fa f91d 	bl	80002d4 <__adddf3>
 800609a:	4632      	mov	r2, r6
 800609c:	463b      	mov	r3, r7
 800609e:	f7fa f919 	bl	80002d4 <__adddf3>
 80060a2:	9c04      	ldr	r4, [sp, #16]
 80060a4:	460d      	mov	r5, r1
 80060a6:	4622      	mov	r2, r4
 80060a8:	460b      	mov	r3, r1
 80060aa:	4640      	mov	r0, r8
 80060ac:	4649      	mov	r1, r9
 80060ae:	f7fa fac7 	bl	8000640 <__aeabi_dmul>
 80060b2:	2200      	movs	r2, #0
 80060b4:	4680      	mov	r8, r0
 80060b6:	4689      	mov	r9, r1
 80060b8:	4620      	mov	r0, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	4b5c      	ldr	r3, [pc, #368]	; (8006230 <__ieee754_pow+0x740>)
 80060be:	f7fa f907 	bl	80002d0 <__aeabi_dsub>
 80060c2:	4652      	mov	r2, sl
 80060c4:	465b      	mov	r3, fp
 80060c6:	f7fa f903 	bl	80002d0 <__aeabi_dsub>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa f8fd 	bl	80002d0 <__aeabi_dsub>
 80060d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060da:	f7fa fab1 	bl	8000640 <__aeabi_dmul>
 80060de:	4622      	mov	r2, r4
 80060e0:	4606      	mov	r6, r0
 80060e2:	460f      	mov	r7, r1
 80060e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060e8:	462b      	mov	r3, r5
 80060ea:	f7fa faa9 	bl	8000640 <__aeabi_dmul>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa f8ed 	bl	80002d4 <__adddf3>
 80060fa:	4606      	mov	r6, r0
 80060fc:	460f      	mov	r7, r1
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa f8e5 	bl	80002d4 <__adddf3>
 800610a:	a33d      	add	r3, pc, #244	; (adr r3, 8006200 <__ieee754_pow+0x710>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	9c04      	ldr	r4, [sp, #16]
 8006112:	460d      	mov	r5, r1
 8006114:	4620      	mov	r0, r4
 8006116:	f7fa fa93 	bl	8000640 <__aeabi_dmul>
 800611a:	4642      	mov	r2, r8
 800611c:	464b      	mov	r3, r9
 800611e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f7fa f8d3 	bl	80002d0 <__aeabi_dsub>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4630      	mov	r0, r6
 8006130:	4639      	mov	r1, r7
 8006132:	f7fa f8cd 	bl	80002d0 <__aeabi_dsub>
 8006136:	a334      	add	r3, pc, #208	; (adr r3, 8006208 <__ieee754_pow+0x718>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f7fa fa80 	bl	8000640 <__aeabi_dmul>
 8006140:	a333      	add	r3, pc, #204	; (adr r3, 8006210 <__ieee754_pow+0x720>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	4606      	mov	r6, r0
 8006148:	460f      	mov	r7, r1
 800614a:	4620      	mov	r0, r4
 800614c:	4629      	mov	r1, r5
 800614e:	f7fa fa77 	bl	8000640 <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4630      	mov	r0, r6
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa f8bb 	bl	80002d4 <__adddf3>
 800615e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006160:	4b34      	ldr	r3, [pc, #208]	; (8006234 <__ieee754_pow+0x744>)
 8006162:	4413      	add	r3, r2
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	f7fa f8b4 	bl	80002d4 <__adddf3>
 800616c:	4680      	mov	r8, r0
 800616e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006170:	4689      	mov	r9, r1
 8006172:	f7fa f9fb 	bl	800056c <__aeabi_i2d>
 8006176:	4604      	mov	r4, r0
 8006178:	460d      	mov	r5, r1
 800617a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800617c:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <__ieee754_pow+0x748>)
 800617e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006182:	4413      	add	r3, r2
 8006184:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	f7fa f8a2 	bl	80002d4 <__adddf3>
 8006190:	4632      	mov	r2, r6
 8006192:	463b      	mov	r3, r7
 8006194:	f7fa f89e 	bl	80002d4 <__adddf3>
 8006198:	4622      	mov	r2, r4
 800619a:	462b      	mov	r3, r5
 800619c:	f7fa f89a 	bl	80002d4 <__adddf3>
 80061a0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80061a4:	4622      	mov	r2, r4
 80061a6:	462b      	mov	r3, r5
 80061a8:	4650      	mov	r0, sl
 80061aa:	468b      	mov	fp, r1
 80061ac:	f7fa f890 	bl	80002d0 <__aeabi_dsub>
 80061b0:	4632      	mov	r2, r6
 80061b2:	463b      	mov	r3, r7
 80061b4:	f7fa f88c 	bl	80002d0 <__aeabi_dsub>
 80061b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061bc:	f7fa f888 	bl	80002d0 <__aeabi_dsub>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4640      	mov	r0, r8
 80061c6:	4649      	mov	r1, r9
 80061c8:	e608      	b.n	8005ddc <__ieee754_pow+0x2ec>
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w
 80061d0:	4a454eef 	.word	0x4a454eef
 80061d4:	3fca7e28 	.word	0x3fca7e28
 80061d8:	93c9db65 	.word	0x93c9db65
 80061dc:	3fcd864a 	.word	0x3fcd864a
 80061e0:	a91d4101 	.word	0xa91d4101
 80061e4:	3fd17460 	.word	0x3fd17460
 80061e8:	518f264d 	.word	0x518f264d
 80061ec:	3fd55555 	.word	0x3fd55555
 80061f0:	db6fabff 	.word	0xdb6fabff
 80061f4:	3fdb6db6 	.word	0x3fdb6db6
 80061f8:	33333303 	.word	0x33333303
 80061fc:	3fe33333 	.word	0x3fe33333
 8006200:	e0000000 	.word	0xe0000000
 8006204:	3feec709 	.word	0x3feec709
 8006208:	dc3a03fd 	.word	0xdc3a03fd
 800620c:	3feec709 	.word	0x3feec709
 8006210:	145b01f5 	.word	0x145b01f5
 8006214:	be3e2fe0 	.word	0xbe3e2fe0
 8006218:	7ff00000 	.word	0x7ff00000
 800621c:	43400000 	.word	0x43400000
 8006220:	0003988e 	.word	0x0003988e
 8006224:	000bb679 	.word	0x000bb679
 8006228:	08007980 	.word	0x08007980
 800622c:	3ff00000 	.word	0x3ff00000
 8006230:	40080000 	.word	0x40080000
 8006234:	080079a0 	.word	0x080079a0
 8006238:	08007990 	.word	0x08007990
 800623c:	2601      	movs	r6, #1
 800623e:	e667      	b.n	8005f10 <__ieee754_pow+0x420>
 8006240:	a39d      	add	r3, pc, #628	; (adr r3, 80064b8 <__ieee754_pow+0x9c8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa f843 	bl	80002d4 <__adddf3>
 800624e:	4622      	mov	r2, r4
 8006250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006254:	462b      	mov	r3, r5
 8006256:	4650      	mov	r0, sl
 8006258:	4639      	mov	r1, r7
 800625a:	f7fa f839 	bl	80002d0 <__aeabi_dsub>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006266:	f7fa fc7b 	bl	8000b60 <__aeabi_dcmpgt>
 800626a:	2800      	cmp	r0, #0
 800626c:	f47f ae01 	bne.w	8005e72 <__ieee754_pow+0x382>
 8006270:	4aa5      	ldr	r2, [pc, #660]	; (8006508 <__ieee754_pow+0xa18>)
 8006272:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006276:	4293      	cmp	r3, r2
 8006278:	f340 8103 	ble.w	8006482 <__ieee754_pow+0x992>
 800627c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006280:	2000      	movs	r0, #0
 8006282:	151b      	asrs	r3, r3, #20
 8006284:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006288:	fa4a f303 	asr.w	r3, sl, r3
 800628c:	4433      	add	r3, r6
 800628e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006292:	4f9e      	ldr	r7, [pc, #632]	; (800650c <__ieee754_pow+0xa1c>)
 8006294:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006298:	4117      	asrs	r7, r2
 800629a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800629e:	ea23 0107 	bic.w	r1, r3, r7
 80062a2:	f1c2 0214 	rsb	r2, r2, #20
 80062a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80062aa:	460b      	mov	r3, r1
 80062ac:	fa4a fa02 	asr.w	sl, sl, r2
 80062b0:	2e00      	cmp	r6, #0
 80062b2:	4602      	mov	r2, r0
 80062b4:	4629      	mov	r1, r5
 80062b6:	4620      	mov	r0, r4
 80062b8:	bfb8      	it	lt
 80062ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80062be:	f7fa f807 	bl	80002d0 <__aeabi_dsub>
 80062c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ca:	2400      	movs	r4, #0
 80062cc:	4642      	mov	r2, r8
 80062ce:	464b      	mov	r3, r9
 80062d0:	f7fa f800 	bl	80002d4 <__adddf3>
 80062d4:	a37a      	add	r3, pc, #488	; (adr r3, 80064c0 <__ieee754_pow+0x9d0>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	4620      	mov	r0, r4
 80062dc:	460d      	mov	r5, r1
 80062de:	f7fa f9af 	bl	8000640 <__aeabi_dmul>
 80062e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062e6:	4606      	mov	r6, r0
 80062e8:	460f      	mov	r7, r1
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7f9 ffef 	bl	80002d0 <__aeabi_dsub>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4640      	mov	r0, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	f7f9 ffe9 	bl	80002d0 <__aeabi_dsub>
 80062fe:	a372      	add	r3, pc, #456	; (adr r3, 80064c8 <__ieee754_pow+0x9d8>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7fa f99c 	bl	8000640 <__aeabi_dmul>
 8006308:	a371      	add	r3, pc, #452	; (adr r3, 80064d0 <__ieee754_pow+0x9e0>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	4680      	mov	r8, r0
 8006310:	4689      	mov	r9, r1
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7fa f993 	bl	8000640 <__aeabi_dmul>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4640      	mov	r0, r8
 8006320:	4649      	mov	r1, r9
 8006322:	f7f9 ffd7 	bl	80002d4 <__adddf3>
 8006326:	4604      	mov	r4, r0
 8006328:	460d      	mov	r5, r1
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7f9 ffcf 	bl	80002d4 <__adddf3>
 8006336:	4632      	mov	r2, r6
 8006338:	463b      	mov	r3, r7
 800633a:	4680      	mov	r8, r0
 800633c:	4689      	mov	r9, r1
 800633e:	f7f9 ffc7 	bl	80002d0 <__aeabi_dsub>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7f9 ffc1 	bl	80002d0 <__aeabi_dsub>
 800634e:	4642      	mov	r2, r8
 8006350:	4606      	mov	r6, r0
 8006352:	460f      	mov	r7, r1
 8006354:	464b      	mov	r3, r9
 8006356:	4640      	mov	r0, r8
 8006358:	4649      	mov	r1, r9
 800635a:	f7fa f971 	bl	8000640 <__aeabi_dmul>
 800635e:	a35e      	add	r3, pc, #376	; (adr r3, 80064d8 <__ieee754_pow+0x9e8>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	4604      	mov	r4, r0
 8006366:	460d      	mov	r5, r1
 8006368:	f7fa f96a 	bl	8000640 <__aeabi_dmul>
 800636c:	a35c      	add	r3, pc, #368	; (adr r3, 80064e0 <__ieee754_pow+0x9f0>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7f9 ffad 	bl	80002d0 <__aeabi_dsub>
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	f7fa f961 	bl	8000640 <__aeabi_dmul>
 800637e:	a35a      	add	r3, pc, #360	; (adr r3, 80064e8 <__ieee754_pow+0x9f8>)
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f7f9 ffa6 	bl	80002d4 <__adddf3>
 8006388:	4622      	mov	r2, r4
 800638a:	462b      	mov	r3, r5
 800638c:	f7fa f958 	bl	8000640 <__aeabi_dmul>
 8006390:	a357      	add	r3, pc, #348	; (adr r3, 80064f0 <__ieee754_pow+0xa00>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7f9 ff9b 	bl	80002d0 <__aeabi_dsub>
 800639a:	4622      	mov	r2, r4
 800639c:	462b      	mov	r3, r5
 800639e:	f7fa f94f 	bl	8000640 <__aeabi_dmul>
 80063a2:	a355      	add	r3, pc, #340	; (adr r3, 80064f8 <__ieee754_pow+0xa08>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7f9 ff94 	bl	80002d4 <__adddf3>
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	f7fa f946 	bl	8000640 <__aeabi_dmul>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7f9 ff88 	bl	80002d0 <__aeabi_dsub>
 80063c0:	4604      	mov	r4, r0
 80063c2:	460d      	mov	r5, r1
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4640      	mov	r0, r8
 80063ca:	4649      	mov	r1, r9
 80063cc:	f7fa f938 	bl	8000640 <__aeabi_dmul>
 80063d0:	2200      	movs	r2, #0
 80063d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f7f9 ff77 	bl	80002d0 <__aeabi_dsub>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ea:	f7fa fa53 	bl	8000894 <__aeabi_ddiv>
 80063ee:	4632      	mov	r2, r6
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	463b      	mov	r3, r7
 80063f6:	4640      	mov	r0, r8
 80063f8:	4649      	mov	r1, r9
 80063fa:	f7fa f921 	bl	8000640 <__aeabi_dmul>
 80063fe:	4632      	mov	r2, r6
 8006400:	463b      	mov	r3, r7
 8006402:	f7f9 ff67 	bl	80002d4 <__adddf3>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4620      	mov	r0, r4
 800640c:	4629      	mov	r1, r5
 800640e:	f7f9 ff5f 	bl	80002d0 <__aeabi_dsub>
 8006412:	4642      	mov	r2, r8
 8006414:	464b      	mov	r3, r9
 8006416:	f7f9 ff5b 	bl	80002d0 <__aeabi_dsub>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	2000      	movs	r0, #0
 8006420:	493b      	ldr	r1, [pc, #236]	; (8006510 <__ieee754_pow+0xa20>)
 8006422:	f7f9 ff55 	bl	80002d0 <__aeabi_dsub>
 8006426:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800642a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800642e:	da2b      	bge.n	8006488 <__ieee754_pow+0x998>
 8006430:	4652      	mov	r2, sl
 8006432:	f001 f8e9 	bl	8007608 <scalbn>
 8006436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800643a:	f7ff bbf2 	b.w	8005c22 <__ieee754_pow+0x132>
 800643e:	4b35      	ldr	r3, [pc, #212]	; (8006514 <__ieee754_pow+0xa24>)
 8006440:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006444:	429f      	cmp	r7, r3
 8006446:	f77f af13 	ble.w	8006270 <__ieee754_pow+0x780>
 800644a:	4b33      	ldr	r3, [pc, #204]	; (8006518 <__ieee754_pow+0xa28>)
 800644c:	440b      	add	r3, r1
 800644e:	4303      	orrs	r3, r0
 8006450:	d00b      	beq.n	800646a <__ieee754_pow+0x97a>
 8006452:	a32b      	add	r3, pc, #172	; (adr r3, 8006500 <__ieee754_pow+0xa10>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	e9dd 0100 	ldrd	r0, r1, [sp]
 800645c:	f7fa f8f0 	bl	8000640 <__aeabi_dmul>
 8006460:	a327      	add	r3, pc, #156	; (adr r3, 8006500 <__ieee754_pow+0xa10>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7ff bbdc 	b.w	8005c22 <__ieee754_pow+0x132>
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	f7f9 ff2f 	bl	80002d0 <__aeabi_dsub>
 8006472:	4642      	mov	r2, r8
 8006474:	464b      	mov	r3, r9
 8006476:	f7fa fb69 	bl	8000b4c <__aeabi_dcmpge>
 800647a:	2800      	cmp	r0, #0
 800647c:	f43f aef8 	beq.w	8006270 <__ieee754_pow+0x780>
 8006480:	e7e7      	b.n	8006452 <__ieee754_pow+0x962>
 8006482:	f04f 0a00 	mov.w	sl, #0
 8006486:	e71e      	b.n	80062c6 <__ieee754_pow+0x7d6>
 8006488:	4621      	mov	r1, r4
 800648a:	e7d4      	b.n	8006436 <__ieee754_pow+0x946>
 800648c:	f04f 0b00 	mov.w	fp, #0
 8006490:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006510 <__ieee754_pow+0xa20>
 8006494:	f7ff bbb0 	b.w	8005bf8 <__ieee754_pow+0x108>
 8006498:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800649c:	f7ff bbac 	b.w	8005bf8 <__ieee754_pow+0x108>
 80064a0:	4638      	mov	r0, r7
 80064a2:	4641      	mov	r1, r8
 80064a4:	f7ff bbbf 	b.w	8005c26 <__ieee754_pow+0x136>
 80064a8:	9200      	str	r2, [sp, #0]
 80064aa:	f7ff bb7f 	b.w	8005bac <__ieee754_pow+0xbc>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f7ff bb69 	b.w	8005b86 <__ieee754_pow+0x96>
 80064b4:	f3af 8000 	nop.w
 80064b8:	652b82fe 	.word	0x652b82fe
 80064bc:	3c971547 	.word	0x3c971547
 80064c0:	00000000 	.word	0x00000000
 80064c4:	3fe62e43 	.word	0x3fe62e43
 80064c8:	fefa39ef 	.word	0xfefa39ef
 80064cc:	3fe62e42 	.word	0x3fe62e42
 80064d0:	0ca86c39 	.word	0x0ca86c39
 80064d4:	be205c61 	.word	0xbe205c61
 80064d8:	72bea4d0 	.word	0x72bea4d0
 80064dc:	3e663769 	.word	0x3e663769
 80064e0:	c5d26bf1 	.word	0xc5d26bf1
 80064e4:	3ebbbd41 	.word	0x3ebbbd41
 80064e8:	af25de2c 	.word	0xaf25de2c
 80064ec:	3f11566a 	.word	0x3f11566a
 80064f0:	16bebd93 	.word	0x16bebd93
 80064f4:	3f66c16c 	.word	0x3f66c16c
 80064f8:	5555553e 	.word	0x5555553e
 80064fc:	3fc55555 	.word	0x3fc55555
 8006500:	c2f8f359 	.word	0xc2f8f359
 8006504:	01a56e1f 	.word	0x01a56e1f
 8006508:	3fe00000 	.word	0x3fe00000
 800650c:	000fffff 	.word	0x000fffff
 8006510:	3ff00000 	.word	0x3ff00000
 8006514:	4090cbff 	.word	0x4090cbff
 8006518:	3f6f3400 	.word	0x3f6f3400
 800651c:	00000000 	.word	0x00000000

08006520 <__ieee754_rem_pio2>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	4614      	mov	r4, r2
 8006526:	4ac4      	ldr	r2, [pc, #784]	; (8006838 <__ieee754_rem_pio2+0x318>)
 8006528:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800652c:	b08d      	sub	sp, #52	; 0x34
 800652e:	4592      	cmp	sl, r2
 8006530:	9104      	str	r1, [sp, #16]
 8006532:	dc07      	bgt.n	8006544 <__ieee754_rem_pio2+0x24>
 8006534:	2200      	movs	r2, #0
 8006536:	2300      	movs	r3, #0
 8006538:	e9c4 0100 	strd	r0, r1, [r4]
 800653c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006540:	2500      	movs	r5, #0
 8006542:	e024      	b.n	800658e <__ieee754_rem_pio2+0x6e>
 8006544:	4abd      	ldr	r2, [pc, #756]	; (800683c <__ieee754_rem_pio2+0x31c>)
 8006546:	4592      	cmp	sl, r2
 8006548:	dc72      	bgt.n	8006630 <__ieee754_rem_pio2+0x110>
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	4dbc      	ldr	r5, [pc, #752]	; (8006840 <__ieee754_rem_pio2+0x320>)
 800654e:	2b00      	cmp	r3, #0
 8006550:	a3ab      	add	r3, pc, #684	; (adr r3, 8006800 <__ieee754_rem_pio2+0x2e0>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	dd36      	ble.n	80065c6 <__ieee754_rem_pio2+0xa6>
 8006558:	f7f9 feba 	bl	80002d0 <__aeabi_dsub>
 800655c:	45aa      	cmp	sl, r5
 800655e:	4606      	mov	r6, r0
 8006560:	460f      	mov	r7, r1
 8006562:	d018      	beq.n	8006596 <__ieee754_rem_pio2+0x76>
 8006564:	a3a8      	add	r3, pc, #672	; (adr r3, 8006808 <__ieee754_rem_pio2+0x2e8>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 feb1 	bl	80002d0 <__aeabi_dsub>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4630      	mov	r0, r6
 8006574:	e9c4 2300 	strd	r2, r3, [r4]
 8006578:	4639      	mov	r1, r7
 800657a:	f7f9 fea9 	bl	80002d0 <__aeabi_dsub>
 800657e:	a3a2      	add	r3, pc, #648	; (adr r3, 8006808 <__ieee754_rem_pio2+0x2e8>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f7f9 fea4 	bl	80002d0 <__aeabi_dsub>
 8006588:	2501      	movs	r5, #1
 800658a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800658e:	4628      	mov	r0, r5
 8006590:	b00d      	add	sp, #52	; 0x34
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	a39e      	add	r3, pc, #632	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2f0>)
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f7f9 fe98 	bl	80002d0 <__aeabi_dsub>
 80065a0:	a39d      	add	r3, pc, #628	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f8>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	f7f9 fe91 	bl	80002d0 <__aeabi_dsub>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4630      	mov	r0, r6
 80065b4:	e9c4 2300 	strd	r2, r3, [r4]
 80065b8:	4639      	mov	r1, r7
 80065ba:	f7f9 fe89 	bl	80002d0 <__aeabi_dsub>
 80065be:	a396      	add	r3, pc, #600	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f8>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	e7de      	b.n	8006584 <__ieee754_rem_pio2+0x64>
 80065c6:	f7f9 fe85 	bl	80002d4 <__adddf3>
 80065ca:	45aa      	cmp	sl, r5
 80065cc:	4606      	mov	r6, r0
 80065ce:	460f      	mov	r7, r1
 80065d0:	d016      	beq.n	8006600 <__ieee754_rem_pio2+0xe0>
 80065d2:	a38d      	add	r3, pc, #564	; (adr r3, 8006808 <__ieee754_rem_pio2+0x2e8>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7f9 fe7c 	bl	80002d4 <__adddf3>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4630      	mov	r0, r6
 80065e2:	e9c4 2300 	strd	r2, r3, [r4]
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7f9 fe72 	bl	80002d0 <__aeabi_dsub>
 80065ec:	a386      	add	r3, pc, #536	; (adr r3, 8006808 <__ieee754_rem_pio2+0x2e8>)
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f7f9 fe6f 	bl	80002d4 <__adddf3>
 80065f6:	f04f 35ff 	mov.w	r5, #4294967295
 80065fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065fe:	e7c6      	b.n	800658e <__ieee754_rem_pio2+0x6e>
 8006600:	a383      	add	r3, pc, #524	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2f0>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f7f9 fe65 	bl	80002d4 <__adddf3>
 800660a:	a383      	add	r3, pc, #524	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f8>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	4606      	mov	r6, r0
 8006612:	460f      	mov	r7, r1
 8006614:	f7f9 fe5e 	bl	80002d4 <__adddf3>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4630      	mov	r0, r6
 800661e:	e9c4 2300 	strd	r2, r3, [r4]
 8006622:	4639      	mov	r1, r7
 8006624:	f7f9 fe54 	bl	80002d0 <__aeabi_dsub>
 8006628:	a37b      	add	r3, pc, #492	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f8>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	e7e0      	b.n	80065f2 <__ieee754_rem_pio2+0xd2>
 8006630:	4a84      	ldr	r2, [pc, #528]	; (8006844 <__ieee754_rem_pio2+0x324>)
 8006632:	4592      	cmp	sl, r2
 8006634:	f300 80d5 	bgt.w	80067e2 <__ieee754_rem_pio2+0x2c2>
 8006638:	f000 fecc 	bl	80073d4 <fabs>
 800663c:	a378      	add	r3, pc, #480	; (adr r3, 8006820 <__ieee754_rem_pio2+0x300>)
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	4606      	mov	r6, r0
 8006644:	460f      	mov	r7, r1
 8006646:	f7f9 fffb 	bl	8000640 <__aeabi_dmul>
 800664a:	2200      	movs	r2, #0
 800664c:	4b7e      	ldr	r3, [pc, #504]	; (8006848 <__ieee754_rem_pio2+0x328>)
 800664e:	f7f9 fe41 	bl	80002d4 <__adddf3>
 8006652:	f7fa faa5 	bl	8000ba0 <__aeabi_d2iz>
 8006656:	4605      	mov	r5, r0
 8006658:	f7f9 ff88 	bl	800056c <__aeabi_i2d>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006664:	a366      	add	r3, pc, #408	; (adr r3, 8006800 <__ieee754_rem_pio2+0x2e0>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f7f9 ffe9 	bl	8000640 <__aeabi_dmul>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	f7f9 fe2b 	bl	80002d0 <__aeabi_dsub>
 800667a:	a363      	add	r3, pc, #396	; (adr r3, 8006808 <__ieee754_rem_pio2+0x2e8>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	4680      	mov	r8, r0
 8006682:	4689      	mov	r9, r1
 8006684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006688:	f7f9 ffda 	bl	8000640 <__aeabi_dmul>
 800668c:	2d1f      	cmp	r5, #31
 800668e:	4606      	mov	r6, r0
 8006690:	460f      	mov	r7, r1
 8006692:	dc0e      	bgt.n	80066b2 <__ieee754_rem_pio2+0x192>
 8006694:	4b6d      	ldr	r3, [pc, #436]	; (800684c <__ieee754_rem_pio2+0x32c>)
 8006696:	1e6a      	subs	r2, r5, #1
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	4553      	cmp	r3, sl
 800669e:	d008      	beq.n	80066b2 <__ieee754_rem_pio2+0x192>
 80066a0:	4632      	mov	r2, r6
 80066a2:	463b      	mov	r3, r7
 80066a4:	4640      	mov	r0, r8
 80066a6:	4649      	mov	r1, r9
 80066a8:	f7f9 fe12 	bl	80002d0 <__aeabi_dsub>
 80066ac:	e9c4 0100 	strd	r0, r1, [r4]
 80066b0:	e013      	b.n	80066da <__ieee754_rem_pio2+0x1ba>
 80066b2:	463b      	mov	r3, r7
 80066b4:	4632      	mov	r2, r6
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7f9 fe09 	bl	80002d0 <__aeabi_dsub>
 80066be:	ea4f 532a 	mov.w	r3, sl, asr #20
 80066c2:	9305      	str	r3, [sp, #20]
 80066c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066c8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80066cc:	f1ba 0f10 	cmp.w	sl, #16
 80066d0:	dc1f      	bgt.n	8006712 <__ieee754_rem_pio2+0x1f2>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	e9c4 2300 	strd	r2, r3, [r4]
 80066da:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80066de:	4640      	mov	r0, r8
 80066e0:	4653      	mov	r3, sl
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7f9 fdf4 	bl	80002d0 <__aeabi_dsub>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	f7f9 fdf0 	bl	80002d0 <__aeabi_dsub>
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066f6:	9904      	ldr	r1, [sp, #16]
 80066f8:	4602      	mov	r2, r0
 80066fa:	2900      	cmp	r1, #0
 80066fc:	f6bf af47 	bge.w	800658e <__ieee754_rem_pio2+0x6e>
 8006700:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8006704:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006708:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800670c:	60e3      	str	r3, [r4, #12]
 800670e:	426d      	negs	r5, r5
 8006710:	e73d      	b.n	800658e <__ieee754_rem_pio2+0x6e>
 8006712:	a33f      	add	r3, pc, #252	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2f0>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800671c:	f7f9 ff90 	bl	8000640 <__aeabi_dmul>
 8006720:	4606      	mov	r6, r0
 8006722:	460f      	mov	r7, r1
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7f9 fdd0 	bl	80002d0 <__aeabi_dsub>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4682      	mov	sl, r0
 8006736:	468b      	mov	fp, r1
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7f9 fdc8 	bl	80002d0 <__aeabi_dsub>
 8006740:	4632      	mov	r2, r6
 8006742:	463b      	mov	r3, r7
 8006744:	f7f9 fdc4 	bl	80002d0 <__aeabi_dsub>
 8006748:	a333      	add	r3, pc, #204	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f8>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	4606      	mov	r6, r0
 8006750:	460f      	mov	r7, r1
 8006752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006756:	f7f9 ff73 	bl	8000640 <__aeabi_dmul>
 800675a:	4632      	mov	r2, r6
 800675c:	463b      	mov	r3, r7
 800675e:	f7f9 fdb7 	bl	80002d0 <__aeabi_dsub>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4606      	mov	r6, r0
 8006768:	460f      	mov	r7, r1
 800676a:	4650      	mov	r0, sl
 800676c:	4659      	mov	r1, fp
 800676e:	f7f9 fdaf 	bl	80002d0 <__aeabi_dsub>
 8006772:	9a05      	ldr	r2, [sp, #20]
 8006774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b31      	cmp	r3, #49	; 0x31
 800677c:	dc06      	bgt.n	800678c <__ieee754_rem_pio2+0x26c>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	46d0      	mov	r8, sl
 8006784:	46d9      	mov	r9, fp
 8006786:	e9c4 2300 	strd	r2, r3, [r4]
 800678a:	e7a6      	b.n	80066da <__ieee754_rem_pio2+0x1ba>
 800678c:	a326      	add	r3, pc, #152	; (adr r3, 8006828 <__ieee754_rem_pio2+0x308>)
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006796:	f7f9 ff53 	bl	8000640 <__aeabi_dmul>
 800679a:	4606      	mov	r6, r0
 800679c:	460f      	mov	r7, r1
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4650      	mov	r0, sl
 80067a4:	4659      	mov	r1, fp
 80067a6:	f7f9 fd93 	bl	80002d0 <__aeabi_dsub>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4680      	mov	r8, r0
 80067b0:	4689      	mov	r9, r1
 80067b2:	4650      	mov	r0, sl
 80067b4:	4659      	mov	r1, fp
 80067b6:	f7f9 fd8b 	bl	80002d0 <__aeabi_dsub>
 80067ba:	4632      	mov	r2, r6
 80067bc:	463b      	mov	r3, r7
 80067be:	f7f9 fd87 	bl	80002d0 <__aeabi_dsub>
 80067c2:	a31b      	add	r3, pc, #108	; (adr r3, 8006830 <__ieee754_rem_pio2+0x310>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	4606      	mov	r6, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d0:	f7f9 ff36 	bl	8000640 <__aeabi_dmul>
 80067d4:	4632      	mov	r2, r6
 80067d6:	463b      	mov	r3, r7
 80067d8:	f7f9 fd7a 	bl	80002d0 <__aeabi_dsub>
 80067dc:	4606      	mov	r6, r0
 80067de:	460f      	mov	r7, r1
 80067e0:	e75e      	b.n	80066a0 <__ieee754_rem_pio2+0x180>
 80067e2:	4a1b      	ldr	r2, [pc, #108]	; (8006850 <__ieee754_rem_pio2+0x330>)
 80067e4:	4592      	cmp	sl, r2
 80067e6:	dd35      	ble.n	8006854 <__ieee754_rem_pio2+0x334>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	f7f9 fd70 	bl	80002d0 <__aeabi_dsub>
 80067f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067f4:	e9c4 0100 	strd	r0, r1, [r4]
 80067f8:	e6a2      	b.n	8006540 <__ieee754_rem_pio2+0x20>
 80067fa:	bf00      	nop
 80067fc:	f3af 8000 	nop.w
 8006800:	54400000 	.word	0x54400000
 8006804:	3ff921fb 	.word	0x3ff921fb
 8006808:	1a626331 	.word	0x1a626331
 800680c:	3dd0b461 	.word	0x3dd0b461
 8006810:	1a600000 	.word	0x1a600000
 8006814:	3dd0b461 	.word	0x3dd0b461
 8006818:	2e037073 	.word	0x2e037073
 800681c:	3ba3198a 	.word	0x3ba3198a
 8006820:	6dc9c883 	.word	0x6dc9c883
 8006824:	3fe45f30 	.word	0x3fe45f30
 8006828:	2e000000 	.word	0x2e000000
 800682c:	3ba3198a 	.word	0x3ba3198a
 8006830:	252049c1 	.word	0x252049c1
 8006834:	397b839a 	.word	0x397b839a
 8006838:	3fe921fb 	.word	0x3fe921fb
 800683c:	4002d97b 	.word	0x4002d97b
 8006840:	3ff921fb 	.word	0x3ff921fb
 8006844:	413921fb 	.word	0x413921fb
 8006848:	3fe00000 	.word	0x3fe00000
 800684c:	080079b0 	.word	0x080079b0
 8006850:	7fefffff 	.word	0x7fefffff
 8006854:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006858:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800685c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006860:	460f      	mov	r7, r1
 8006862:	4606      	mov	r6, r0
 8006864:	f7fa f99c 	bl	8000ba0 <__aeabi_d2iz>
 8006868:	f7f9 fe80 	bl	800056c <__aeabi_i2d>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006878:	f7f9 fd2a 	bl	80002d0 <__aeabi_dsub>
 800687c:	2200      	movs	r2, #0
 800687e:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <__ieee754_rem_pio2+0x3d8>)
 8006880:	f7f9 fede 	bl	8000640 <__aeabi_dmul>
 8006884:	460f      	mov	r7, r1
 8006886:	4606      	mov	r6, r0
 8006888:	f7fa f98a 	bl	8000ba0 <__aeabi_d2iz>
 800688c:	f7f9 fe6e 	bl	800056c <__aeabi_i2d>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4630      	mov	r0, r6
 8006896:	4639      	mov	r1, r7
 8006898:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800689c:	f7f9 fd18 	bl	80002d0 <__aeabi_dsub>
 80068a0:	2200      	movs	r2, #0
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <__ieee754_rem_pio2+0x3d8>)
 80068a4:	f7f9 fecc 	bl	8000640 <__aeabi_dmul>
 80068a8:	f04f 0803 	mov.w	r8, #3
 80068ac:	2600      	movs	r6, #0
 80068ae:	2700      	movs	r7, #0
 80068b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068b4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80068b8:	4632      	mov	r2, r6
 80068ba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80068be:	463b      	mov	r3, r7
 80068c0:	46c2      	mov	sl, r8
 80068c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80068c6:	f7fa f923 	bl	8000b10 <__aeabi_dcmpeq>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d1f4      	bne.n	80068b8 <__ieee754_rem_pio2+0x398>
 80068ce:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <__ieee754_rem_pio2+0x3dc>)
 80068d0:	462a      	mov	r2, r5
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	2302      	movs	r3, #2
 80068d6:	4621      	mov	r1, r4
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	a806      	add	r0, sp, #24
 80068dc:	4653      	mov	r3, sl
 80068de:	f000 f979 	bl	8006bd4 <__kernel_rem_pio2>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	4605      	mov	r5, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f6bf ae51 	bge.w	800658e <__ieee754_rem_pio2+0x6e>
 80068ec:	6863      	ldr	r3, [r4, #4]
 80068ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068f2:	6063      	str	r3, [r4, #4]
 80068f4:	68e3      	ldr	r3, [r4, #12]
 80068f6:	e707      	b.n	8006708 <__ieee754_rem_pio2+0x1e8>
 80068f8:	41700000 	.word	0x41700000
 80068fc:	08007a30 	.word	0x08007a30

08006900 <__ieee754_sqrt>:
 8006900:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006a54 <__ieee754_sqrt+0x154>
 8006904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006908:	ea3c 0c01 	bics.w	ip, ip, r1
 800690c:	460b      	mov	r3, r1
 800690e:	4606      	mov	r6, r0
 8006910:	460d      	mov	r5, r1
 8006912:	460a      	mov	r2, r1
 8006914:	4607      	mov	r7, r0
 8006916:	4604      	mov	r4, r0
 8006918:	d10e      	bne.n	8006938 <__ieee754_sqrt+0x38>
 800691a:	4602      	mov	r2, r0
 800691c:	f7f9 fe90 	bl	8000640 <__aeabi_dmul>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4629      	mov	r1, r5
 8006928:	f7f9 fcd4 	bl	80002d4 <__adddf3>
 800692c:	4606      	mov	r6, r0
 800692e:	460d      	mov	r5, r1
 8006930:	4630      	mov	r0, r6
 8006932:	4629      	mov	r1, r5
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006938:	2900      	cmp	r1, #0
 800693a:	dc0d      	bgt.n	8006958 <__ieee754_sqrt+0x58>
 800693c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006940:	ea5c 0707 	orrs.w	r7, ip, r7
 8006944:	d0f4      	beq.n	8006930 <__ieee754_sqrt+0x30>
 8006946:	b139      	cbz	r1, 8006958 <__ieee754_sqrt+0x58>
 8006948:	4602      	mov	r2, r0
 800694a:	f7f9 fcc1 	bl	80002d0 <__aeabi_dsub>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	f7f9 ff9f 	bl	8000894 <__aeabi_ddiv>
 8006956:	e7e9      	b.n	800692c <__ieee754_sqrt+0x2c>
 8006958:	1512      	asrs	r2, r2, #20
 800695a:	d074      	beq.n	8006a46 <__ieee754_sqrt+0x146>
 800695c:	2000      	movs	r0, #0
 800695e:	07d5      	lsls	r5, r2, #31
 8006960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006964:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8006968:	bf5e      	ittt	pl
 800696a:	0fe3      	lsrpl	r3, r4, #31
 800696c:	0064      	lslpl	r4, r4, #1
 800696e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006972:	0fe3      	lsrs	r3, r4, #31
 8006974:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006978:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800697c:	2516      	movs	r5, #22
 800697e:	4601      	mov	r1, r0
 8006980:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006984:	1076      	asrs	r6, r6, #1
 8006986:	0064      	lsls	r4, r4, #1
 8006988:	188f      	adds	r7, r1, r2
 800698a:	429f      	cmp	r7, r3
 800698c:	bfde      	ittt	le
 800698e:	1bdb      	suble	r3, r3, r7
 8006990:	18b9      	addle	r1, r7, r2
 8006992:	1880      	addle	r0, r0, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	3d01      	subs	r5, #1
 8006998:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800699c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80069a0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80069a4:	d1f0      	bne.n	8006988 <__ieee754_sqrt+0x88>
 80069a6:	462a      	mov	r2, r5
 80069a8:	f04f 0e20 	mov.w	lr, #32
 80069ac:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80069b0:	428b      	cmp	r3, r1
 80069b2:	eb07 0c05 	add.w	ip, r7, r5
 80069b6:	dc02      	bgt.n	80069be <__ieee754_sqrt+0xbe>
 80069b8:	d113      	bne.n	80069e2 <__ieee754_sqrt+0xe2>
 80069ba:	45a4      	cmp	ip, r4
 80069bc:	d811      	bhi.n	80069e2 <__ieee754_sqrt+0xe2>
 80069be:	f1bc 0f00 	cmp.w	ip, #0
 80069c2:	eb0c 0507 	add.w	r5, ip, r7
 80069c6:	da43      	bge.n	8006a50 <__ieee754_sqrt+0x150>
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	db41      	blt.n	8006a50 <__ieee754_sqrt+0x150>
 80069cc:	f101 0801 	add.w	r8, r1, #1
 80069d0:	1a5b      	subs	r3, r3, r1
 80069d2:	4641      	mov	r1, r8
 80069d4:	45a4      	cmp	ip, r4
 80069d6:	bf88      	it	hi
 80069d8:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80069dc:	eba4 040c 	sub.w	r4, r4, ip
 80069e0:	443a      	add	r2, r7
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	f1be 0e01 	subs.w	lr, lr, #1
 80069e8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80069ec:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80069f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80069f4:	d1dc      	bne.n	80069b0 <__ieee754_sqrt+0xb0>
 80069f6:	4323      	orrs	r3, r4
 80069f8:	d006      	beq.n	8006a08 <__ieee754_sqrt+0x108>
 80069fa:	1c54      	adds	r4, r2, #1
 80069fc:	bf0b      	itete	eq
 80069fe:	4672      	moveq	r2, lr
 8006a00:	3201      	addne	r2, #1
 8006a02:	3001      	addeq	r0, #1
 8006a04:	f022 0201 	bicne.w	r2, r2, #1
 8006a08:	1043      	asrs	r3, r0, #1
 8006a0a:	07c1      	lsls	r1, r0, #31
 8006a0c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006a10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006a14:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006a18:	bf48      	it	mi
 8006a1a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006a1e:	4610      	mov	r0, r2
 8006a20:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006a24:	e782      	b.n	800692c <__ieee754_sqrt+0x2c>
 8006a26:	0ae3      	lsrs	r3, r4, #11
 8006a28:	3915      	subs	r1, #21
 8006a2a:	0564      	lsls	r4, r4, #21
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0fa      	beq.n	8006a26 <__ieee754_sqrt+0x126>
 8006a30:	02de      	lsls	r6, r3, #11
 8006a32:	d50a      	bpl.n	8006a4a <__ieee754_sqrt+0x14a>
 8006a34:	f1c2 0020 	rsb	r0, r2, #32
 8006a38:	fa24 f000 	lsr.w	r0, r4, r0
 8006a3c:	1e55      	subs	r5, r2, #1
 8006a3e:	4094      	lsls	r4, r2
 8006a40:	4303      	orrs	r3, r0
 8006a42:	1b4a      	subs	r2, r1, r5
 8006a44:	e78a      	b.n	800695c <__ieee754_sqrt+0x5c>
 8006a46:	4611      	mov	r1, r2
 8006a48:	e7f0      	b.n	8006a2c <__ieee754_sqrt+0x12c>
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	3201      	adds	r2, #1
 8006a4e:	e7ef      	b.n	8006a30 <__ieee754_sqrt+0x130>
 8006a50:	4688      	mov	r8, r1
 8006a52:	e7bd      	b.n	80069d0 <__ieee754_sqrt+0xd0>
 8006a54:	7ff00000 	.word	0x7ff00000

08006a58 <__kernel_cos>:
 8006a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a60:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006a64:	4680      	mov	r8, r0
 8006a66:	460f      	mov	r7, r1
 8006a68:	e9cd 2300 	strd	r2, r3, [sp]
 8006a6c:	da04      	bge.n	8006a78 <__kernel_cos+0x20>
 8006a6e:	f7fa f897 	bl	8000ba0 <__aeabi_d2iz>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f000 8086 	beq.w	8006b84 <__kernel_cos+0x12c>
 8006a78:	4642      	mov	r2, r8
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fdde 	bl	8000640 <__aeabi_dmul>
 8006a84:	2200      	movs	r2, #0
 8006a86:	4b4e      	ldr	r3, [pc, #312]	; (8006bc0 <__kernel_cos+0x168>)
 8006a88:	4604      	mov	r4, r0
 8006a8a:	460d      	mov	r5, r1
 8006a8c:	f7f9 fdd8 	bl	8000640 <__aeabi_dmul>
 8006a90:	a33f      	add	r3, pc, #252	; (adr r3, 8006b90 <__kernel_cos+0x138>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	4682      	mov	sl, r0
 8006a98:	468b      	mov	fp, r1
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7f9 fdcf 	bl	8000640 <__aeabi_dmul>
 8006aa2:	a33d      	add	r3, pc, #244	; (adr r3, 8006b98 <__kernel_cos+0x140>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fc14 	bl	80002d4 <__adddf3>
 8006aac:	4622      	mov	r2, r4
 8006aae:	462b      	mov	r3, r5
 8006ab0:	f7f9 fdc6 	bl	8000640 <__aeabi_dmul>
 8006ab4:	a33a      	add	r3, pc, #232	; (adr r3, 8006ba0 <__kernel_cos+0x148>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7f9 fc09 	bl	80002d0 <__aeabi_dsub>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f7f9 fdbd 	bl	8000640 <__aeabi_dmul>
 8006ac6:	a338      	add	r3, pc, #224	; (adr r3, 8006ba8 <__kernel_cos+0x150>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f7f9 fc02 	bl	80002d4 <__adddf3>
 8006ad0:	4622      	mov	r2, r4
 8006ad2:	462b      	mov	r3, r5
 8006ad4:	f7f9 fdb4 	bl	8000640 <__aeabi_dmul>
 8006ad8:	a335      	add	r3, pc, #212	; (adr r3, 8006bb0 <__kernel_cos+0x158>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fbf7 	bl	80002d0 <__aeabi_dsub>
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	f7f9 fdab 	bl	8000640 <__aeabi_dmul>
 8006aea:	a333      	add	r3, pc, #204	; (adr r3, 8006bb8 <__kernel_cos+0x160>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fbf0 	bl	80002d4 <__adddf3>
 8006af4:	4622      	mov	r2, r4
 8006af6:	462b      	mov	r3, r5
 8006af8:	f7f9 fda2 	bl	8000640 <__aeabi_dmul>
 8006afc:	4622      	mov	r2, r4
 8006afe:	462b      	mov	r3, r5
 8006b00:	f7f9 fd9e 	bl	8000640 <__aeabi_dmul>
 8006b04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b08:	4604      	mov	r4, r0
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fd96 	bl	8000640 <__aeabi_dmul>
 8006b14:	460b      	mov	r3, r1
 8006b16:	4602      	mov	r2, r0
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7f9 fbd8 	bl	80002d0 <__aeabi_dsub>
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <__kernel_cos+0x16c>)
 8006b22:	4680      	mov	r8, r0
 8006b24:	429e      	cmp	r6, r3
 8006b26:	4689      	mov	r9, r1
 8006b28:	dc0e      	bgt.n	8006b48 <__kernel_cos+0xf0>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4650      	mov	r0, sl
 8006b30:	4659      	mov	r1, fp
 8006b32:	f7f9 fbcd 	bl	80002d0 <__aeabi_dsub>
 8006b36:	4602      	mov	r2, r0
 8006b38:	2000      	movs	r0, #0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4922      	ldr	r1, [pc, #136]	; (8006bc8 <__kernel_cos+0x170>)
 8006b3e:	f7f9 fbc7 	bl	80002d0 <__aeabi_dsub>
 8006b42:	b003      	add	sp, #12
 8006b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b48:	2400      	movs	r4, #0
 8006b4a:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <__kernel_cos+0x174>)
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	429e      	cmp	r6, r3
 8006b50:	bfcc      	ite	gt
 8006b52:	4d1f      	ldrgt	r5, [pc, #124]	; (8006bd0 <__kernel_cos+0x178>)
 8006b54:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006b58:	462b      	mov	r3, r5
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	491a      	ldr	r1, [pc, #104]	; (8006bc8 <__kernel_cos+0x170>)
 8006b5e:	f7f9 fbb7 	bl	80002d0 <__aeabi_dsub>
 8006b62:	4622      	mov	r2, r4
 8006b64:	4606      	mov	r6, r0
 8006b66:	460f      	mov	r7, r1
 8006b68:	462b      	mov	r3, r5
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	4659      	mov	r1, fp
 8006b6e:	f7f9 fbaf 	bl	80002d0 <__aeabi_dsub>
 8006b72:	4642      	mov	r2, r8
 8006b74:	464b      	mov	r3, r9
 8006b76:	f7f9 fbab 	bl	80002d0 <__aeabi_dsub>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	e7dc      	b.n	8006b3e <__kernel_cos+0xe6>
 8006b84:	2000      	movs	r0, #0
 8006b86:	4910      	ldr	r1, [pc, #64]	; (8006bc8 <__kernel_cos+0x170>)
 8006b88:	e7db      	b.n	8006b42 <__kernel_cos+0xea>
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w
 8006b90:	be8838d4 	.word	0xbe8838d4
 8006b94:	bda8fae9 	.word	0xbda8fae9
 8006b98:	bdb4b1c4 	.word	0xbdb4b1c4
 8006b9c:	3e21ee9e 	.word	0x3e21ee9e
 8006ba0:	809c52ad 	.word	0x809c52ad
 8006ba4:	3e927e4f 	.word	0x3e927e4f
 8006ba8:	19cb1590 	.word	0x19cb1590
 8006bac:	3efa01a0 	.word	0x3efa01a0
 8006bb0:	16c15177 	.word	0x16c15177
 8006bb4:	3f56c16c 	.word	0x3f56c16c
 8006bb8:	5555554c 	.word	0x5555554c
 8006bbc:	3fa55555 	.word	0x3fa55555
 8006bc0:	3fe00000 	.word	0x3fe00000
 8006bc4:	3fd33332 	.word	0x3fd33332
 8006bc8:	3ff00000 	.word	0x3ff00000
 8006bcc:	3fe90000 	.word	0x3fe90000
 8006bd0:	3fd20000 	.word	0x3fd20000

08006bd4 <__kernel_rem_pio2>:
 8006bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006bdc:	9308      	str	r3, [sp, #32]
 8006bde:	9101      	str	r1, [sp, #4]
 8006be0:	4bc0      	ldr	r3, [pc, #768]	; (8006ee4 <__kernel_rem_pio2+0x310>)
 8006be2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006be4:	f112 0f14 	cmn.w	r2, #20
 8006be8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bec:	bfa8      	it	ge
 8006bee:	1ed4      	subge	r4, r2, #3
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	bfb8      	it	lt
 8006bf6:	2400      	movlt	r4, #0
 8006bf8:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bfc:	9306      	str	r3, [sp, #24]
 8006bfe:	bfa4      	itt	ge
 8006c00:	2318      	movge	r3, #24
 8006c02:	fb94 f4f3 	sdivge	r4, r4, r3
 8006c06:	f06f 0317 	mvn.w	r3, #23
 8006c0a:	fb04 3303 	mla	r3, r4, r3, r3
 8006c0e:	eb03 0a02 	add.w	sl, r3, r2
 8006c12:	9a06      	ldr	r2, [sp, #24]
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	1aa7      	subs	r7, r4, r2
 8006c18:	eb03 0802 	add.w	r8, r3, r2
 8006c1c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006c1e:	2500      	movs	r5, #0
 8006c20:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006c24:	2200      	movs	r2, #0
 8006c26:	2300      	movs	r3, #0
 8006c28:	9009      	str	r0, [sp, #36]	; 0x24
 8006c2a:	ae20      	add	r6, sp, #128	; 0x80
 8006c2c:	4545      	cmp	r5, r8
 8006c2e:	dd19      	ble.n	8006c64 <__kernel_rem_pio2+0x90>
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	aa20      	add	r2, sp, #128	; 0x80
 8006c34:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006c38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006c3c:	f1c3 0301 	rsb	r3, r3, #1
 8006c40:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	9a04      	ldr	r2, [sp, #16]
 8006c4a:	4443      	add	r3, r8
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	db35      	blt.n	8006cbc <__kernel_rem_pio2+0xe8>
 8006c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c52:	2200      	movs	r2, #0
 8006c54:	f1a3 0908 	sub.w	r9, r3, #8
 8006c58:	2300      	movs	r3, #0
 8006c5a:	462f      	mov	r7, r5
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c62:	e01f      	b.n	8006ca4 <__kernel_rem_pio2+0xd0>
 8006c64:	42ef      	cmn	r7, r5
 8006c66:	d40b      	bmi.n	8006c80 <__kernel_rem_pio2+0xac>
 8006c68:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006c6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c70:	f7f9 fc7c 	bl	800056c <__aeabi_i2d>
 8006c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c78:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c7c:	3501      	adds	r5, #1
 8006c7e:	e7d5      	b.n	8006c2c <__kernel_rem_pio2+0x58>
 8006c80:	4610      	mov	r0, r2
 8006c82:	4619      	mov	r1, r3
 8006c84:	e7f8      	b.n	8006c78 <__kernel_rem_pio2+0xa4>
 8006c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006c8e:	f7f9 fcd7 	bl	8000640 <__aeabi_dmul>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c9a:	f7f9 fb1b 	bl	80002d4 <__adddf3>
 8006c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ca2:	3601      	adds	r6, #1
 8006ca4:	9b06      	ldr	r3, [sp, #24]
 8006ca6:	3f08      	subs	r7, #8
 8006ca8:	429e      	cmp	r6, r3
 8006caa:	ddec      	ble.n	8006c86 <__kernel_rem_pio2+0xb2>
 8006cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cb0:	3508      	adds	r5, #8
 8006cb2:	e8eb 2302 	strd	r2, r3, [fp], #8
 8006cb6:	f108 0801 	add.w	r8, r8, #1
 8006cba:	e7c4      	b.n	8006c46 <__kernel_rem_pio2+0x72>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	aa0c      	add	r2, sp, #48	; 0x30
 8006cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cc6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006cc8:	9f04      	ldr	r7, [sp, #16]
 8006cca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006cce:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd0:	463e      	mov	r6, r7
 8006cd2:	ab98      	add	r3, sp, #608	; 0x260
 8006cd4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006cd8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006cdc:	f8cd b008 	str.w	fp, [sp, #8]
 8006ce0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006ce4:	2e00      	cmp	r6, #0
 8006ce6:	dc71      	bgt.n	8006dcc <__kernel_rem_pio2+0x1f8>
 8006ce8:	4652      	mov	r2, sl
 8006cea:	4620      	mov	r0, r4
 8006cec:	4629      	mov	r1, r5
 8006cee:	f000 fc8b 	bl	8007608 <scalbn>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	f7f9 fca0 	bl	8000640 <__aeabi_dmul>
 8006d00:	f000 fb72 	bl	80073e8 <floor>
 8006d04:	2200      	movs	r2, #0
 8006d06:	4b78      	ldr	r3, [pc, #480]	; (8006ee8 <__kernel_rem_pio2+0x314>)
 8006d08:	f7f9 fc9a 	bl	8000640 <__aeabi_dmul>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4620      	mov	r0, r4
 8006d12:	4629      	mov	r1, r5
 8006d14:	f7f9 fadc 	bl	80002d0 <__aeabi_dsub>
 8006d18:	460d      	mov	r5, r1
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	f7f9 ff40 	bl	8000ba0 <__aeabi_d2iz>
 8006d20:	9007      	str	r0, [sp, #28]
 8006d22:	f7f9 fc23 	bl	800056c <__aeabi_i2d>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	f7f9 facf 	bl	80002d0 <__aeabi_dsub>
 8006d32:	f1ba 0f00 	cmp.w	sl, #0
 8006d36:	4680      	mov	r8, r0
 8006d38:	4689      	mov	r9, r1
 8006d3a:	dd70      	ble.n	8006e1e <__kernel_rem_pio2+0x24a>
 8006d3c:	1e7a      	subs	r2, r7, #1
 8006d3e:	ab0c      	add	r3, sp, #48	; 0x30
 8006d40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006d44:	9c07      	ldr	r4, [sp, #28]
 8006d46:	f1ca 0118 	rsb	r1, sl, #24
 8006d4a:	fa40 f301 	asr.w	r3, r0, r1
 8006d4e:	441c      	add	r4, r3
 8006d50:	408b      	lsls	r3, r1
 8006d52:	1ac0      	subs	r0, r0, r3
 8006d54:	ab0c      	add	r3, sp, #48	; 0x30
 8006d56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006d5a:	f1ca 0317 	rsb	r3, sl, #23
 8006d5e:	9407      	str	r4, [sp, #28]
 8006d60:	fa40 f303 	asr.w	r3, r0, r3
 8006d64:	9302      	str	r3, [sp, #8]
 8006d66:	9b02      	ldr	r3, [sp, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dd66      	ble.n	8006e3a <__kernel_rem_pio2+0x266>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006d72:	4614      	mov	r4, r2
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	3301      	adds	r3, #1
 8006d78:	9307      	str	r3, [sp, #28]
 8006d7a:	4297      	cmp	r7, r2
 8006d7c:	f300 809f 	bgt.w	8006ebe <__kernel_rem_pio2+0x2ea>
 8006d80:	f1ba 0f00 	cmp.w	sl, #0
 8006d84:	dd07      	ble.n	8006d96 <__kernel_rem_pio2+0x1c2>
 8006d86:	f1ba 0f01 	cmp.w	sl, #1
 8006d8a:	f000 80b9 	beq.w	8006f00 <__kernel_rem_pio2+0x32c>
 8006d8e:	f1ba 0f02 	cmp.w	sl, #2
 8006d92:	f000 80bf 	beq.w	8006f14 <__kernel_rem_pio2+0x340>
 8006d96:	9b02      	ldr	r3, [sp, #8]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d14e      	bne.n	8006e3a <__kernel_rem_pio2+0x266>
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	2000      	movs	r0, #0
 8006da2:	4952      	ldr	r1, [pc, #328]	; (8006eec <__kernel_rem_pio2+0x318>)
 8006da4:	f7f9 fa94 	bl	80002d0 <__aeabi_dsub>
 8006da8:	4680      	mov	r8, r0
 8006daa:	4689      	mov	r9, r1
 8006dac:	2c00      	cmp	r4, #0
 8006dae:	d044      	beq.n	8006e3a <__kernel_rem_pio2+0x266>
 8006db0:	4652      	mov	r2, sl
 8006db2:	2000      	movs	r0, #0
 8006db4:	494d      	ldr	r1, [pc, #308]	; (8006eec <__kernel_rem_pio2+0x318>)
 8006db6:	f000 fc27 	bl	8007608 <scalbn>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	f7f9 fa85 	bl	80002d0 <__aeabi_dsub>
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	4689      	mov	r9, r1
 8006dca:	e036      	b.n	8006e3a <__kernel_rem_pio2+0x266>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4b48      	ldr	r3, [pc, #288]	; (8006ef0 <__kernel_rem_pio2+0x31c>)
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	f7f9 fc34 	bl	8000640 <__aeabi_dmul>
 8006dd8:	f7f9 fee2 	bl	8000ba0 <__aeabi_d2iz>
 8006ddc:	f7f9 fbc6 	bl	800056c <__aeabi_i2d>
 8006de0:	2200      	movs	r2, #0
 8006de2:	4b44      	ldr	r3, [pc, #272]	; (8006ef4 <__kernel_rem_pio2+0x320>)
 8006de4:	4680      	mov	r8, r0
 8006de6:	4689      	mov	r9, r1
 8006de8:	f7f9 fc2a 	bl	8000640 <__aeabi_dmul>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4620      	mov	r0, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	f7f9 fa6c 	bl	80002d0 <__aeabi_dsub>
 8006df8:	f7f9 fed2 	bl	8000ba0 <__aeabi_d2iz>
 8006dfc:	9b02      	ldr	r3, [sp, #8]
 8006dfe:	3e01      	subs	r6, #1
 8006e00:	f843 0b04 	str.w	r0, [r3], #4
 8006e04:	9302      	str	r3, [sp, #8]
 8006e06:	ab70      	add	r3, sp, #448	; 0x1c0
 8006e08:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	4649      	mov	r1, r9
 8006e14:	f7f9 fa5e 	bl	80002d4 <__adddf3>
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	e762      	b.n	8006ce4 <__kernel_rem_pio2+0x110>
 8006e1e:	d105      	bne.n	8006e2c <__kernel_rem_pio2+0x258>
 8006e20:	1e7b      	subs	r3, r7, #1
 8006e22:	aa0c      	add	r2, sp, #48	; 0x30
 8006e24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006e28:	15c3      	asrs	r3, r0, #23
 8006e2a:	e79b      	b.n	8006d64 <__kernel_rem_pio2+0x190>
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4b32      	ldr	r3, [pc, #200]	; (8006ef8 <__kernel_rem_pio2+0x324>)
 8006e30:	f7f9 fe8c 	bl	8000b4c <__aeabi_dcmpge>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d13f      	bne.n	8006eb8 <__kernel_rem_pio2+0x2e4>
 8006e38:	9002      	str	r0, [sp, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4640      	mov	r0, r8
 8006e40:	4649      	mov	r1, r9
 8006e42:	f7f9 fe65 	bl	8000b10 <__aeabi_dcmpeq>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f000 80b5 	beq.w	8006fb6 <__kernel_rem_pio2+0x3e2>
 8006e4c:	1e7c      	subs	r4, r7, #1
 8006e4e:	4623      	mov	r3, r4
 8006e50:	2200      	movs	r2, #0
 8006e52:	9904      	ldr	r1, [sp, #16]
 8006e54:	428b      	cmp	r3, r1
 8006e56:	da64      	bge.n	8006f22 <__kernel_rem_pio2+0x34e>
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	d078      	beq.n	8006f4e <__kernel_rem_pio2+0x37a>
 8006e5c:	ab0c      	add	r3, sp, #48	; 0x30
 8006e5e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006e62:	f1aa 0a18 	sub.w	sl, sl, #24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80a3 	beq.w	8006fb2 <__kernel_rem_pio2+0x3de>
 8006e6c:	4652      	mov	r2, sl
 8006e6e:	2000      	movs	r0, #0
 8006e70:	491e      	ldr	r1, [pc, #120]	; (8006eec <__kernel_rem_pio2+0x318>)
 8006e72:	f000 fbc9 	bl	8007608 <scalbn>
 8006e76:	46a2      	mov	sl, r4
 8006e78:	4606      	mov	r6, r0
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	f04f 0800 	mov.w	r8, #0
 8006e80:	00e3      	lsls	r3, r4, #3
 8006e82:	9306      	str	r3, [sp, #24]
 8006e84:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006ef0 <__kernel_rem_pio2+0x31c>
 8006e88:	ab70      	add	r3, sp, #448	; 0x1c0
 8006e8a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006e8e:	f1ba 0f00 	cmp.w	sl, #0
 8006e92:	f280 80c6 	bge.w	8007022 <__kernel_rem_pio2+0x44e>
 8006e96:	4627      	mov	r7, r4
 8006e98:	f04f 0800 	mov.w	r8, #0
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	f2c0 80f3 	blt.w	8007088 <__kernel_rem_pio2+0x4b4>
 8006ea2:	4b16      	ldr	r3, [pc, #88]	; (8006efc <__kernel_rem_pio2+0x328>)
 8006ea4:	f04f 0a00 	mov.w	sl, #0
 8006ea8:	461d      	mov	r5, r3
 8006eaa:	ab70      	add	r3, sp, #448	; 0x1c0
 8006eac:	f04f 0b00 	mov.w	fp, #0
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006eb6:	e0d9      	b.n	800706c <__kernel_rem_pio2+0x498>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	9302      	str	r3, [sp, #8]
 8006ebc:	e756      	b.n	8006d6c <__kernel_rem_pio2+0x198>
 8006ebe:	f8db 3000 	ldr.w	r3, [fp]
 8006ec2:	b954      	cbnz	r4, 8006eda <__kernel_rem_pio2+0x306>
 8006ec4:	b123      	cbz	r3, 8006ed0 <__kernel_rem_pio2+0x2fc>
 8006ec6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006eca:	f8cb 3000 	str.w	r3, [fp]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	461c      	mov	r4, r3
 8006ed2:	3201      	adds	r2, #1
 8006ed4:	f10b 0b04 	add.w	fp, fp, #4
 8006ed8:	e74f      	b.n	8006d7a <__kernel_rem_pio2+0x1a6>
 8006eda:	1acb      	subs	r3, r1, r3
 8006edc:	f8cb 3000 	str.w	r3, [fp]
 8006ee0:	4623      	mov	r3, r4
 8006ee2:	e7f5      	b.n	8006ed0 <__kernel_rem_pio2+0x2fc>
 8006ee4:	08007b78 	.word	0x08007b78
 8006ee8:	40200000 	.word	0x40200000
 8006eec:	3ff00000 	.word	0x3ff00000
 8006ef0:	3e700000 	.word	0x3e700000
 8006ef4:	41700000 	.word	0x41700000
 8006ef8:	3fe00000 	.word	0x3fe00000
 8006efc:	08007b38 	.word	0x08007b38
 8006f00:	1e7a      	subs	r2, r7, #1
 8006f02:	ab0c      	add	r3, sp, #48	; 0x30
 8006f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f08:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f0c:	a90c      	add	r1, sp, #48	; 0x30
 8006f0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f12:	e740      	b.n	8006d96 <__kernel_rem_pio2+0x1c2>
 8006f14:	1e7a      	subs	r2, r7, #1
 8006f16:	ab0c      	add	r3, sp, #48	; 0x30
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006f20:	e7f4      	b.n	8006f0c <__kernel_rem_pio2+0x338>
 8006f22:	a90c      	add	r1, sp, #48	; 0x30
 8006f24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	e791      	b.n	8006e52 <__kernel_rem_pio2+0x27e>
 8006f2e:	3401      	adds	r4, #1
 8006f30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	d0fa      	beq.n	8006f2e <__kernel_rem_pio2+0x35a>
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	1c7e      	adds	r6, r7, #1
 8006f3c:	18fd      	adds	r5, r7, r3
 8006f3e:	ab20      	add	r3, sp, #128	; 0x80
 8006f40:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006f44:	443c      	add	r4, r7
 8006f46:	42b4      	cmp	r4, r6
 8006f48:	da04      	bge.n	8006f54 <__kernel_rem_pio2+0x380>
 8006f4a:	4627      	mov	r7, r4
 8006f4c:	e6c0      	b.n	8006cd0 <__kernel_rem_pio2+0xfc>
 8006f4e:	2401      	movs	r4, #1
 8006f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f52:	e7ed      	b.n	8006f30 <__kernel_rem_pio2+0x35c>
 8006f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f56:	462f      	mov	r7, r5
 8006f58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f5c:	f7f9 fb06 	bl	800056c <__aeabi_i2d>
 8006f60:	f04f 0b00 	mov.w	fp, #0
 8006f64:	f04f 0800 	mov.w	r8, #0
 8006f68:	f04f 0900 	mov.w	r9, #0
 8006f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f6e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8006f72:	3b08      	subs	r3, #8
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	9b06      	ldr	r3, [sp, #24]
 8006f78:	459b      	cmp	fp, r3
 8006f7a:	dd07      	ble.n	8006f8c <__kernel_rem_pio2+0x3b8>
 8006f7c:	ab70      	add	r3, sp, #448	; 0x1c0
 8006f7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f82:	463d      	mov	r5, r7
 8006f84:	e9c3 8900 	strd	r8, r9, [r3]
 8006f88:	3601      	adds	r6, #1
 8006f8a:	e7dc      	b.n	8006f46 <__kernel_rem_pio2+0x372>
 8006f8c:	9902      	ldr	r1, [sp, #8]
 8006f8e:	f10b 0b01 	add.w	fp, fp, #1
 8006f92:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006f96:	9102      	str	r1, [sp, #8]
 8006f98:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8006f9c:	f7f9 fb50 	bl	8000640 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 f994 	bl	80002d4 <__adddf3>
 8006fac:	4680      	mov	r8, r0
 8006fae:	4689      	mov	r9, r1
 8006fb0:	e7e1      	b.n	8006f76 <__kernel_rem_pio2+0x3a2>
 8006fb2:	3c01      	subs	r4, #1
 8006fb4:	e752      	b.n	8006e5c <__kernel_rem_pio2+0x288>
 8006fb6:	f1ca 0200 	rsb	r2, sl, #0
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f000 fb23 	bl	8007608 <scalbn>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4ba5      	ldr	r3, [pc, #660]	; (800725c <__kernel_rem_pio2+0x688>)
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	460d      	mov	r5, r1
 8006fca:	f7f9 fdbf 	bl	8000b4c <__aeabi_dcmpge>
 8006fce:	b1f8      	cbz	r0, 8007010 <__kernel_rem_pio2+0x43c>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4ba3      	ldr	r3, [pc, #652]	; (8007260 <__kernel_rem_pio2+0x68c>)
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7f9 fb32 	bl	8000640 <__aeabi_dmul>
 8006fdc:	f7f9 fde0 	bl	8000ba0 <__aeabi_d2iz>
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	f7f9 fac3 	bl	800056c <__aeabi_i2d>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4b9c      	ldr	r3, [pc, #624]	; (800725c <__kernel_rem_pio2+0x688>)
 8006fea:	f7f9 fb29 	bl	8000640 <__aeabi_dmul>
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7f9 f96b 	bl	80002d0 <__aeabi_dsub>
 8006ffa:	f7f9 fdd1 	bl	8000ba0 <__aeabi_d2iz>
 8006ffe:	1c7c      	adds	r4, r7, #1
 8007000:	ab0c      	add	r3, sp, #48	; 0x30
 8007002:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007006:	f10a 0a18 	add.w	sl, sl, #24
 800700a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800700e:	e72d      	b.n	8006e6c <__kernel_rem_pio2+0x298>
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f7f9 fdc4 	bl	8000ba0 <__aeabi_d2iz>
 8007018:	ab0c      	add	r3, sp, #48	; 0x30
 800701a:	463c      	mov	r4, r7
 800701c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007020:	e724      	b.n	8006e6c <__kernel_rem_pio2+0x298>
 8007022:	ab0c      	add	r3, sp, #48	; 0x30
 8007024:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007028:	f7f9 faa0 	bl	800056c <__aeabi_i2d>
 800702c:	4632      	mov	r2, r6
 800702e:	463b      	mov	r3, r7
 8007030:	f7f9 fb06 	bl	8000640 <__aeabi_dmul>
 8007034:	4642      	mov	r2, r8
 8007036:	e86b 0102 	strd	r0, r1, [fp], #-8
 800703a:	464b      	mov	r3, r9
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 fafe 	bl	8000640 <__aeabi_dmul>
 8007044:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007048:	4606      	mov	r6, r0
 800704a:	460f      	mov	r7, r1
 800704c:	e71f      	b.n	8006e8e <__kernel_rem_pio2+0x2ba>
 800704e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007052:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007056:	f7f9 faf3 	bl	8000640 <__aeabi_dmul>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4650      	mov	r0, sl
 8007060:	4659      	mov	r1, fp
 8007062:	f7f9 f937 	bl	80002d4 <__adddf3>
 8007066:	4682      	mov	sl, r0
 8007068:	468b      	mov	fp, r1
 800706a:	3601      	adds	r6, #1
 800706c:	9b04      	ldr	r3, [sp, #16]
 800706e:	429e      	cmp	r6, r3
 8007070:	dc01      	bgt.n	8007076 <__kernel_rem_pio2+0x4a2>
 8007072:	45b0      	cmp	r8, r6
 8007074:	daeb      	bge.n	800704e <__kernel_rem_pio2+0x47a>
 8007076:	ab48      	add	r3, sp, #288	; 0x120
 8007078:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800707c:	e9c3 ab00 	strd	sl, fp, [r3]
 8007080:	3f01      	subs	r7, #1
 8007082:	f108 0801 	add.w	r8, r8, #1
 8007086:	e709      	b.n	8006e9c <__kernel_rem_pio2+0x2c8>
 8007088:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800708a:	2b02      	cmp	r3, #2
 800708c:	dc09      	bgt.n	80070a2 <__kernel_rem_pio2+0x4ce>
 800708e:	2b00      	cmp	r3, #0
 8007090:	dc34      	bgt.n	80070fc <__kernel_rem_pio2+0x528>
 8007092:	d05e      	beq.n	8007152 <__kernel_rem_pio2+0x57e>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	f003 0007 	and.w	r0, r3, #7
 800709a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d1f5      	bne.n	8007094 <__kernel_rem_pio2+0x4c0>
 80070a8:	9a06      	ldr	r2, [sp, #24]
 80070aa:	ab48      	add	r3, sp, #288	; 0x120
 80070ac:	441a      	add	r2, r3
 80070ae:	4615      	mov	r5, r2
 80070b0:	4692      	mov	sl, r2
 80070b2:	46a3      	mov	fp, r4
 80070b4:	f1bb 0f00 	cmp.w	fp, #0
 80070b8:	dc7a      	bgt.n	80071b0 <__kernel_rem_pio2+0x5dc>
 80070ba:	46aa      	mov	sl, r5
 80070bc:	46a3      	mov	fp, r4
 80070be:	f1bb 0f01 	cmp.w	fp, #1
 80070c2:	f300 8094 	bgt.w	80071ee <__kernel_rem_pio2+0x61a>
 80070c6:	2700      	movs	r7, #0
 80070c8:	463e      	mov	r6, r7
 80070ca:	2c01      	cmp	r4, #1
 80070cc:	f300 80ae 	bgt.w	800722c <__kernel_rem_pio2+0x658>
 80070d0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80070d4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 80b0 	bne.w	8007240 <__kernel_rem_pio2+0x66c>
 80070e0:	4603      	mov	r3, r0
 80070e2:	462a      	mov	r2, r5
 80070e4:	9801      	ldr	r0, [sp, #4]
 80070e6:	e9c0 2300 	strd	r2, r3, [r0]
 80070ea:	4622      	mov	r2, r4
 80070ec:	460b      	mov	r3, r1
 80070ee:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80070f2:	463a      	mov	r2, r7
 80070f4:	4633      	mov	r3, r6
 80070f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80070fa:	e7cb      	b.n	8007094 <__kernel_rem_pio2+0x4c0>
 80070fc:	2000      	movs	r0, #0
 80070fe:	9a06      	ldr	r2, [sp, #24]
 8007100:	ab48      	add	r3, sp, #288	; 0x120
 8007102:	441a      	add	r2, r3
 8007104:	4615      	mov	r5, r2
 8007106:	46a0      	mov	r8, r4
 8007108:	4601      	mov	r1, r0
 800710a:	f1b8 0f00 	cmp.w	r8, #0
 800710e:	da3c      	bge.n	800718a <__kernel_rem_pio2+0x5b6>
 8007110:	9b02      	ldr	r3, [sp, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d040      	beq.n	8007198 <__kernel_rem_pio2+0x5c4>
 8007116:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800711a:	4602      	mov	r2, r0
 800711c:	462b      	mov	r3, r5
 800711e:	9d01      	ldr	r5, [sp, #4]
 8007120:	2601      	movs	r6, #1
 8007122:	e9c5 2300 	strd	r2, r3, [r5]
 8007126:	460b      	mov	r3, r1
 8007128:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800712c:	f7f9 f8d0 	bl	80002d0 <__aeabi_dsub>
 8007130:	4684      	mov	ip, r0
 8007132:	460f      	mov	r7, r1
 8007134:	ad48      	add	r5, sp, #288	; 0x120
 8007136:	42b4      	cmp	r4, r6
 8007138:	f105 0508 	add.w	r5, r5, #8
 800713c:	da2e      	bge.n	800719c <__kernel_rem_pio2+0x5c8>
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	b10b      	cbz	r3, 8007146 <__kernel_rem_pio2+0x572>
 8007142:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007146:	4662      	mov	r2, ip
 8007148:	463b      	mov	r3, r7
 800714a:	9901      	ldr	r1, [sp, #4]
 800714c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007150:	e7a0      	b.n	8007094 <__kernel_rem_pio2+0x4c0>
 8007152:	9a06      	ldr	r2, [sp, #24]
 8007154:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007156:	ab48      	add	r3, sp, #288	; 0x120
 8007158:	441a      	add	r2, r3
 800715a:	4615      	mov	r5, r2
 800715c:	4637      	mov	r7, r6
 800715e:	2c00      	cmp	r4, #0
 8007160:	da09      	bge.n	8007176 <__kernel_rem_pio2+0x5a2>
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	b10b      	cbz	r3, 800716a <__kernel_rem_pio2+0x596>
 8007166:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800716a:	4632      	mov	r2, r6
 800716c:	463b      	mov	r3, r7
 800716e:	9901      	ldr	r1, [sp, #4]
 8007170:	e9c1 2300 	strd	r2, r3, [r1]
 8007174:	e78e      	b.n	8007094 <__kernel_rem_pio2+0x4c0>
 8007176:	4630      	mov	r0, r6
 8007178:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800717c:	4639      	mov	r1, r7
 800717e:	f7f9 f8a9 	bl	80002d4 <__adddf3>
 8007182:	3c01      	subs	r4, #1
 8007184:	4606      	mov	r6, r0
 8007186:	460f      	mov	r7, r1
 8007188:	e7e9      	b.n	800715e <__kernel_rem_pio2+0x58a>
 800718a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800718e:	f7f9 f8a1 	bl	80002d4 <__adddf3>
 8007192:	f108 38ff 	add.w	r8, r8, #4294967295
 8007196:	e7b8      	b.n	800710a <__kernel_rem_pio2+0x536>
 8007198:	460d      	mov	r5, r1
 800719a:	e7be      	b.n	800711a <__kernel_rem_pio2+0x546>
 800719c:	4660      	mov	r0, ip
 800719e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f896 	bl	80002d4 <__adddf3>
 80071a8:	3601      	adds	r6, #1
 80071aa:	4684      	mov	ip, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	e7c2      	b.n	8007136 <__kernel_rem_pio2+0x562>
 80071b0:	e9da 6700 	ldrd	r6, r7, [sl]
 80071b4:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80071b8:	4632      	mov	r2, r6
 80071ba:	463b      	mov	r3, r7
 80071bc:	4640      	mov	r0, r8
 80071be:	4649      	mov	r1, r9
 80071c0:	f7f9 f888 	bl	80002d4 <__adddf3>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 f87e 	bl	80002d0 <__aeabi_dsub>
 80071d4:	4632      	mov	r2, r6
 80071d6:	463b      	mov	r3, r7
 80071d8:	f7f9 f87c 	bl	80002d4 <__adddf3>
 80071dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80071e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071e8:	e9ca 2300 	strd	r2, r3, [sl]
 80071ec:	e762      	b.n	80070b4 <__kernel_rem_pio2+0x4e0>
 80071ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80071f2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	f7f9 f869 	bl	80002d4 <__adddf3>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f9 f85f 	bl	80002d0 <__aeabi_dsub>
 8007212:	4642      	mov	r2, r8
 8007214:	464b      	mov	r3, r9
 8007216:	f7f9 f85d 	bl	80002d4 <__adddf3>
 800721a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800721e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007222:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007226:	e9ca 2300 	strd	r2, r3, [sl]
 800722a:	e748      	b.n	80070be <__kernel_rem_pio2+0x4ea>
 800722c:	4638      	mov	r0, r7
 800722e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007232:	4631      	mov	r1, r6
 8007234:	f7f9 f84e 	bl	80002d4 <__adddf3>
 8007238:	3c01      	subs	r4, #1
 800723a:	4607      	mov	r7, r0
 800723c:	460e      	mov	r6, r1
 800723e:	e744      	b.n	80070ca <__kernel_rem_pio2+0x4f6>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007246:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800724a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800724e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007252:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007256:	601d      	str	r5, [r3, #0]
 8007258:	615e      	str	r6, [r3, #20]
 800725a:	e71b      	b.n	8007094 <__kernel_rem_pio2+0x4c0>
 800725c:	41700000 	.word	0x41700000
 8007260:	3e700000 	.word	0x3e700000
 8007264:	00000000 	.word	0x00000000

08007268 <__kernel_sin>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	e9cd 2300 	strd	r2, r3, [sp]
 8007272:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007276:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800727a:	4682      	mov	sl, r0
 800727c:	460c      	mov	r4, r1
 800727e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007280:	da03      	bge.n	800728a <__kernel_sin+0x22>
 8007282:	f7f9 fc8d 	bl	8000ba0 <__aeabi_d2iz>
 8007286:	2800      	cmp	r0, #0
 8007288:	d050      	beq.n	800732c <__kernel_sin+0xc4>
 800728a:	4652      	mov	r2, sl
 800728c:	4623      	mov	r3, r4
 800728e:	4650      	mov	r0, sl
 8007290:	4621      	mov	r1, r4
 8007292:	f7f9 f9d5 	bl	8000640 <__aeabi_dmul>
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4650      	mov	r0, sl
 80072a0:	4621      	mov	r1, r4
 80072a2:	f7f9 f9cd 	bl	8000640 <__aeabi_dmul>
 80072a6:	a33e      	add	r3, pc, #248	; (adr r3, 80073a0 <__kernel_sin+0x138>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	4680      	mov	r8, r0
 80072ae:	4689      	mov	r9, r1
 80072b0:	4630      	mov	r0, r6
 80072b2:	4639      	mov	r1, r7
 80072b4:	f7f9 f9c4 	bl	8000640 <__aeabi_dmul>
 80072b8:	a33b      	add	r3, pc, #236	; (adr r3, 80073a8 <__kernel_sin+0x140>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f7f9 f807 	bl	80002d0 <__aeabi_dsub>
 80072c2:	4632      	mov	r2, r6
 80072c4:	463b      	mov	r3, r7
 80072c6:	f7f9 f9bb 	bl	8000640 <__aeabi_dmul>
 80072ca:	a339      	add	r3, pc, #228	; (adr r3, 80073b0 <__kernel_sin+0x148>)
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f7f9 f800 	bl	80002d4 <__adddf3>
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	f7f9 f9b2 	bl	8000640 <__aeabi_dmul>
 80072dc:	a336      	add	r3, pc, #216	; (adr r3, 80073b8 <__kernel_sin+0x150>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	f7f8 fff5 	bl	80002d0 <__aeabi_dsub>
 80072e6:	4632      	mov	r2, r6
 80072e8:	463b      	mov	r3, r7
 80072ea:	f7f9 f9a9 	bl	8000640 <__aeabi_dmul>
 80072ee:	a334      	add	r3, pc, #208	; (adr r3, 80073c0 <__kernel_sin+0x158>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f7f8 ffee 	bl	80002d4 <__adddf3>
 80072f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fc:	b9dd      	cbnz	r5, 8007336 <__kernel_sin+0xce>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f9 f99b 	bl	8000640 <__aeabi_dmul>
 800730a:	a32f      	add	r3, pc, #188	; (adr r3, 80073c8 <__kernel_sin+0x160>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f7f8 ffde 	bl	80002d0 <__aeabi_dsub>
 8007314:	4642      	mov	r2, r8
 8007316:	464b      	mov	r3, r9
 8007318:	f7f9 f992 	bl	8000640 <__aeabi_dmul>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4650      	mov	r0, sl
 8007322:	4621      	mov	r1, r4
 8007324:	f7f8 ffd6 	bl	80002d4 <__adddf3>
 8007328:	4682      	mov	sl, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4650      	mov	r0, sl
 800732e:	4621      	mov	r1, r4
 8007330:	b006      	add	sp, #24
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	2200      	movs	r2, #0
 8007338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800733c:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <__kernel_sin+0x168>)
 800733e:	f7f9 f97f 	bl	8000640 <__aeabi_dmul>
 8007342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800734a:	4640      	mov	r0, r8
 800734c:	4649      	mov	r1, r9
 800734e:	f7f9 f977 	bl	8000640 <__aeabi_dmul>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800735a:	f7f8 ffb9 	bl	80002d0 <__aeabi_dsub>
 800735e:	4632      	mov	r2, r6
 8007360:	463b      	mov	r3, r7
 8007362:	f7f9 f96d 	bl	8000640 <__aeabi_dmul>
 8007366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800736a:	f7f8 ffb1 	bl	80002d0 <__aeabi_dsub>
 800736e:	a316      	add	r3, pc, #88	; (adr r3, 80073c8 <__kernel_sin+0x160>)
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	4606      	mov	r6, r0
 8007376:	460f      	mov	r7, r1
 8007378:	4640      	mov	r0, r8
 800737a:	4649      	mov	r1, r9
 800737c:	f7f9 f960 	bl	8000640 <__aeabi_dmul>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	f7f8 ffa4 	bl	80002d4 <__adddf3>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4650      	mov	r0, sl
 8007392:	4621      	mov	r1, r4
 8007394:	f7f8 ff9c 	bl	80002d0 <__aeabi_dsub>
 8007398:	e7c6      	b.n	8007328 <__kernel_sin+0xc0>
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w
 80073a0:	5acfd57c 	.word	0x5acfd57c
 80073a4:	3de5d93a 	.word	0x3de5d93a
 80073a8:	8a2b9ceb 	.word	0x8a2b9ceb
 80073ac:	3e5ae5e6 	.word	0x3e5ae5e6
 80073b0:	57b1fe7d 	.word	0x57b1fe7d
 80073b4:	3ec71de3 	.word	0x3ec71de3
 80073b8:	19c161d5 	.word	0x19c161d5
 80073bc:	3f2a01a0 	.word	0x3f2a01a0
 80073c0:	1110f8a6 	.word	0x1110f8a6
 80073c4:	3f811111 	.word	0x3f811111
 80073c8:	55555549 	.word	0x55555549
 80073cc:	3fc55555 	.word	0x3fc55555
 80073d0:	3fe00000 	.word	0x3fe00000

080073d4 <fabs>:
 80073d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073d8:	4770      	bx	lr

080073da <finite>:
 80073da:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80073de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80073e2:	0fc0      	lsrs	r0, r0, #31
 80073e4:	4770      	bx	lr
	...

080073e8 <floor>:
 80073e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80073f0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80073f4:	2e13      	cmp	r6, #19
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4607      	mov	r7, r0
 80073fc:	460c      	mov	r4, r1
 80073fe:	4605      	mov	r5, r0
 8007400:	dc34      	bgt.n	800746c <floor+0x84>
 8007402:	2e00      	cmp	r6, #0
 8007404:	da15      	bge.n	8007432 <floor+0x4a>
 8007406:	a334      	add	r3, pc, #208	; (adr r3, 80074d8 <floor+0xf0>)
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f7f8 ff62 	bl	80002d4 <__adddf3>
 8007410:	2200      	movs	r2, #0
 8007412:	2300      	movs	r3, #0
 8007414:	f7f9 fba4 	bl	8000b60 <__aeabi_dcmpgt>
 8007418:	b140      	cbz	r0, 800742c <floor+0x44>
 800741a:	2c00      	cmp	r4, #0
 800741c:	da59      	bge.n	80074d2 <floor+0xea>
 800741e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007422:	ea57 0503 	orrs.w	r5, r7, r3
 8007426:	d001      	beq.n	800742c <floor+0x44>
 8007428:	2500      	movs	r5, #0
 800742a:	4c2d      	ldr	r4, [pc, #180]	; (80074e0 <floor+0xf8>)
 800742c:	4623      	mov	r3, r4
 800742e:	462f      	mov	r7, r5
 8007430:	e025      	b.n	800747e <floor+0x96>
 8007432:	4a2c      	ldr	r2, [pc, #176]	; (80074e4 <floor+0xfc>)
 8007434:	fa42 f806 	asr.w	r8, r2, r6
 8007438:	ea01 0208 	and.w	r2, r1, r8
 800743c:	4302      	orrs	r2, r0
 800743e:	d01e      	beq.n	800747e <floor+0x96>
 8007440:	a325      	add	r3, pc, #148	; (adr r3, 80074d8 <floor+0xf0>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f7f8 ff45 	bl	80002d4 <__adddf3>
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	f7f9 fb87 	bl	8000b60 <__aeabi_dcmpgt>
 8007452:	2800      	cmp	r0, #0
 8007454:	d0ea      	beq.n	800742c <floor+0x44>
 8007456:	2c00      	cmp	r4, #0
 8007458:	bfbe      	ittt	lt
 800745a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800745e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007462:	19a4      	addlt	r4, r4, r6
 8007464:	2500      	movs	r5, #0
 8007466:	ea24 0408 	bic.w	r4, r4, r8
 800746a:	e7df      	b.n	800742c <floor+0x44>
 800746c:	2e33      	cmp	r6, #51	; 0x33
 800746e:	dd0a      	ble.n	8007486 <floor+0x9e>
 8007470:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007474:	d103      	bne.n	800747e <floor+0x96>
 8007476:	f7f8 ff2d 	bl	80002d4 <__adddf3>
 800747a:	4607      	mov	r7, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4638      	mov	r0, r7
 8007480:	4619      	mov	r1, r3
 8007482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007486:	f04f 32ff 	mov.w	r2, #4294967295
 800748a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800748e:	fa22 f808 	lsr.w	r8, r2, r8
 8007492:	ea18 0f00 	tst.w	r8, r0
 8007496:	d0f2      	beq.n	800747e <floor+0x96>
 8007498:	a30f      	add	r3, pc, #60	; (adr r3, 80074d8 <floor+0xf0>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f8 ff19 	bl	80002d4 <__adddf3>
 80074a2:	2200      	movs	r2, #0
 80074a4:	2300      	movs	r3, #0
 80074a6:	f7f9 fb5b 	bl	8000b60 <__aeabi_dcmpgt>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d0be      	beq.n	800742c <floor+0x44>
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	da02      	bge.n	80074b8 <floor+0xd0>
 80074b2:	2e14      	cmp	r6, #20
 80074b4:	d103      	bne.n	80074be <floor+0xd6>
 80074b6:	3401      	adds	r4, #1
 80074b8:	ea25 0508 	bic.w	r5, r5, r8
 80074bc:	e7b6      	b.n	800742c <floor+0x44>
 80074be:	2301      	movs	r3, #1
 80074c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80074c4:	fa03 f606 	lsl.w	r6, r3, r6
 80074c8:	4435      	add	r5, r6
 80074ca:	42bd      	cmp	r5, r7
 80074cc:	bf38      	it	cc
 80074ce:	18e4      	addcc	r4, r4, r3
 80074d0:	e7f2      	b.n	80074b8 <floor+0xd0>
 80074d2:	2500      	movs	r5, #0
 80074d4:	462c      	mov	r4, r5
 80074d6:	e7a9      	b.n	800742c <floor+0x44>
 80074d8:	8800759c 	.word	0x8800759c
 80074dc:	7e37e43c 	.word	0x7e37e43c
 80074e0:	bff00000 	.word	0xbff00000
 80074e4:	000fffff 	.word	0x000fffff

080074e8 <nan>:
 80074e8:	2000      	movs	r0, #0
 80074ea:	4901      	ldr	r1, [pc, #4]	; (80074f0 <nan+0x8>)
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	7ff80000 	.word	0x7ff80000

080074f4 <rint>:
 80074f4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80074f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074fa:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80074fe:	2f13      	cmp	r7, #19
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	460c      	mov	r4, r1
 8007506:	4605      	mov	r5, r0
 8007508:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800750c:	dc59      	bgt.n	80075c2 <rint+0xce>
 800750e:	2f00      	cmp	r7, #0
 8007510:	da2a      	bge.n	8007568 <rint+0x74>
 8007512:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007516:	4301      	orrs	r1, r0
 8007518:	d022      	beq.n	8007560 <rint+0x6c>
 800751a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800751e:	4301      	orrs	r1, r0
 8007520:	424d      	negs	r5, r1
 8007522:	430d      	orrs	r5, r1
 8007524:	4936      	ldr	r1, [pc, #216]	; (8007600 <rint+0x10c>)
 8007526:	0c5c      	lsrs	r4, r3, #17
 8007528:	0b2d      	lsrs	r5, r5, #12
 800752a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800752e:	0464      	lsls	r4, r4, #17
 8007530:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007534:	ea45 0304 	orr.w	r3, r5, r4
 8007538:	e9d1 4500 	ldrd	r4, r5, [r1]
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	f7f8 fec8 	bl	80002d4 <__adddf3>
 8007544:	e9cd 0100 	strd	r0, r1, [sp]
 8007548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800754c:	462b      	mov	r3, r5
 800754e:	4622      	mov	r2, r4
 8007550:	f7f8 febe 	bl	80002d0 <__aeabi_dsub>
 8007554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007558:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4610      	mov	r0, r2
 8007562:	4619      	mov	r1, r3
 8007564:	b003      	add	sp, #12
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007568:	4926      	ldr	r1, [pc, #152]	; (8007604 <rint+0x110>)
 800756a:	4139      	asrs	r1, r7
 800756c:	ea03 0001 	and.w	r0, r3, r1
 8007570:	4310      	orrs	r0, r2
 8007572:	d0f5      	beq.n	8007560 <rint+0x6c>
 8007574:	084b      	lsrs	r3, r1, #1
 8007576:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800757a:	ea52 0501 	orrs.w	r5, r2, r1
 800757e:	d00c      	beq.n	800759a <rint+0xa6>
 8007580:	ea24 0303 	bic.w	r3, r4, r3
 8007584:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007588:	2f13      	cmp	r7, #19
 800758a:	bf0c      	ite	eq
 800758c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007590:	2500      	movne	r5, #0
 8007592:	fa44 f707 	asr.w	r7, r4, r7
 8007596:	ea43 0407 	orr.w	r4, r3, r7
 800759a:	4919      	ldr	r1, [pc, #100]	; (8007600 <rint+0x10c>)
 800759c:	4623      	mov	r3, r4
 800759e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80075a2:	462a      	mov	r2, r5
 80075a4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80075a8:	4620      	mov	r0, r4
 80075aa:	4629      	mov	r1, r5
 80075ac:	f7f8 fe92 	bl	80002d4 <__adddf3>
 80075b0:	e9cd 0100 	strd	r0, r1, [sp]
 80075b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075b8:	4622      	mov	r2, r4
 80075ba:	462b      	mov	r3, r5
 80075bc:	f7f8 fe88 	bl	80002d0 <__aeabi_dsub>
 80075c0:	e7cc      	b.n	800755c <rint+0x68>
 80075c2:	2f33      	cmp	r7, #51	; 0x33
 80075c4:	dd05      	ble.n	80075d2 <rint+0xde>
 80075c6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80075ca:	d1c9      	bne.n	8007560 <rint+0x6c>
 80075cc:	f7f8 fe82 	bl	80002d4 <__adddf3>
 80075d0:	e7c4      	b.n	800755c <rint+0x68>
 80075d2:	f04f 31ff 	mov.w	r1, #4294967295
 80075d6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80075da:	fa21 f10c 	lsr.w	r1, r1, ip
 80075de:	4208      	tst	r0, r1
 80075e0:	d0be      	beq.n	8007560 <rint+0x6c>
 80075e2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80075e6:	bf18      	it	ne
 80075e8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80075ec:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80075f0:	bf1e      	ittt	ne
 80075f2:	ea20 0303 	bicne.w	r3, r0, r3
 80075f6:	fa45 fc0c 	asrne.w	ip, r5, ip
 80075fa:	ea43 050c 	orrne.w	r5, r3, ip
 80075fe:	e7cc      	b.n	800759a <rint+0xa6>
 8007600:	08007b88 	.word	0x08007b88
 8007604:	000fffff 	.word	0x000fffff

08007608 <scalbn>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	4617      	mov	r7, r2
 8007614:	460b      	mov	r3, r1
 8007616:	b996      	cbnz	r6, 800763e <scalbn+0x36>
 8007618:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800761c:	4303      	orrs	r3, r0
 800761e:	d039      	beq.n	8007694 <scalbn+0x8c>
 8007620:	4b35      	ldr	r3, [pc, #212]	; (80076f8 <scalbn+0xf0>)
 8007622:	2200      	movs	r2, #0
 8007624:	f7f9 f80c 	bl	8000640 <__aeabi_dmul>
 8007628:	4b34      	ldr	r3, [pc, #208]	; (80076fc <scalbn+0xf4>)
 800762a:	4604      	mov	r4, r0
 800762c:	429f      	cmp	r7, r3
 800762e:	460d      	mov	r5, r1
 8007630:	da0f      	bge.n	8007652 <scalbn+0x4a>
 8007632:	a32d      	add	r3, pc, #180	; (adr r3, 80076e8 <scalbn+0xe0>)
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f7f9 f802 	bl	8000640 <__aeabi_dmul>
 800763c:	e006      	b.n	800764c <scalbn+0x44>
 800763e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007642:	4296      	cmp	r6, r2
 8007644:	d10a      	bne.n	800765c <scalbn+0x54>
 8007646:	4602      	mov	r2, r0
 8007648:	f7f8 fe44 	bl	80002d4 <__adddf3>
 800764c:	4604      	mov	r4, r0
 800764e:	460d      	mov	r5, r1
 8007650:	e020      	b.n	8007694 <scalbn+0x8c>
 8007652:	460b      	mov	r3, r1
 8007654:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007658:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800765c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007660:	19b9      	adds	r1, r7, r6
 8007662:	4291      	cmp	r1, r2
 8007664:	dd0e      	ble.n	8007684 <scalbn+0x7c>
 8007666:	a322      	add	r3, pc, #136	; (adr r3, 80076f0 <scalbn+0xe8>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007670:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007674:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007678:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800767c:	4820      	ldr	r0, [pc, #128]	; (8007700 <scalbn+0xf8>)
 800767e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007682:	e7d9      	b.n	8007638 <scalbn+0x30>
 8007684:	2900      	cmp	r1, #0
 8007686:	dd08      	ble.n	800769a <scalbn+0x92>
 8007688:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800768c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007690:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007694:	4620      	mov	r0, r4
 8007696:	4629      	mov	r1, r5
 8007698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800769a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800769e:	da16      	bge.n	80076ce <scalbn+0xc6>
 80076a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076a4:	429f      	cmp	r7, r3
 80076a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80076aa:	dd08      	ble.n	80076be <scalbn+0xb6>
 80076ac:	4c15      	ldr	r4, [pc, #84]	; (8007704 <scalbn+0xfc>)
 80076ae:	4814      	ldr	r0, [pc, #80]	; (8007700 <scalbn+0xf8>)
 80076b0:	f363 74df 	bfi	r4, r3, #31, #1
 80076b4:	a30e      	add	r3, pc, #56	; (adr r3, 80076f0 <scalbn+0xe8>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	4621      	mov	r1, r4
 80076bc:	e7bc      	b.n	8007638 <scalbn+0x30>
 80076be:	4c12      	ldr	r4, [pc, #72]	; (8007708 <scalbn+0x100>)
 80076c0:	4812      	ldr	r0, [pc, #72]	; (800770c <scalbn+0x104>)
 80076c2:	f363 74df 	bfi	r4, r3, #31, #1
 80076c6:	a308      	add	r3, pc, #32	; (adr r3, 80076e8 <scalbn+0xe0>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	e7f5      	b.n	80076ba <scalbn+0xb2>
 80076ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076d2:	3136      	adds	r1, #54	; 0x36
 80076d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	2200      	movs	r2, #0
 80076e2:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <scalbn+0x108>)
 80076e4:	e7a8      	b.n	8007638 <scalbn+0x30>
 80076e6:	bf00      	nop
 80076e8:	c2f8f359 	.word	0xc2f8f359
 80076ec:	01a56e1f 	.word	0x01a56e1f
 80076f0:	8800759c 	.word	0x8800759c
 80076f4:	7e37e43c 	.word	0x7e37e43c
 80076f8:	43500000 	.word	0x43500000
 80076fc:	ffff3cb0 	.word	0xffff3cb0
 8007700:	8800759c 	.word	0x8800759c
 8007704:	7e37e43c 	.word	0x7e37e43c
 8007708:	01a56e1f 	.word	0x01a56e1f
 800770c:	c2f8f359 	.word	0xc2f8f359
 8007710:	3c900000 	.word	0x3c900000

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr
